/*
 * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.contracts.contextual;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("plugins/contracts/contracts-subplugins/testData/contracts")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class ContextualEffectsDiagnosticTestGenerated extends AbstractContextualEffectsDiagnosticTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
    }

    public void testAllFilesPresentInContracts() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("plugins/contracts/contracts-subplugins/testData/contracts"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("plugins/contracts/contracts-subplugins/testData/contracts/checkedExceptions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CheckedExceptions extends AbstractContextualEffectsDiagnosticTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInCheckedExceptions() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("plugins/contracts/contracts-subplugins/testData/contracts/checkedExceptions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("extensionFunctions.kt")
        public void testExtensionFunctions() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/checkedExceptions/extensionFunctions.kt");
        }

        @TestMetadata("for.kt")
        public void testFor() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/checkedExceptions/for.kt");
        }

        @TestMetadata("if.kt")
        public void testIf() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/checkedExceptions/if.kt");
        }

        @TestMetadata("innerCatch.kt")
        public void testInnerCatch() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/checkedExceptions/innerCatch.kt");
        }

        @TestMetadata("multipleCatch.kt")
        public void testMultipleCatch() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/checkedExceptions/multipleCatch.kt");
        }

        @TestMetadata("runCatch.kt")
        public void testRunCatch() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/checkedExceptions/runCatch.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/checkedExceptions/simple.kt");
        }

        @TestMetadata("throwWithContract.kt")
        public void testThrowWithContract() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/checkedExceptions/throwWithContract.kt");
        }

        @TestMetadata("when.kt")
        public void testWhen() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/checkedExceptions/when.kt");
        }
    }

    @TestMetadata("plugins/contracts/contracts-subplugins/testData/contracts/dslMarker")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DslMarker extends AbstractContextualEffectsDiagnosticTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInDslMarker() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("plugins/contracts/contracts-subplugins/testData/contracts/dslMarker"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/dslMarker/simple.kt");
        }
    }

    @TestMetadata("plugins/contracts/contracts-subplugins/testData/contracts/parsing")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Parsing extends AbstractContextualEffectsDiagnosticTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInParsing() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("plugins/contracts/contracts-subplugins/testData/contracts/parsing"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("wrongReceiver.kt")
        public void testWrongReceiver() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/parsing/wrongReceiver.kt");
        }
    }

    @TestMetadata("plugins/contracts/contracts-subplugins/testData/contracts/safeBuilders")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SafeBuilders extends AbstractContextualEffectsDiagnosticTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInSafeBuilders() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("plugins/contracts/contracts-subplugins/testData/contracts/safeBuilders"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("badCases.kt")
        public void testBadCases() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/safeBuilders/badCases.kt");
        }

        @TestMetadata("complicatedBuilders.kt")
        public void testComplicatedBuilders() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/safeBuilders/complicatedBuilders.kt");
        }

        @TestMetadata("functionInvocationKinds.kt")
        public void testFunctionInvocationKinds() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/safeBuilders/functionInvocationKinds.kt");
        }

        @TestMetadata("if.kt")
        public void testIf() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/safeBuilders/if.kt");
        }

        @TestMetadata("loops.kt")
        public void testLoops() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/safeBuilders/loops.kt");
        }

        @TestMetadata("nestedBuild.kt")
        public void testNestedBuild() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/safeBuilders/nestedBuild.kt");
        }

        @TestMetadata("qualifiedThis.kt")
        public void testQualifiedThis() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/safeBuilders/qualifiedThis.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/safeBuilders/simple.kt");
        }

        @TestMetadata("when.kt")
        public void testWhen() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/safeBuilders/when.kt");
        }
    }

    @TestMetadata("plugins/contracts/contracts-subplugins/testData/contracts/transactions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Transactions extends AbstractContextualEffectsDiagnosticTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInTransactions() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("plugins/contracts/contracts-subplugins/testData/contracts/transactions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("if.kt")
        public void testIf() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/transactions/if.kt");
        }

        @TestMetadata("loops.kt")
        public void testLoops() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/transactions/loops.kt");
        }

        @TestMetadata("multipleTransactions.kt")
        public void testMultipleTransactions() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/transactions/multipleTransactions.kt");
        }

        @TestMetadata("receivers.kt")
        public void testReceivers() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/transactions/receivers.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("plugins/contracts/contracts-subplugins/testData/contracts/transactions/simple.kt");
        }
    }
}

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plugins/contracts/contracts-subplugins/src/subplugin_contracts_metadata.proto

package org.jetbrains.kotlin.metadata.extension.contracts.subplugin;

public final class ContractSubpluginsProtoBuf {
  private ContractSubpluginsProtoBuf() {}
  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite registry) {
    registry.add(org.jetbrains.kotlin.metadata.extension.contracts.subplugin.ContractSubpluginsProtoBuf.providerExceptionType);
    registry.add(org.jetbrains.kotlin.metadata.extension.contracts.subplugin.ContractSubpluginsProtoBuf.verifierExceptionType);
    registry.add(org.jetbrains.kotlin.metadata.extension.contracts.subplugin.ContractSubpluginsProtoBuf.verifierCallKind);
    registry.add(org.jetbrains.kotlin.metadata.extension.contracts.subplugin.ContractSubpluginsProtoBuf.transactionVerifierType);
    registry.add(org.jetbrains.kotlin.metadata.extension.contracts.subplugin.ContractSubpluginsProtoBuf.cleanerCallKind);
  }
  public static final int PROVIDEREXCEPTIONTYPE_FIELD_NUMBER = 100;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.extension.contracts.ContextProvider { ... }</code>
   *
   * <pre>
   * Checked exceptions
   * </pre>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider,
      org.jetbrains.kotlin.metadata.ProtoBuf.Type> providerExceptionType = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance(),
        null,
        100,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.MESSAGE,
        org.jetbrains.kotlin.metadata.ProtoBuf.Type.class);
  public static final int VERIFIEREXCEPTIONTYPE_FIELD_NUMBER = 100;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.extension.contracts.ContextVerifier { ... }</code>
   *
   * <pre>
   * Checked exceptions
   * </pre>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier,
      org.jetbrains.kotlin.metadata.ProtoBuf.Type> verifierExceptionType = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.ProtoBuf.Type.getDefaultInstance(),
        null,
        100,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.MESSAGE,
        org.jetbrains.kotlin.metadata.ProtoBuf.Type.class);
  public static final int VERIFIERCALLKIND_FIELD_NUMBER = 104;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.extension.contracts.ContextVerifier { ... }</code>
   *
   * <pre>
   * Safe builders
   * </pre>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier,
      org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind> verifierCallKind = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind.AT_MOST_ONCE,
        null,
        org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind.internalGetValueMap(),
        104,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.ENUM,
        org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind.class);
  public static final int TRANSACTIONVERIFIERTYPE_FIELD_NUMBER = 110;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.extension.contracts.ContextVerifier { ... }</code>
   *
   * <pre>
   * Transactions
   *   1 -&gt; ClosedTransactionVerifierDeclaration
   *   2 -&gt; OpenedTransactionVerifierDeclaration
   * </pre>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier,
      java.lang.Integer> transactionVerifierType = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier.getDefaultInstance(),
        0,
        null,
        null,
        110,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.INT32,
        java.lang.Integer.class);
  public static final int CLEANERCALLKIND_FIELD_NUMBER = 104;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.extension.contracts.ContextCleaner { ... }</code>
   *
   * <pre>
   * Safe builders
   * </pre>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner,
      org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind> cleanerCallKind = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind.AT_MOST_ONCE,
        null,
        org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind.internalGetValueMap(),
        104,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.ENUM,
        org.jetbrains.kotlin.metadata.ProtoBuf.Effect.InvocationKind.class);

  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
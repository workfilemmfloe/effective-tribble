// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plugins/contracts/contracts-plugin/src/contracts_metadata.proto

package org.jetbrains.kotlin.metadata.extension.contracts;

public final class ContractsProtoBuf {
  private ContractsProtoBuf() {}
  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite registry) {
    registry.add(org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.contextualEffectType);
    registry.add(org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.subpluginId);
    registry.add(org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.owner);
    registry.add(org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.references);
    registry.add(org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.provider);
    registry.add(org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.verifier);
    registry.add(org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.cleaner);
  }
  /**
   * Protobuf enum {@code org.jetbrains.kotlin.metadata.extension.contracts.ContextualEffectType}
   */
  public enum ContextualEffectType
      implements org.jetbrains.kotlin.protobuf.Internal.EnumLite {
    /**
     * <code>UNKNOWN = 0;</code>
     */
    UNKNOWN(0, 0),
    /**
     * <code>CONTEXT_PROVIDER = 1;</code>
     */
    CONTEXT_PROVIDER(1, 1),
    /**
     * <code>CONTEXT_VERIFIER = 2;</code>
     */
    CONTEXT_VERIFIER(2, 2),
    /**
     * <code>CONTEXT_CLEANER = 3;</code>
     */
    CONTEXT_CLEANER(3, 3),
    /**
     * <code>LAMBDA_CONTEXT_PROVIDER = 4;</code>
     */
    LAMBDA_CONTEXT_PROVIDER(4, 4),
    /**
     * <code>LAMBDA_CONTEXT_VERIFIER = 5;</code>
     */
    LAMBDA_CONTEXT_VERIFIER(5, 5),
    /**
     * <code>LAMBDA_CONTEXT_CLEANER = 6;</code>
     */
    LAMBDA_CONTEXT_CLEANER(6, 6),
    ;

    /**
     * <code>UNKNOWN = 0;</code>
     */
    public static final int UNKNOWN_VALUE = 0;
    /**
     * <code>CONTEXT_PROVIDER = 1;</code>
     */
    public static final int CONTEXT_PROVIDER_VALUE = 1;
    /**
     * <code>CONTEXT_VERIFIER = 2;</code>
     */
    public static final int CONTEXT_VERIFIER_VALUE = 2;
    /**
     * <code>CONTEXT_CLEANER = 3;</code>
     */
    public static final int CONTEXT_CLEANER_VALUE = 3;
    /**
     * <code>LAMBDA_CONTEXT_PROVIDER = 4;</code>
     */
    public static final int LAMBDA_CONTEXT_PROVIDER_VALUE = 4;
    /**
     * <code>LAMBDA_CONTEXT_VERIFIER = 5;</code>
     */
    public static final int LAMBDA_CONTEXT_VERIFIER_VALUE = 5;
    /**
     * <code>LAMBDA_CONTEXT_CLEANER = 6;</code>
     */
    public static final int LAMBDA_CONTEXT_CLEANER_VALUE = 6;


    public final int getNumber() { return value; }

    public static ContextualEffectType valueOf(int value) {
      switch (value) {
        case 0: return UNKNOWN;
        case 1: return CONTEXT_PROVIDER;
        case 2: return CONTEXT_VERIFIER;
        case 3: return CONTEXT_CLEANER;
        case 4: return LAMBDA_CONTEXT_PROVIDER;
        case 5: return LAMBDA_CONTEXT_VERIFIER;
        case 6: return LAMBDA_CONTEXT_CLEANER;
        default: return null;
      }
    }

    public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<ContextualEffectType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<ContextualEffectType>
        internalValueMap =
          new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<ContextualEffectType>() {
            public ContextualEffectType findValueByNumber(int number) {
              return ContextualEffectType.valueOf(number);
            }
          };

    private final int value;

    private ContextualEffectType(int index, int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.metadata.extension.contracts.ContextualEffectType)
  }

  public interface ContextProviderOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.extension.contracts.ContextProvider)
       org.jetbrains.kotlin.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<ContextProvider> {

    /**
     * <code>optional string providerPluginId = 1;</code>
     */
    boolean hasProviderPluginId();
    /**
     * <code>optional string providerPluginId = 1;</code>
     */
    java.lang.String getProviderPluginId();
    /**
     * <code>optional string providerPluginId = 1;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getProviderPluginIdBytes();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.extension.contracts.ContextProvider}
   */
  public static final class ContextProvider extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableMessage<
        ContextProvider> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.extension.contracts.ContextProvider)
      ContextProviderOrBuilder {
    // Use ContextProvider.newBuilder() to construct.
    private ContextProvider(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableBuilder<org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ContextProvider(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final ContextProvider defaultInstance;
    public static ContextProvider getDefaultInstance() {
      return defaultInstance;
    }

    public ContextProvider getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private ContextProvider(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              providerPluginId_ = bs;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<ContextProvider> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<ContextProvider>() {
      public ContextProvider parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new ContextProvider(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<ContextProvider> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int PROVIDERPLUGINID_FIELD_NUMBER = 1;
    private java.lang.Object providerPluginId_;
    /**
     * <code>optional string providerPluginId = 1;</code>
     */
    public boolean hasProviderPluginId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string providerPluginId = 1;</code>
     */
    public java.lang.String getProviderPluginId() {
      java.lang.Object ref = providerPluginId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          providerPluginId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string providerPluginId = 1;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getProviderPluginIdBytes() {
      java.lang.Object ref = providerPluginId_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        providerPluginId_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      providerPluginId_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite
        .ExtendableMessage<org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getProviderPluginIdBytes());
      }
      extensionWriter.writeUntil(1000, output);
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(1, getProviderPluginIdBytes());
      }
      size += extensionsSerializedSize();
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.extension.contracts.ContextProvider}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.extension.contracts.ContextProvider)
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProviderOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        providerPluginId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider build() {
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider buildPartial() {
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider result = new org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.providerPluginId_ = providerPluginId_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider other) {
        if (other == org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider.getDefaultInstance()) return this;
        if (other.hasProviderPluginId()) {
          bitField0_ |= 0x00000001;
          providerPluginId_ = other.providerPluginId_;
          
        }
        this.mergeExtensionFields(other);
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object providerPluginId_ = "";
      /**
       * <code>optional string providerPluginId = 1;</code>
       */
      public boolean hasProviderPluginId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string providerPluginId = 1;</code>
       */
      public java.lang.String getProviderPluginId() {
        java.lang.Object ref = providerPluginId_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            providerPluginId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string providerPluginId = 1;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getProviderPluginIdBytes() {
        java.lang.Object ref = providerPluginId_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          providerPluginId_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string providerPluginId = 1;</code>
       */
      public Builder setProviderPluginId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        providerPluginId_ = value;
        
        return this;
      }
      /**
       * <code>optional string providerPluginId = 1;</code>
       */
      public Builder clearProviderPluginId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        providerPluginId_ = getDefaultInstance().getProviderPluginId();
        
        return this;
      }
      /**
       * <code>optional string providerPluginId = 1;</code>
       */
      public Builder setProviderPluginIdBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        providerPluginId_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.extension.contracts.ContextProvider)
    }

    static {
      defaultInstance = new ContextProvider(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.extension.contracts.ContextProvider)
  }

  public interface ContextVerifierOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.extension.contracts.ContextVerifier)
       org.jetbrains.kotlin.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<ContextVerifier> {

    /**
     * <code>optional string verifierPluginId = 1;</code>
     */
    boolean hasVerifierPluginId();
    /**
     * <code>optional string verifierPluginId = 1;</code>
     */
    java.lang.String getVerifierPluginId();
    /**
     * <code>optional string verifierPluginId = 1;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getVerifierPluginIdBytes();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.extension.contracts.ContextVerifier}
   */
  public static final class ContextVerifier extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableMessage<
        ContextVerifier> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.extension.contracts.ContextVerifier)
      ContextVerifierOrBuilder {
    // Use ContextVerifier.newBuilder() to construct.
    private ContextVerifier(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableBuilder<org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ContextVerifier(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final ContextVerifier defaultInstance;
    public static ContextVerifier getDefaultInstance() {
      return defaultInstance;
    }

    public ContextVerifier getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private ContextVerifier(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              verifierPluginId_ = bs;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<ContextVerifier> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<ContextVerifier>() {
      public ContextVerifier parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new ContextVerifier(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<ContextVerifier> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int VERIFIERPLUGINID_FIELD_NUMBER = 1;
    private java.lang.Object verifierPluginId_;
    /**
     * <code>optional string verifierPluginId = 1;</code>
     */
    public boolean hasVerifierPluginId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string verifierPluginId = 1;</code>
     */
    public java.lang.String getVerifierPluginId() {
      java.lang.Object ref = verifierPluginId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          verifierPluginId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string verifierPluginId = 1;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getVerifierPluginIdBytes() {
      java.lang.Object ref = verifierPluginId_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        verifierPluginId_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      verifierPluginId_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite
        .ExtendableMessage<org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getVerifierPluginIdBytes());
      }
      extensionWriter.writeUntil(1000, output);
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(1, getVerifierPluginIdBytes());
      }
      size += extensionsSerializedSize();
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.extension.contracts.ContextVerifier}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.extension.contracts.ContextVerifier)
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifierOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        verifierPluginId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier build() {
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier buildPartial() {
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier result = new org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.verifierPluginId_ = verifierPluginId_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier other) {
        if (other == org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier.getDefaultInstance()) return this;
        if (other.hasVerifierPluginId()) {
          bitField0_ |= 0x00000001;
          verifierPluginId_ = other.verifierPluginId_;
          
        }
        this.mergeExtensionFields(other);
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object verifierPluginId_ = "";
      /**
       * <code>optional string verifierPluginId = 1;</code>
       */
      public boolean hasVerifierPluginId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string verifierPluginId = 1;</code>
       */
      public java.lang.String getVerifierPluginId() {
        java.lang.Object ref = verifierPluginId_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            verifierPluginId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string verifierPluginId = 1;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getVerifierPluginIdBytes() {
        java.lang.Object ref = verifierPluginId_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          verifierPluginId_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string verifierPluginId = 1;</code>
       */
      public Builder setVerifierPluginId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        verifierPluginId_ = value;
        
        return this;
      }
      /**
       * <code>optional string verifierPluginId = 1;</code>
       */
      public Builder clearVerifierPluginId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        verifierPluginId_ = getDefaultInstance().getVerifierPluginId();
        
        return this;
      }
      /**
       * <code>optional string verifierPluginId = 1;</code>
       */
      public Builder setVerifierPluginIdBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        verifierPluginId_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.extension.contracts.ContextVerifier)
    }

    static {
      defaultInstance = new ContextVerifier(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.extension.contracts.ContextVerifier)
  }

  public interface ContextCleanerOrBuilder extends 
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.metadata.extension.contracts.ContextCleaner)
       org.jetbrains.kotlin.protobuf.GeneratedMessageLite.
            ExtendableMessageOrBuilder<ContextCleaner> {

    /**
     * <code>optional string cleanerPluginId = 1;</code>
     */
    boolean hasCleanerPluginId();
    /**
     * <code>optional string cleanerPluginId = 1;</code>
     */
    java.lang.String getCleanerPluginId();
    /**
     * <code>optional string cleanerPluginId = 1;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getCleanerPluginIdBytes();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.metadata.extension.contracts.ContextCleaner}
   */
  public static final class ContextCleaner extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableMessage<
        ContextCleaner> implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.metadata.extension.contracts.ContextCleaner)
      ContextCleanerOrBuilder {
    // Use ContextCleaner.newBuilder() to construct.
    private ContextCleaner(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableBuilder<org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ContextCleaner(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

    private static final ContextCleaner defaultInstance;
    public static ContextCleaner getDefaultInstance() {
      return defaultInstance;
    }

    public ContextCleaner getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
    private ContextCleaner(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
          org.jetbrains.kotlin.protobuf.ByteString.newOutput();
      org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput, 1);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              cleanerPluginId_ = bs;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static org.jetbrains.kotlin.protobuf.Parser<ContextCleaner> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<ContextCleaner>() {
      public ContextCleaner parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new ContextCleaner(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<ContextCleaner> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CLEANERPLUGINID_FIELD_NUMBER = 1;
    private java.lang.Object cleanerPluginId_;
    /**
     * <code>optional string cleanerPluginId = 1;</code>
     */
    public boolean hasCleanerPluginId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string cleanerPluginId = 1;</code>
     */
    public java.lang.String getCleanerPluginId() {
      java.lang.Object ref = cleanerPluginId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          cleanerPluginId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string cleanerPluginId = 1;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getCleanerPluginIdBytes() {
      java.lang.Object ref = cleanerPluginId_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        cleanerPluginId_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      cleanerPluginId_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite
        .ExtendableMessage<org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getCleanerPluginIdBytes());
      }
      extensionWriter.writeUntil(1000, output);
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(1, getCleanerPluginIdBytes());
      }
      size += extensionsSerializedSize();
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.metadata.extension.contracts.ContextCleaner}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessageLite.ExtendableBuilder<
          org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner, Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.metadata.extension.contracts.ContextCleaner)
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleanerOrBuilder {
      // Construct using org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cleanerPluginId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner getDefaultInstanceForType() {
        return org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner.getDefaultInstance();
      }

      public org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner build() {
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner buildPartial() {
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner result = new org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cleanerPluginId_ = cleanerPluginId_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner other) {
        if (other == org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner.getDefaultInstance()) return this;
        if (other.hasCleanerPluginId()) {
          bitField0_ |= 0x00000001;
          cleanerPluginId_ = other.cleanerPluginId_;
          
        }
        this.mergeExtensionFields(other);
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object cleanerPluginId_ = "";
      /**
       * <code>optional string cleanerPluginId = 1;</code>
       */
      public boolean hasCleanerPluginId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string cleanerPluginId = 1;</code>
       */
      public java.lang.String getCleanerPluginId() {
        java.lang.Object ref = cleanerPluginId_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            cleanerPluginId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string cleanerPluginId = 1;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getCleanerPluginIdBytes() {
        java.lang.Object ref = cleanerPluginId_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          cleanerPluginId_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string cleanerPluginId = 1;</code>
       */
      public Builder setCleanerPluginId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        cleanerPluginId_ = value;
        
        return this;
      }
      /**
       * <code>optional string cleanerPluginId = 1;</code>
       */
      public Builder clearCleanerPluginId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cleanerPluginId_ = getDefaultInstance().getCleanerPluginId();
        
        return this;
      }
      /**
       * <code>optional string cleanerPluginId = 1;</code>
       */
      public Builder setCleanerPluginIdBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        cleanerPluginId_ = value;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.metadata.extension.contracts.ContextCleaner)
    }

    static {
      defaultInstance = new ContextCleaner(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.metadata.extension.contracts.ContextCleaner)
  }

  public static final int CONTEXTUALEFFECTTYPE_FIELD_NUMBER = 100;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Effect { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Effect,
      org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextualEffectType> contextualEffectType = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Effect.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextualEffectType.UNKNOWN,
        null,
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextualEffectType.internalGetValueMap(),
        100,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.ENUM,
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextualEffectType.class);
  public static final int SUBPLUGINID_FIELD_NUMBER = 101;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Effect { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Effect,
      java.lang.String> subpluginId = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Effect.getDefaultInstance(),
        "",
        null,
        null,
        101,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.STRING,
        java.lang.String.class);
  public static final int OWNER_FIELD_NUMBER = 102;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Effect { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Effect,
      org.jetbrains.kotlin.metadata.ProtoBuf.Expression> owner = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Effect.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.ProtoBuf.Expression.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.ProtoBuf.Expression.getDefaultInstance(),
        null,
        102,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.MESSAGE,
        org.jetbrains.kotlin.metadata.ProtoBuf.Expression.class);
  public static final int REFERENCES_FIELD_NUMBER = 103;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Effect { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Effect,
      java.util.List<org.jetbrains.kotlin.metadata.ProtoBuf.Expression>> references = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newRepeatedGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Effect.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.ProtoBuf.Expression.getDefaultInstance(),
        null,
        103,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.MESSAGE,
        false,
        org.jetbrains.kotlin.metadata.ProtoBuf.Expression.class);
  public static final int PROVIDER_FIELD_NUMBER = 104;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Effect { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Effect,
      org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider> provider = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Effect.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider.getDefaultInstance(),
        null,
        104,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.MESSAGE,
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextProvider.class);
  public static final int VERIFIER_FIELD_NUMBER = 105;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Effect { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Effect,
      org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier> verifier = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Effect.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier.getDefaultInstance(),
        null,
        105,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.MESSAGE,
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextVerifier.class);
  public static final int CLEANER_FIELD_NUMBER = 106;
  /**
   * <code>extend .org.jetbrains.kotlin.metadata.Effect { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite.GeneratedExtension<
      org.jetbrains.kotlin.metadata.ProtoBuf.Effect,
      org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner> cleaner = org.jetbrains.kotlin.protobuf.GeneratedMessageLite
          .newSingularGeneratedExtension(
        org.jetbrains.kotlin.metadata.ProtoBuf.Effect.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner.getDefaultInstance(),
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner.getDefaultInstance(),
        null,
        106,
        org.jetbrains.kotlin.protobuf.WireFormat.FieldType.MESSAGE,
        org.jetbrains.kotlin.metadata.extension.contracts.ContractsProtoBuf.ContextCleaner.class);

  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
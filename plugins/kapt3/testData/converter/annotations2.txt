package test;

@Anno(value = "anno-class")
public abstract @interface Anno {

    public abstract java.lang.String value();
}

////////////////////

package test;

public final class AnnotationsTest {

    public AnnotationsTest() {
        super();
    }

    @Anno(value = "top-level-fun")
    public static final void topLevelFun(@Anno(value = "top-level-fun-receiver")
    java.lang.String $receiver) {
    }

    @Anno(value = "top-level-val")
    private static void topLevelVal$annotations(int p0) {
    }

    public static final java.lang.String getTopLevelVal(@Anno(value = "top-level-val-receiver")
    int $receiver) {
        return null;
    }
}

////////////////////

package test;

@Anno(value = "enum")
public enum Enum {
    /*public static final*/ WHITE /* = new WHITE(0) */,
    /*public static final*/ BLACK /* = new BLACK(0) */;
    private final int x = 0;

    public final int getX() {
        return 0;
    }

    @Anno(value = "enum-constructor")
    Enum(@Anno(value = "x")
    int x) {
    }
}

////////////////////

package test;

@Anno(value = "clazz")
public abstract class Test {
    private java.lang.String v;

    @Anno(value = "abstract-method")
    public abstract java.lang.String abstractMethod();

    @Anno(value = "abstract-val")
    private static void abstractVal$annotations() {
    }

    public abstract java.lang.String getAbstractVal();

    @Anno(value = "v-property")
    private static void v$annotations() {
    }

    @Anno(value = "v-get")
    public final java.lang.String getV() {
        return null;
    }

    @Anno(value = "v-set")
    public final void setV(@Anno(value = "v-setparam")
    java.lang.String p0) {
    }

    @Anno(value = "test-constructor")
    protected Test(@Anno(value = "v-param")
    java.lang.String v) {
        super();
    }
}

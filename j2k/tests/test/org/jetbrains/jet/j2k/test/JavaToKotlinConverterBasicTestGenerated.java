/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.j2k.test;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.j2k.test.AbstractJavaToKotlinConverterBasicTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("j2k/tests/testData/ast")
@InnerTestClasses({JavaToKotlinConverterBasicTestGenerated.Annotations.class, JavaToKotlinConverterBasicTestGenerated.AnonymousBlock.class, JavaToKotlinConverterBasicTestGenerated.ArrayAccessExpression.class, JavaToKotlinConverterBasicTestGenerated.ArrayInitializerExpression.class, JavaToKotlinConverterBasicTestGenerated.ArrayType.class, JavaToKotlinConverterBasicTestGenerated.AssertStatement.class, JavaToKotlinConverterBasicTestGenerated.AssignmentExpression.class, JavaToKotlinConverterBasicTestGenerated.BinaryExpression.class, JavaToKotlinConverterBasicTestGenerated.BoxedType.class, JavaToKotlinConverterBasicTestGenerated.BreakStatement.class, JavaToKotlinConverterBasicTestGenerated.CallChainExpression.class, JavaToKotlinConverterBasicTestGenerated.Class.class, JavaToKotlinConverterBasicTestGenerated.ClassExpression.class, JavaToKotlinConverterBasicTestGenerated.ConditionalExpression.class, JavaToKotlinConverterBasicTestGenerated.Constructors.class, JavaToKotlinConverterBasicTestGenerated.ContinueStatement.class, JavaToKotlinConverterBasicTestGenerated.DeclarationStatement.class, JavaToKotlinConverterBasicTestGenerated.DoWhileStatement.class, JavaToKotlinConverterBasicTestGenerated.Enum.class, JavaToKotlinConverterBasicTestGenerated.Field.class, JavaToKotlinConverterBasicTestGenerated.For.class, JavaToKotlinConverterBasicTestGenerated.ForeachStatement.class, JavaToKotlinConverterBasicTestGenerated.Formatting.class, JavaToKotlinConverterBasicTestGenerated.Function.class, JavaToKotlinConverterBasicTestGenerated.Identifier.class, JavaToKotlinConverterBasicTestGenerated.IfStatement.class, JavaToKotlinConverterBasicTestGenerated.ImportStatement.class, JavaToKotlinConverterBasicTestGenerated.InProjectionType.class, JavaToKotlinConverterBasicTestGenerated.Inheritance.class, JavaToKotlinConverterBasicTestGenerated.IsOperator.class, JavaToKotlinConverterBasicTestGenerated.Issues.class, JavaToKotlinConverterBasicTestGenerated.KotlinExclusion.class, JavaToKotlinConverterBasicTestGenerated.LabelStatement.class, JavaToKotlinConverterBasicTestGenerated.List.class, JavaToKotlinConverterBasicTestGenerated.LiteralExpression.class, JavaToKotlinConverterBasicTestGenerated.LocalVariable.class, JavaToKotlinConverterBasicTestGenerated.MethodCallExpression.class, JavaToKotlinConverterBasicTestGenerated.Misc.class, JavaToKotlinConverterBasicTestGenerated.NewClassExpression.class, JavaToKotlinConverterBasicTestGenerated.ObjectLiteral.class, JavaToKotlinConverterBasicTestGenerated.OutProjectionType.class, JavaToKotlinConverterBasicTestGenerated.PackageStatement.class, JavaToKotlinConverterBasicTestGenerated.ParenthesizedExpression.class, JavaToKotlinConverterBasicTestGenerated.PolyadicExpression.class, JavaToKotlinConverterBasicTestGenerated.PostfixOperator.class, JavaToKotlinConverterBasicTestGenerated.PrefixOperator.class, JavaToKotlinConverterBasicTestGenerated.RawGenerics.class, JavaToKotlinConverterBasicTestGenerated.ReturnStatement.class, JavaToKotlinConverterBasicTestGenerated.StarProjectionType.class, JavaToKotlinConverterBasicTestGenerated.SuperExpression.class, JavaToKotlinConverterBasicTestGenerated.Switch.class, JavaToKotlinConverterBasicTestGenerated.SynchronizedStatement.class, JavaToKotlinConverterBasicTestGenerated.ThisExpression.class, JavaToKotlinConverterBasicTestGenerated.ThrowStatement.class, JavaToKotlinConverterBasicTestGenerated.Trait.class, JavaToKotlinConverterBasicTestGenerated.TryStatement.class, JavaToKotlinConverterBasicTestGenerated.TypeCastExpression.class, JavaToKotlinConverterBasicTestGenerated.TypeParameters.class, JavaToKotlinConverterBasicTestGenerated.VarArg.class, JavaToKotlinConverterBasicTestGenerated.WhileStatement.class})
public class JavaToKotlinConverterBasicTestGenerated extends AbstractJavaToKotlinConverterBasicTest {
    public void testAllFilesPresentInAst() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast"), Pattern.compile("^(.+)\\.java$"), true);
    }
    
    @TestMetadata("j2k/tests/testData/ast/annotations")
    public static class Annotations extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInAnnotations() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/annotations"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("jetbrainsNotNull.java")
        public void testJetbrainsNotNull() throws Exception {
            doTest("j2k/tests/testData/ast/annotations/jetbrainsNotNull.java");
        }
        
        @TestMetadata("jetbrainsNotNullChainExpr.java")
        public void testJetbrainsNotNullChainExpr() throws Exception {
            doTest("j2k/tests/testData/ast/annotations/jetbrainsNotNullChainExpr.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/anonymousBlock")
    public static class AnonymousBlock extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInAnonymousBlock() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/anonymousBlock"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("oneAnonBlock.java")
        public void testOneAnonBlock() throws Exception {
            doTest("j2k/tests/testData/ast/anonymousBlock/oneAnonBlock.java");
        }
        
        @TestMetadata("oneStaticAnonBlock.java")
        public void testOneStaticAnonBlock() throws Exception {
            doTest("j2k/tests/testData/ast/anonymousBlock/oneStaticAnonBlock.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/arrayAccessExpression")
    public static class ArrayAccessExpression extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInArrayAccessExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/arrayAccessExpression"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("expressionIndex.java")
        public void testExpressionIndex() throws Exception {
            doTest("j2k/tests/testData/ast/arrayAccessExpression/expressionIndex.java");
        }
        
        @TestMetadata("intIndex.java")
        public void testIntIndex() throws Exception {
            doTest("j2k/tests/testData/ast/arrayAccessExpression/intIndex.java");
        }
        
        @TestMetadata("variableIndex.java")
        public void testVariableIndex() throws Exception {
            doTest("j2k/tests/testData/ast/arrayAccessExpression/variableIndex.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/arrayInitializerExpression")
    public static class ArrayInitializerExpression extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInArrayInitializerExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/arrayInitializerExpression"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("doubleArray.java")
        public void testDoubleArray() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/doubleArray.java");
        }
        
        @TestMetadata("doubleArrayWithVariables.java")
        public void testDoubleArrayWithVariables() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/doubleArrayWithVariables.java");
        }
        
        @TestMetadata("floatArray.java")
        public void testFloatArray() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/floatArray.java");
        }
        
        @TestMetadata("intArrayWithLength.java")
        public void testIntArrayWithLength() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/intArrayWithLength.java");
        }
        
        @TestMetadata("javaLangDoubleArray.java")
        public void testJavaLangDoubleArray() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/javaLangDoubleArray.java");
        }
        
        @TestMetadata("javaLangFloatArray.java")
        public void testJavaLangFloatArray() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/javaLangFloatArray.java");
        }
        
        @TestMetadata("newByte.java")
        public void testNewByte() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/newByte.java");
        }
        
        @TestMetadata("newInt.java")
        public void testNewInt() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/newInt.java");
        }
        
        @TestMetadata("objectArrayWithLength.java")
        public void testObjectArrayWithLength() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/objectArrayWithLength.java");
        }
        
        @TestMetadata("oneDim.java")
        public void testOneDim() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/oneDim.java");
        }
        
        @TestMetadata("oneDimWithVariables.java")
        public void testOneDimWithVariables() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/oneDimWithVariables.java");
        }
        
        @TestMetadata("twoDim.java")
        public void testTwoDim() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/twoDim.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/arrayType")
    public static class ArrayType extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInArrayType() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/arrayType"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("arrayInitializationStatement.java")
        public void testArrayInitializationStatement() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/arrayInitializationStatement.java");
        }
        
        @TestMetadata("arrayInitializationStatementWithDimension.java")
        public void testArrayInitializationStatementWithDimension() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/arrayInitializationStatementWithDimension.java");
        }
        
        @TestMetadata("arrayInitializationStatementWithDimension3d.java")
        public void testArrayInitializationStatementWithDimension3d() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/arrayInitializationStatementWithDimension3d.java");
        }
        
        @TestMetadata("arrayInitializationStatementWithDimensionExplicit.java")
        public void testArrayInitializationStatementWithDimensionExplicit() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/arrayInitializationStatementWithDimensionExplicit.java");
        }
        
        @TestMetadata("d2StringEmptyArray.java")
        public void testD2StringEmptyArray() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/d2StringEmptyArray.java");
        }
        
        @TestMetadata("d3StringEmptyArray.java")
        public void testD3StringEmptyArray() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/d3StringEmptyArray.java");
        }
        
        @TestMetadata("longArray.java")
        public void testLongArray() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/longArray.java");
        }
        
        @TestMetadata("methodArrayArgs.java")
        public void testMethodArrayArgs() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/methodArrayArgs.java");
        }
        
        @TestMetadata("newIntArray.java")
        public void testNewIntArray() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/newIntArray.java");
        }
        
        @TestMetadata("newStringArray.java")
        public void testNewStringArray() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/newStringArray.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/assertStatement")
    public static class AssertStatement extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInAssertStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/assertStatement"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("onlyCondition.java")
        public void testOnlyCondition() throws Exception {
            doTest("j2k/tests/testData/ast/assertStatement/onlyCondition.java");
        }
        
        @TestMetadata("onlyConditionWithBraces.java")
        public void testOnlyConditionWithBraces() throws Exception {
            doTest("j2k/tests/testData/ast/assertStatement/onlyConditionWithBraces.java");
        }
        
        @TestMetadata("withStringDetail.java")
        public void testWithStringDetail() throws Exception {
            doTest("j2k/tests/testData/ast/assertStatement/withStringDetail.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/assignmentExpression")
    public static class AssignmentExpression extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInAssignmentExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/assignmentExpression"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("and.java")
        public void testAnd() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/and.java");
        }
        
        @TestMetadata("assignment.java")
        public void testAssignment() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/assignment.java");
        }
        
        @TestMetadata("divideAssign.java")
        public void testDivideAssign() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/divideAssign.java");
        }
        
        @TestMetadata("minusAssign.java")
        public void testMinusAssign() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/minusAssign.java");
        }
        
        @TestMetadata("multiplyAssign.java")
        public void testMultiplyAssign() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/multiplyAssign.java");
        }
        
        @TestMetadata("nullability.java")
        public void testNullability() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/nullability.java");
        }
        
        @TestMetadata("or.java")
        public void testOr() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/or.java");
        }
        
        @TestMetadata("plusAssign.java")
        public void testPlusAssign() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/plusAssign.java");
        }
        
        @TestMetadata("reminder.java")
        public void testReminder() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/reminder.java");
        }
        
        @TestMetadata("shiftLeft.java")
        public void testShiftLeft() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/shiftLeft.java");
        }
        
        @TestMetadata("shiftRight.java")
        public void testShiftRight() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/shiftRight.java");
        }
        
        @TestMetadata("simpleAssignment.java")
        public void testSimpleAssignment() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/simpleAssignment.java");
        }
        
        @TestMetadata("unsignedRightShift.java")
        public void testUnsignedRightShift() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/unsignedRightShift.java");
        }
        
        @TestMetadata("xor.java")
        public void testXor() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/xor.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/binaryExpression")
    public static class BinaryExpression extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInBinaryExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/binaryExpression"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("and.java")
        public void testAnd() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/and.java");
        }
        
        @TestMetadata("conditionalAnd.java")
        public void testConditionalAnd() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/conditionalAnd.java");
        }
        
        @TestMetadata("conditionalOr.java")
        public void testConditionalOr() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/conditionalOr.java");
        }
        
        @TestMetadata("divide.java")
        public void testDivide() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/divide.java");
        }
        
        @TestMetadata("greaterThan.java")
        public void testGreaterThan() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/greaterThan.java");
        }
        
        @TestMetadata("greaterThanEqual.java")
        public void testGreaterThanEqual() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/greaterThanEqual.java");
        }
        
        @TestMetadata("lessThan.java")
        public void testLessThan() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/lessThan.java");
        }
        
        @TestMetadata("lessThanEqual.java")
        public void testLessThanEqual() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/lessThanEqual.java");
        }
        
        @TestMetadata("minus.java")
        public void testMinus() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/minus.java");
        }
        
        @TestMetadata("multiply.java")
        public void testMultiply() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/multiply.java");
        }
        
        @TestMetadata("or.java")
        public void testOr() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/or.java");
        }
        
        @TestMetadata("plus.java")
        public void testPlus() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/plus.java");
        }
        
        @TestMetadata("remainder.java")
        public void testRemainder() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/remainder.java");
        }
        
        @TestMetadata("shiftLeft.java")
        public void testShiftLeft() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/shiftLeft.java");
        }
        
        @TestMetadata("shiftRight.java")
        public void testShiftRight() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/shiftRight.java");
        }
        
        @TestMetadata("unsignedRightShift.java")
        public void testUnsignedRightShift() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/unsignedRightShift.java");
        }
        
        @TestMetadata("xor.java")
        public void testXor() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/xor.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/boxedType")
    public static class BoxedType extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInBoxedType() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/boxedType"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("boolean.java")
        public void testBoolean() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/boolean.java");
        }
        
        @TestMetadata("Boxing.java")
        public void testBoxing() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/Boxing.java");
        }
        
        @TestMetadata("byte.java")
        public void testByte() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/byte.java");
        }
        
        @TestMetadata("character.java")
        public void testCharacter() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/character.java");
        }
        
        @TestMetadata("double.java")
        public void testDouble() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/double.java");
        }
        
        @TestMetadata("float.java")
        public void testFloat() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/float.java");
        }
        
        @TestMetadata("integer.java")
        public void testInteger() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/integer.java");
        }
        
        @TestMetadata("kt-671.java")
        public void testKt_671() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/kt-671.java");
        }
        
        @TestMetadata("long.java")
        public void testLong() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/long.java");
        }
        
        @TestMetadata("object.java")
        public void testObject() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/object.java");
        }
        
        @TestMetadata("short.java")
        public void testShort() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/short.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/breakStatement")
    public static class BreakStatement extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInBreakStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/breakStatement"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("breakWithLabel.java")
        public void testBreakWithLabel() throws Exception {
            doTest("j2k/tests/testData/ast/breakStatement/breakWithLabel.java");
        }
        
        @TestMetadata("breakWithoutLabel.java")
        public void testBreakWithoutLabel() throws Exception {
            doTest("j2k/tests/testData/ast/breakStatement/breakWithoutLabel.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/callChainExpression")
    public static class CallChainExpression extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInCallChainExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/callChainExpression"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("libraryFieldCall.java")
        public void testLibraryFieldCall() throws Exception {
            doTest("j2k/tests/testData/ast/callChainExpression/libraryFieldCall.java");
        }
        
        @TestMetadata("libraryMethodCall.java")
        public void testLibraryMethodCall() throws Exception {
            doTest("j2k/tests/testData/ast/callChainExpression/libraryMethodCall.java");
        }
        
        @TestMetadata("libraryMethodCallFromInstance.java")
        public void testLibraryMethodCallFromInstance() throws Exception {
            doTest("j2k/tests/testData/ast/callChainExpression/libraryMethodCallFromInstance.java");
        }
        
        @TestMetadata("libraryStringFieldCall.java")
        public void testLibraryStringFieldCall() throws Exception {
            doTest("j2k/tests/testData/ast/callChainExpression/libraryStringFieldCall.java");
        }
        
        @TestMetadata("sout.java")
        public void testSout() throws Exception {
            doTest("j2k/tests/testData/ast/callChainExpression/sout.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/class")
    public static class Class extends AbstractJavaToKotlinConverterBasicTest {
        @TestMetadata("abstractClass.java")
        public void testAbstractClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/abstractClass.java");
        }
        
        @TestMetadata("abstractClassShape.java")
        public void testAbstractClassShape() throws Exception {
            doTest("j2k/tests/testData/ast/class/abstractClassShape.java");
        }
        
        public void testAllFilesPresentInClass() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/class"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("class.java")
        public void testClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/class.java");
        }
        
        @TestMetadata("ClassShadowing.java")
        public void testClassShadowing() throws Exception {
            doTest("j2k/tests/testData/ast/class/ClassShadowing.java");
        }
        
        @TestMetadata("classWithEmptyMethods.java")
        public void testClassWithEmptyMethods() throws Exception {
            doTest("j2k/tests/testData/ast/class/classWithEmptyMethods.java");
        }
        
        @TestMetadata("classWithFields.java")
        public void testClassWithFields() throws Exception {
            doTest("j2k/tests/testData/ast/class/classWithFields.java");
        }
        
        @TestMetadata("classWithMultiplyFields.java")
        public void testClassWithMultiplyFields() throws Exception {
            doTest("j2k/tests/testData/ast/class/classWithMultiplyFields.java");
        }
        
        @TestMetadata("emptyClass.java")
        public void testEmptyClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/emptyClass.java");
        }
        
        @TestMetadata("extendsOneClassAndImplementsOneInterface.java")
        public void testExtendsOneClassAndImplementsOneInterface() throws Exception {
            doTest("j2k/tests/testData/ast/class/extendsOneClassAndImplementsOneInterface.java");
        }
        
        @TestMetadata("extendsOneClassAndImplementsSeveralInterfaces.java")
        public void testExtendsOneClassAndImplementsSeveralInterfaces() throws Exception {
            doTest("j2k/tests/testData/ast/class/extendsOneClassAndImplementsSeveralInterfaces.java");
        }
        
        @TestMetadata("finalClass.java")
        public void testFinalClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/finalClass.java");
        }
        
        @TestMetadata("genericClass.java")
        public void testGenericClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/genericClass.java");
        }
        
        @TestMetadata("innerEmptyClass.java")
        public void testInnerEmptyClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/innerEmptyClass.java");
        }
        
        @TestMetadata("innerStaticClass.java")
        public void testInnerStaticClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/innerStaticClass.java");
        }
        
        @TestMetadata("internalClass.java")
        public void testInternalClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/internalClass.java");
        }
        
        @TestMetadata("kt-639.java")
        public void testKt_639() throws Exception {
            doTest("j2k/tests/testData/ast/class/kt-639.java");
        }
        
        @TestMetadata("oneStaticFieldOneNonStatic.java")
        public void testOneStaticFieldOneNonStatic() throws Exception {
            doTest("j2k/tests/testData/ast/class/oneStaticFieldOneNonStatic.java");
        }
        
        @TestMetadata("oneStaticMethod.java")
        public void testOneStaticMethod() throws Exception {
            doTest("j2k/tests/testData/ast/class/oneStaticMethod.java");
        }
        
        @TestMetadata("oneStaticMethodOneNonStatic.java")
        public void testOneStaticMethodOneNonStatic() throws Exception {
            doTest("j2k/tests/testData/ast/class/oneStaticMethodOneNonStatic.java");
        }
        
        @TestMetadata("pivateClass.java")
        public void testPivateClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/pivateClass.java");
        }
        
        @TestMetadata("privateInit.java")
        public void testPrivateInit() throws Exception {
            doTest("j2k/tests/testData/ast/class/privateInit.java");
        }
        
        @TestMetadata("protectedClass.java")
        public void testProtectedClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/protectedClass.java");
        }
        
        @TestMetadata("publicClass.java")
        public void testPublicClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/publicClass.java");
        }
        
        @TestMetadata("simpleInheritance.java")
        public void testSimpleInheritance() throws Exception {
            doTest("j2k/tests/testData/ast/class/simpleInheritance.java");
        }
        
        @TestMetadata("twoStaticMethod.java")
        public void testTwoStaticMethod() throws Exception {
            doTest("j2k/tests/testData/ast/class/twoStaticMethod.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/classExpression")
    public static class ClassExpression extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInClassExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/classExpression"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("complexExample.java")
        public void testComplexExample() throws Exception {
            doTest("j2k/tests/testData/ast/classExpression/complexExample.java");
        }
        
        @TestMetadata("objectClass.java")
        public void testObjectClass() throws Exception {
            doTest("j2k/tests/testData/ast/classExpression/objectClass.java");
        }
        
        @TestMetadata("stringClass.java")
        public void testStringClass() throws Exception {
            doTest("j2k/tests/testData/ast/classExpression/stringClass.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/conditionalExpression")
    public static class ConditionalExpression extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInConditionalExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/conditionalExpression"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("simpleConditionalExpression.java")
        public void testSimpleConditionalExpression() throws Exception {
            doTest("j2k/tests/testData/ast/conditionalExpression/simpleConditionalExpression.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/constructors")
    public static class Constructors extends AbstractJavaToKotlinConverterBasicTest {
        @TestMetadata("allCallsPrimary.java")
        public void testAllCallsPrimary() throws Exception {
            doTest("j2k/tests/testData/ast/constructors/allCallsPrimary.java");
        }
        
        @TestMetadata("allCallsPrimary2.java")
        public void testAllCallsPrimary2() throws Exception {
            doTest("j2k/tests/testData/ast/constructors/allCallsPrimary2.java");
        }
        
        public void testAllFilesPresentInConstructors() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/constructors"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("customerBuilder.java")
        public void testCustomerBuilder() throws Exception {
            doTest("j2k/tests/testData/ast/constructors/customerBuilder.java");
        }
        
        @TestMetadata("genericIdentifier.java")
        public void testGenericIdentifier() throws Exception {
            doTest("j2k/tests/testData/ast/constructors/genericIdentifier.java");
        }
        
        @TestMetadata("identifier.java")
        public void testIdentifier() throws Exception {
            doTest("j2k/tests/testData/ast/constructors/identifier.java");
        }
        
        @TestMetadata("withManyDefaultParams.java")
        public void testWithManyDefaultParams() throws Exception {
            doTest("j2k/tests/testData/ast/constructors/withManyDefaultParams.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/continueStatement")
    public static class ContinueStatement extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInContinueStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/continueStatement"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("continueWithLabel.java")
        public void testContinueWithLabel() throws Exception {
            doTest("j2k/tests/testData/ast/continueStatement/continueWithLabel.java");
        }
        
        @TestMetadata("continueWithoutLabel.java")
        public void testContinueWithoutLabel() throws Exception {
            doTest("j2k/tests/testData/ast/continueStatement/continueWithoutLabel.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/declarationStatement")
    public static class DeclarationStatement extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInDeclarationStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/declarationStatement"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("multiplyFinalIntDeclaration.java")
        public void testMultiplyFinalIntDeclaration() throws Exception {
            doTest("j2k/tests/testData/ast/declarationStatement/multiplyFinalIntDeclaration.java");
        }
        
        @TestMetadata("multiplyIntDeclaration.java")
        public void testMultiplyIntDeclaration() throws Exception {
            doTest("j2k/tests/testData/ast/declarationStatement/multiplyIntDeclaration.java");
        }
        
        @TestMetadata("singleFinalIntDeclaration.java")
        public void testSingleFinalIntDeclaration() throws Exception {
            doTest("j2k/tests/testData/ast/declarationStatement/singleFinalIntDeclaration.java");
        }
        
        @TestMetadata("singleFinalStringDeclaration.java")
        public void testSingleFinalStringDeclaration() throws Exception {
            doTest("j2k/tests/testData/ast/declarationStatement/singleFinalStringDeclaration.java");
        }
        
        @TestMetadata("singleIntDeclaration.java")
        public void testSingleIntDeclaration() throws Exception {
            doTest("j2k/tests/testData/ast/declarationStatement/singleIntDeclaration.java");
        }
        
        @TestMetadata("singleStringDeclaration.java")
        public void testSingleStringDeclaration() throws Exception {
            doTest("j2k/tests/testData/ast/declarationStatement/singleStringDeclaration.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/doWhileStatement")
    public static class DoWhileStatement extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInDoWhileStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/doWhileStatement"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("whileWithBlock.java")
        public void testWhileWithBlock() throws Exception {
            doTest("j2k/tests/testData/ast/doWhileStatement/whileWithBlock.java");
        }
        
        @TestMetadata("whileWithEmptyBlock.java")
        public void testWhileWithEmptyBlock() throws Exception {
            doTest("j2k/tests/testData/ast/doWhileStatement/whileWithEmptyBlock.java");
        }
        
        @TestMetadata("whileWithExpression.java")
        public void testWhileWithExpression() throws Exception {
            doTest("j2k/tests/testData/ast/doWhileStatement/whileWithExpression.java");
        }
        
        @TestMetadata("whileWithReturn.java")
        public void testWhileWithReturn() throws Exception {
            doTest("j2k/tests/testData/ast/doWhileStatement/whileWithReturn.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/enum")
    public static class Enum extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInEnum() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/enum"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("colorEnum.java")
        public void testColorEnum() throws Exception {
            doTest("j2k/tests/testData/ast/enum/colorEnum.java");
        }
        
        @TestMetadata("emptyEnum.java")
        public void testEmptyEnum() throws Exception {
            doTest("j2k/tests/testData/ast/enum/emptyEnum.java");
        }
        
        @TestMetadata("enumConstantIsNotNull.java")
        public void testEnumConstantIsNotNull() throws Exception {
            doTest("j2k/tests/testData/ast/enum/enumConstantIsNotNull.java");
        }
        
        @TestMetadata("enumImplementsOneInterface.java")
        public void testEnumImplementsOneInterface() throws Exception {
            doTest("j2k/tests/testData/ast/enum/enumImplementsOneInterface.java");
        }
        
        @TestMetadata("enumImplementsSeveralInterfaces.java")
        public void testEnumImplementsSeveralInterfaces() throws Exception {
            doTest("j2k/tests/testData/ast/enum/enumImplementsSeveralInterfaces.java");
        }
        
        @TestMetadata("enumWithNameField.java")
        public void testEnumWithNameField() throws Exception {
            doTest("j2k/tests/testData/ast/enum/enumWithNameField.java");
        }
        
        @TestMetadata("fieldsWithPrimaryPrivateConstructor.java")
        public void testFieldsWithPrimaryPrivateConstructor() throws Exception {
            doTest("j2k/tests/testData/ast/enum/fieldsWithPrimaryPrivateConstructor.java");
        }
        
        @TestMetadata("internalEnum.java")
        public void testInternalEnum() throws Exception {
            doTest("j2k/tests/testData/ast/enum/internalEnum.java");
        }
        
        @TestMetadata("overrideToString.java")
        public void testOverrideToString() throws Exception {
            doTest("j2k/tests/testData/ast/enum/overrideToString.java");
        }
        
        @TestMetadata("primaryPrivateConstructor.java")
        public void testPrimaryPrivateConstructor() throws Exception {
            doTest("j2k/tests/testData/ast/enum/primaryPrivateConstructor.java");
        }
        
        @TestMetadata("privateEnum.java")
        public void testPrivateEnum() throws Exception {
            doTest("j2k/tests/testData/ast/enum/privateEnum.java");
        }
        
        @TestMetadata("protectedEnum.java")
        public void testProtectedEnum() throws Exception {
            doTest("j2k/tests/testData/ast/enum/protectedEnum.java");
        }
        
        @TestMetadata("publicEnum.java")
        public void testPublicEnum() throws Exception {
            doTest("j2k/tests/testData/ast/enum/publicEnum.java");
        }
        
        @TestMetadata("runnableImplementation.java")
        public void testRunnableImplementation() throws Exception {
            doTest("j2k/tests/testData/ast/enum/runnableImplementation.java");
        }
        
        @TestMetadata("typeSafeEnum.java")
        public void testTypeSafeEnum() throws Exception {
            doTest("j2k/tests/testData/ast/enum/typeSafeEnum.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/field")
    public static class Field extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInField() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/field"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("classChildExtendsBase.java")
        public void testClassChildExtendsBase() throws Exception {
            doTest("j2k/tests/testData/ast/field/classChildExtendsBase.java");
        }
        
        @TestMetadata("internalField.java")
        public void testInternalField() throws Exception {
            doTest("j2k/tests/testData/ast/field/internalField.java");
        }
        
        @TestMetadata("privateField.java")
        public void testPrivateField() throws Exception {
            doTest("j2k/tests/testData/ast/field/privateField.java");
        }
        
        @TestMetadata("protectedField.java")
        public void testProtectedField() throws Exception {
            doTest("j2k/tests/testData/ast/field/protectedField.java");
        }
        
        @TestMetadata("publicField.java")
        public void testPublicField() throws Exception {
            doTest("j2k/tests/testData/ast/field/publicField.java");
        }
        
        @TestMetadata("valWithInit.java")
        public void testValWithInit() throws Exception {
            doTest("j2k/tests/testData/ast/field/valWithInit.java");
        }
        
        @TestMetadata("varWithInit.java")
        public void testVarWithInit() throws Exception {
            doTest("j2k/tests/testData/ast/field/varWithInit.java");
        }
        
        @TestMetadata("varWithoutInit.java")
        public void testVarWithoutInit() throws Exception {
            doTest("j2k/tests/testData/ast/field/varWithoutInit.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/for")
    public static class For extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInFor() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/for"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("commonCaseForTest.java")
        public void testCommonCaseForTest() throws Exception {
            doTest("j2k/tests/testData/ast/for/commonCaseForTest.java");
        }
        
        @TestMetadata("forRangeWithLE.java")
        public void testForRangeWithLE() throws Exception {
            doTest("j2k/tests/testData/ast/for/forRangeWithLE.java");
        }
        
        @TestMetadata("forRangeWithLT.java")
        public void testForRangeWithLT() throws Exception {
            doTest("j2k/tests/testData/ast/for/forRangeWithLT.java");
        }
        
        @TestMetadata("forWithBlock.java")
        public void testForWithBlock() throws Exception {
            doTest("j2k/tests/testData/ast/for/forWithBlock.java");
        }
        
        @TestMetadata("forWithBlockAndDoubleUpdate.java")
        public void testForWithBlockAndDoubleUpdate() throws Exception {
            doTest("j2k/tests/testData/ast/for/forWithBlockAndDoubleUpdate.java");
        }
        
        @TestMetadata("forWithEmptyBlock.java")
        public void testForWithEmptyBlock() throws Exception {
            doTest("j2k/tests/testData/ast/for/forWithEmptyBlock.java");
        }
        
        @TestMetadata("forWithExpression.java")
        public void testForWithExpression() throws Exception {
            doTest("j2k/tests/testData/ast/for/forWithExpression.java");
        }
        
        @TestMetadata("forWithNullCondition.java")
        public void testForWithNullCondition() throws Exception {
            doTest("j2k/tests/testData/ast/for/forWithNullCondition.java");
        }
        
        @TestMetadata("forWithNullInit.java")
        public void testForWithNullInit() throws Exception {
            doTest("j2k/tests/testData/ast/for/forWithNullInit.java");
        }
        
        @TestMetadata("forWithNullUpdate.java")
        public void testForWithNullUpdate() throws Exception {
            doTest("j2k/tests/testData/ast/for/forWithNullUpdate.java");
        }
        
        @TestMetadata("forWithReturn.java")
        public void testForWithReturn() throws Exception {
            doTest("j2k/tests/testData/ast/for/forWithReturn.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/foreachStatement")
    public static class ForeachStatement extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInForeachStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/foreachStatement"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("enhancedForWithBlock.java")
        public void testEnhancedForWithBlock() throws Exception {
            doTest("j2k/tests/testData/ast/foreachStatement/enhancedForWithBlock.java");
        }
        
        @TestMetadata("enhancedForWithEmptyBlock.java")
        public void testEnhancedForWithEmptyBlock() throws Exception {
            doTest("j2k/tests/testData/ast/foreachStatement/enhancedForWithEmptyBlock.java");
        }
        
        @TestMetadata("enhancedForWithExpression.java")
        public void testEnhancedForWithExpression() throws Exception {
            doTest("j2k/tests/testData/ast/foreachStatement/enhancedForWithExpression.java");
        }
        
        @TestMetadata("enhancedForWithReturn.java")
        public void testEnhancedForWithReturn() throws Exception {
            doTest("j2k/tests/testData/ast/foreachStatement/enhancedForWithReturn.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/formatting")
    public static class Formatting extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInFormatting() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/formatting"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("nonStaticMembers.java")
        public void testNonStaticMembers() throws Exception {
            doTest("j2k/tests/testData/ast/formatting/nonStaticMembers.java");
        }
        
        @TestMetadata("nonStaticMembersWithComments.java")
        public void testNonStaticMembersWithComments() throws Exception {
            doTest("j2k/tests/testData/ast/formatting/nonStaticMembersWithComments.java");
        }
        
        @TestMetadata("staticAndNonStaticMembersWithComments.java")
        public void testStaticAndNonStaticMembersWithComments() throws Exception {
            doTest("j2k/tests/testData/ast/formatting/staticAndNonStaticMembersWithComments.java");
        }
        
        @TestMetadata("staticMembersWithComments.java")
        public void testStaticMembersWithComments() throws Exception {
            doTest("j2k/tests/testData/ast/formatting/staticMembersWithComments.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/function")
    public static class Function extends AbstractJavaToKotlinConverterBasicTest {
        @TestMetadata("abstractMethod.java")
        public void testAbstractMethod() throws Exception {
            doTest("j2k/tests/testData/ast/function/abstractMethod.java");
        }
        
        public void testAllFilesPresentInFunction() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/function"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("classGenericParam.java")
        public void testClassGenericParam() throws Exception {
            doTest("j2k/tests/testData/ast/function/classGenericParam.java");
        }
        
        @TestMetadata("emptyVoidMethod.java")
        public void testEmptyVoidMethod() throws Exception {
            doTest("j2k/tests/testData/ast/function/emptyVoidMethod.java");
        }
        
        @TestMetadata("extendsBaseWhichExtendsObject.java")
        public void testExtendsBaseWhichExtendsObject() throws Exception {
            doTest("j2k/tests/testData/ast/function/extendsBaseWhichExtendsObject.java");
        }
        
        @TestMetadata("final.java")
        public void testFinal() throws Exception {
            doTest("j2k/tests/testData/ast/function/final.java");
        }
        
        @TestMetadata("functionInFinalClass.java")
        public void testFunctionInFinalClass() throws Exception {
            doTest("j2k/tests/testData/ast/function/functionInFinalClass.java");
        }
        
        @TestMetadata("internal.java")
        public void testInternal() throws Exception {
            doTest("j2k/tests/testData/ast/function/internal.java");
        }
        
        @TestMetadata("main.java")
        public void testMain() throws Exception {
            doTest("j2k/tests/testData/ast/function/main.java");
        }
        
        @TestMetadata("methodClassType.java")
        public void testMethodClassType() throws Exception {
            doTest("j2k/tests/testData/ast/function/methodClassType.java");
        }
        
        @TestMetadata("methodPrimitiveType.java")
        public void testMethodPrimitiveType() throws Exception {
            doTest("j2k/tests/testData/ast/function/methodPrimitiveType.java");
        }
        
        @TestMetadata("methodPrimitiveType2.java")
        public void testMethodPrimitiveType2() throws Exception {
            doTest("j2k/tests/testData/ast/function/methodPrimitiveType2.java");
        }
        
        @TestMetadata("methodWithReturnStatement.java")
        public void testMethodWithReturnStatement() throws Exception {
            doTest("j2k/tests/testData/ast/function/methodWithReturnStatement.java");
        }
        
        @TestMetadata("open.java")
        public void testOpen() throws Exception {
            doTest("j2k/tests/testData/ast/function/open.java");
        }
        
        @TestMetadata("override.java")
        public void testOverride() throws Exception {
            doTest("j2k/tests/testData/ast/function/override.java");
        }
        
        @TestMetadata("overrideAndOpen.java")
        public void testOverrideAndOpen() throws Exception {
            doTest("j2k/tests/testData/ast/function/overrideAndOpen.java");
        }
        
        @TestMetadata("overrideObject.java")
        public void testOverrideObject() throws Exception {
            doTest("j2k/tests/testData/ast/function/overrideObject.java");
        }
        
        @TestMetadata("ownGenericParam.java")
        public void testOwnGenericParam() throws Exception {
            doTest("j2k/tests/testData/ast/function/ownGenericParam.java");
        }
        
        @TestMetadata("ownSeveralGenericParams.java")
        public void testOwnSeveralGenericParams() throws Exception {
            doTest("j2k/tests/testData/ast/function/ownSeveralGenericParams.java");
        }
        
        @TestMetadata("private.java")
        public void testPrivate() throws Exception {
            doTest("j2k/tests/testData/ast/function/private.java");
        }
        
        @TestMetadata("protected.java")
        public void testProtected() throws Exception {
            doTest("j2k/tests/testData/ast/function/protected.java");
        }
        
        @TestMetadata("public.java")
        public void testPublic() throws Exception {
            doTest("j2k/tests/testData/ast/function/public.java");
        }
        
        @TestMetadata("varVararg.java")
        public void testVarVararg() throws Exception {
            doTest("j2k/tests/testData/ast/function/varVararg.java");
        }
        
        @TestMetadata("writableParameter.java")
        public void testWritableParameter() throws Exception {
            doTest("j2k/tests/testData/ast/function/writableParameter.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/identifier")
    public static class Identifier extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInIdentifier() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/identifier"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("finalFieldReference.java")
        public void testFinalFieldReference() throws Exception {
            doTest("j2k/tests/testData/ast/identifier/finalFieldReference.java");
        }
        
        @TestMetadata("keywords.java")
        public void testKeywords() throws Exception {
            doTest("j2k/tests/testData/ast/identifier/keywords.java");
        }
        
        @TestMetadata("withDollar.java")
        public void testWithDollar() throws Exception {
            doTest("j2k/tests/testData/ast/identifier/withDollar.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/ifStatement")
    public static class IfStatement extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInIfStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/ifStatement"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("ifStatementWithEmptyBlocks.java")
        public void testIfStatementWithEmptyBlocks() throws Exception {
            doTest("j2k/tests/testData/ast/ifStatement/ifStatementWithEmptyBlocks.java");
        }
        
        @TestMetadata("ifStatementWithMultilineBlocks.java")
        public void testIfStatementWithMultilineBlocks() throws Exception {
            doTest("j2k/tests/testData/ast/ifStatement/ifStatementWithMultilineBlocks.java");
        }
        
        @TestMetadata("ifStatementWithOneLineBlocks.java")
        public void testIfStatementWithOneLineBlocks() throws Exception {
            doTest("j2k/tests/testData/ast/ifStatement/ifStatementWithOneLineBlocks.java");
        }
        
        @TestMetadata("ifStatementWithoutElse.java")
        public void testIfStatementWithoutElse() throws Exception {
            doTest("j2k/tests/testData/ast/ifStatement/ifStatementWithoutElse.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/importStatement")
    public static class ImportStatement extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInImportStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/importStatement"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("importWithKeywords.java")
        public void testImportWithKeywords() throws Exception {
            doTest("j2k/tests/testData/ast/importStatement/importWithKeywords.java");
        }
        
        @TestMetadata("importWithStar.java")
        public void testImportWithStar() throws Exception {
            doTest("j2k/tests/testData/ast/importStatement/importWithStar.java");
        }
        
        @TestMetadata("oneImport.java")
        public void testOneImport() throws Exception {
            doTest("j2k/tests/testData/ast/importStatement/oneImport.java");
        }
        
        @TestMetadata("onlyImports.java")
        public void testOnlyImports() throws Exception {
            doTest("j2k/tests/testData/ast/importStatement/onlyImports.java");
        }
        
        @TestMetadata("simpleImport.java")
        public void testSimpleImport() throws Exception {
            doTest("j2k/tests/testData/ast/importStatement/simpleImport.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/inProjectionType")
    public static class InProjectionType extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInInProjectionType() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/inProjectionType"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("methodParams.java")
        public void testMethodParams() throws Exception {
            doTest("j2k/tests/testData/ast/inProjectionType/methodParams.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/inheritance")
    public static class Inheritance extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInInheritance() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/inheritance"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("classOneExtendsBaseGeneric.java")
        public void testClassOneExtendsBaseGeneric() throws Exception {
            doTest("j2k/tests/testData/ast/inheritance/classOneExtendsBaseGeneric.java");
        }
        
        @TestMetadata("classOneExtendsBaseWithOneParam.java")
        public void testClassOneExtendsBaseWithOneParam() throws Exception {
            doTest("j2k/tests/testData/ast/inheritance/classOneExtendsBaseWithOneParam.java");
        }
        
        @TestMetadata("classOneExtendsBaseWithZeroParams.java")
        public void testClassOneExtendsBaseWithZeroParams() throws Exception {
            doTest("j2k/tests/testData/ast/inheritance/classOneExtendsBaseWithZeroParams.java");
        }
        
        @TestMetadata("classOneExtendsBaseWithZeroParamsNonEmptyConstructor.java")
        public void testClassOneExtendsBaseWithZeroParamsNonEmptyConstructor() throws Exception {
            doTest("j2k/tests/testData/ast/inheritance/classOneExtendsBaseWithZeroParamsNonEmptyConstructor.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/isOperator")
    public static class IsOperator extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInIsOperator() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/isOperator"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("complicatedExpression.java")
        public void testComplicatedExpression() throws Exception {
            doTest("j2k/tests/testData/ast/isOperator/complicatedExpression.java");
        }
        
        @TestMetadata("simpleReference.java")
        public void testSimpleReference() throws Exception {
            doTest("j2k/tests/testData/ast/isOperator/simpleReference.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/issues")
    public static class Issues extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInIssues() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/issues"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("arrayLength.java")
        public void testArrayLength() throws Exception {
            doTest("j2k/tests/testData/ast/issues/arrayLength.java");
        }
        
        @TestMetadata("comments.java")
        public void testComments() throws Exception {
            doTest("j2k/tests/testData/ast/issues/comments.java");
        }
        
        @TestMetadata("kt-1016.java")
        public void testKt_1016() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-1016.java");
        }
        
        @TestMetadata("kt-1048.java")
        public void testKt_1048() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-1048.java");
        }
        
        @TestMetadata("kt-1074.java")
        public void testKt_1074() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-1074.java");
        }
        
        @TestMetadata("kt-543.java")
        public void testKt_543() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-543.java");
        }
        
        @TestMetadata("kt-543-boxed.java")
        public void testKt_543_boxed() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-543-boxed.java");
        }
        
        @TestMetadata("kt-543-mixed.java")
        public void testKt_543_mixed() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-543-mixed.java");
        }
        
        @TestMetadata("kt-638.java")
        public void testKt_638() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-638.java");
        }
        
        @TestMetadata("kt-696.java")
        public void testKt_696() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-696.java");
        }
        
        @TestMetadata("kt-792.java")
        public void testKt_792() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-792.java");
        }
        
        @TestMetadata("kt-792-mixed.java")
        public void testKt_792_mixed() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-792-mixed.java");
        }
        
        @TestMetadata("kt-794.java")
        public void testKt_794() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-794.java");
        }
        
        @TestMetadata("kt-794-mixed.java")
        public void testKt_794_mixed() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-794-mixed.java");
        }
        
        @TestMetadata("kt-809.java")
        public void testKt_809() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-809.java");
        }
        
        @TestMetadata("kt-809-string.java")
        public void testKt_809_string() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-809-string.java");
        }
        
        @TestMetadata("kt-820.java")
        public void testKt_820() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-820.java");
        }
        
        @TestMetadata("kt-820-field.java")
        public void testKt_820_field() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-820-field.java");
        }
        
        @TestMetadata("kt-820-string.java")
        public void testKt_820_string() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-820-string.java");
        }
        
        @TestMetadata("kt-824.java")
        public void testKt_824() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-824.java");
        }
        
        @TestMetadata("kt-824-isDir.java")
        public void testKt_824_isDir() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-824-isDir.java");
        }
        
        @TestMetadata("kt-828.java")
        public void testKt_828() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-828.java");
        }
        
        @TestMetadata("kt-836.java")
        public void testKt_836() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-836.java");
        }
        
        @TestMetadata("kt-837.java")
        public void testKt_837() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-837.java");
        }
        
        @TestMetadata("kt-852.java")
        public void testKt_852() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-852.java");
        }
        
        @TestMetadata("kt-871.java")
        public void testKt_871() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-871.java");
        }
        
        @TestMetadata("kt-879.java")
        public void testKt_879() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-879.java");
        }
        
        @TestMetadata("kt-893.java")
        public void testKt_893() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-893.java");
        }
        
        @TestMetadata("kt-963.java")
        public void testKt_963() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-963.java");
        }
        
        @TestMetadata("qualifyStatic.java")
        public void testQualifyStatic() throws Exception {
            doTest("j2k/tests/testData/ast/issues/qualifyStatic.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/kotlinExclusion")
    public static class KotlinExclusion extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInKotlinExclusion() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/kotlinExclusion"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("kt-656.java")
        public void testKt_656() throws Exception {
            doTest("j2k/tests/testData/ast/kotlinExclusion/kt-656.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/labelStatement")
    public static class LabelStatement extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInLabelStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/labelStatement"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("complicatedExampleFromJavaTutorial.java")
        public void testComplicatedExampleFromJavaTutorial() throws Exception {
            doTest("j2k/tests/testData/ast/labelStatement/complicatedExampleFromJavaTutorial.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/list")
    public static class List extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInList() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/list"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("ForEach.java")
        public void testForEach() throws Exception {
            doTest("j2k/tests/testData/ast/list/ForEach.java");
        }
        
        @TestMetadata("Lists.java")
        public void testLists() throws Exception {
            doTest("j2k/tests/testData/ast/list/Lists.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/literalExpression")
    public static class LiteralExpression extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInLiteralExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/literalExpression"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("char.java")
        public void testChar() throws Exception {
            doTest("j2k/tests/testData/ast/literalExpression/char.java");
        }
        
        @TestMetadata("dollarInsideString.java")
        public void testDollarInsideString() throws Exception {
            doTest("j2k/tests/testData/ast/literalExpression/dollarInsideString.java");
        }
        
        @TestMetadata("endsWithDFL.java")
        public void testEndsWithDFL() throws Exception {
            doTest("j2k/tests/testData/ast/literalExpression/endsWithDFL.java");
        }
        
        @TestMetadata("hex.java")
        public void testHex() throws Exception {
            doTest("j2k/tests/testData/ast/literalExpression/hex.java");
        }
        
        @TestMetadata("octal.java")
        public void testOctal() throws Exception {
            doTest("j2k/tests/testData/ast/literalExpression/octal.java");
        }
        
        @TestMetadata("trueOrFalse.java")
        public void testTrueOrFalse() throws Exception {
            doTest("j2k/tests/testData/ast/literalExpression/trueOrFalse.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/localVariable")
    public static class LocalVariable extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInLocalVariable() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/localVariable"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("object.java")
        public void testObject() throws Exception {
            doTest("j2k/tests/testData/ast/localVariable/object.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/methodCallExpression")
    public static class MethodCallExpression extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInMethodCallExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/methodCallExpression"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("callWithKeywords.java")
        public void testCallWithKeywords() throws Exception {
            doTest("j2k/tests/testData/ast/methodCallExpression/callWithKeywords.java");
        }
        
        @TestMetadata("emptyCall.java")
        public void testEmptyCall() throws Exception {
            doTest("j2k/tests/testData/ast/methodCallExpression/emptyCall.java");
        }
        
        @TestMetadata("genericMethod.java")
        public void testGenericMethod() throws Exception {
            doTest("j2k/tests/testData/ast/methodCallExpression/genericMethod.java");
        }
        
        @TestMetadata("simpleCall.java")
        public void testSimpleCall() throws Exception {
            doTest("j2k/tests/testData/ast/methodCallExpression/simpleCall.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/misc")
    public static class Misc extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInMisc() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/misc"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("packageWithClass.java")
        public void testPackageWithClass() throws Exception {
            doTest("j2k/tests/testData/ast/misc/packageWithClass.java");
        }
        
        @TestMetadata("packageWithClasses.java")
        public void testPackageWithClasses() throws Exception {
            doTest("j2k/tests/testData/ast/misc/packageWithClasses.java");
        }
        
        @TestMetadata("packageWithImports.java")
        public void testPackageWithImports() throws Exception {
            doTest("j2k/tests/testData/ast/misc/packageWithImports.java");
        }
        
        @TestMetadata("packageWithMixedImports.java")
        public void testPackageWithMixedImports() throws Exception {
            doTest("j2k/tests/testData/ast/misc/packageWithMixedImports.java");
        }
        
        @TestMetadata("packageWithOpenClass.java")
        public void testPackageWithOpenClass() throws Exception {
            doTest("j2k/tests/testData/ast/misc/packageWithOpenClass.java");
        }
        
        @TestMetadata("packageWithStaticImports.java")
        public void testPackageWithStaticImports() throws Exception {
            doTest("j2k/tests/testData/ast/misc/packageWithStaticImports.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/newClassExpression")
    public static class NewClassExpression extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInNewClassExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/newClassExpression"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("classWithParam.java")
        public void testClassWithParam() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/classWithParam.java");
        }
        
        @TestMetadata("classWithParams.java")
        public void testClassWithParams() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/classWithParams.java");
        }
        
        @TestMetadata("classWithoutBody.java")
        public void testClassWithoutBody() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/classWithoutBody.java");
        }
        
        @TestMetadata("fullQualifiedName.java")
        public void testFullQualifiedName() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/fullQualifiedName.java");
        }
        
        @TestMetadata("fullQualifiedName2.java")
        public void testFullQualifiedName2() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/fullQualifiedName2.java");
        }
        
        @TestMetadata("genericClassInvocation.java")
        public void testGenericClassInvocation() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/genericClassInvocation.java");
        }
        
        @TestMetadata("newClassByFullName.java")
        public void testNewClassByFullName() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/newClassByFullName.java");
        }
        
        @TestMetadata("newClassWithAnonymousScope.java")
        public void testNewClassWithAnonymousScope() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/newClassWithAnonymousScope.java");
        }
        
        @TestMetadata("newInnerClass.java")
        public void testNewInnerClass() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/newInnerClass.java");
        }
        
        @TestMetadata("newListAndNewMember.java")
        public void testNewListAndNewMember() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/newListAndNewMember.java");
        }
        
        @TestMetadata("newStaticInnerClass.java")
        public void testNewStaticInnerClass() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/newStaticInnerClass.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/objectLiteral")
    public static class ObjectLiteral extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInObjectLiteral() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/objectLiteral"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("MyFrame.java")
        public void testMyFrame() throws Exception {
            doTest("j2k/tests/testData/ast/objectLiteral/MyFrame.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/outProjectionType")
    public static class OutProjectionType extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInOutProjectionType() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/outProjectionType"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("methodParams.java")
        public void testMethodParams() throws Exception {
            doTest("j2k/tests/testData/ast/outProjectionType/methodParams.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/packageStatement")
    public static class PackageStatement extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInPackageStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/packageStatement"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("orgJetbrainsJetJ2kIn.java")
        public void testOrgJetbrainsJetJ2kIn() throws Exception {
            doTest("j2k/tests/testData/ast/packageStatement/orgJetbrainsJetJ2kIn.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/parenthesizedExpression")
    public static class ParenthesizedExpression extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInParenthesizedExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/parenthesizedExpression"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("parenthesized.java")
        public void testParenthesized() throws Exception {
            doTest("j2k/tests/testData/ast/parenthesizedExpression/parenthesized.java");
        }
        
        @TestMetadata("parenthesized2.java")
        public void testParenthesized2() throws Exception {
            doTest("j2k/tests/testData/ast/parenthesizedExpression/parenthesized2.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/polyadicExpression")
    public static class PolyadicExpression extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInPolyadicExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/polyadicExpression"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("divide.java")
        public void testDivide() throws Exception {
            doTest("j2k/tests/testData/ast/polyadicExpression/divide.java");
        }
        
        @TestMetadata("minus.java")
        public void testMinus() throws Exception {
            doTest("j2k/tests/testData/ast/polyadicExpression/minus.java");
        }
        
        @TestMetadata("multiply.java")
        public void testMultiply() throws Exception {
            doTest("j2k/tests/testData/ast/polyadicExpression/multiply.java");
        }
        
        @TestMetadata("plus.java")
        public void testPlus() throws Exception {
            doTest("j2k/tests/testData/ast/polyadicExpression/plus.java");
        }
        
        @TestMetadata("remainder.java")
        public void testRemainder() throws Exception {
            doTest("j2k/tests/testData/ast/polyadicExpression/remainder.java");
        }
        
        @TestMetadata("unassignedShiftRight.java")
        public void testUnassignedShiftRight() throws Exception {
            doTest("j2k/tests/testData/ast/polyadicExpression/unassignedShiftRight.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/postfixOperator")
    public static class PostfixOperator extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInPostfixOperator() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/postfixOperator"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("decrement.java")
        public void testDecrement() throws Exception {
            doTest("j2k/tests/testData/ast/postfixOperator/decrement.java");
        }
        
        @TestMetadata("increment.java")
        public void testIncrement() throws Exception {
            doTest("j2k/tests/testData/ast/postfixOperator/increment.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/prefixOperator")
    public static class PrefixOperator extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInPrefixOperator() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/prefixOperator"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("decrement.java")
        public void testDecrement() throws Exception {
            doTest("j2k/tests/testData/ast/prefixOperator/decrement.java");
        }
        
        @TestMetadata("excl.java")
        public void testExcl() throws Exception {
            doTest("j2k/tests/testData/ast/prefixOperator/excl.java");
        }
        
        @TestMetadata("increment.java")
        public void testIncrement() throws Exception {
            doTest("j2k/tests/testData/ast/prefixOperator/increment.java");
        }
        
        @TestMetadata("kt-667.java")
        public void testKt_667() throws Exception {
            doTest("j2k/tests/testData/ast/prefixOperator/kt-667.java");
        }
        
        @TestMetadata("nullableIf.java")
        public void testNullableIf() throws Exception {
            doTest("j2k/tests/testData/ast/prefixOperator/nullableIf.java");
        }
        
        @TestMetadata("tilde.java")
        public void testTilde() throws Exception {
            doTest("j2k/tests/testData/ast/prefixOperator/tilde.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/rawGenerics")
    public static class RawGenerics extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInRawGenerics() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/rawGenerics"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("kt-540.java")
        public void testKt_540() throws Exception {
            doTest("j2k/tests/testData/ast/rawGenerics/kt-540.java");
        }
        
        @TestMetadata("kt-540-map.java")
        public void testKt_540_map() throws Exception {
            doTest("j2k/tests/testData/ast/rawGenerics/kt-540-map.java");
        }
        
        @TestMetadata("kt-540-rawGenericClass.java")
        public void testKt_540_rawGenericClass() throws Exception {
            doTest("j2k/tests/testData/ast/rawGenerics/kt-540-rawGenericClass.java");
        }
        
        @TestMetadata("rawGenericMethod.java")
        public void testRawGenericMethod() throws Exception {
            doTest("j2k/tests/testData/ast/rawGenerics/rawGenericMethod.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/returnStatement")
    public static class ReturnStatement extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInReturnStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/returnStatement"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("returnChar.java")
        public void testReturnChar() throws Exception {
            doTest("j2k/tests/testData/ast/returnStatement/returnChar.java");
        }
        
        @TestMetadata("returnLiteral.java")
        public void testReturnLiteral() throws Exception {
            doTest("j2k/tests/testData/ast/returnStatement/returnLiteral.java");
        }
        
        @TestMetadata("returnNumber.java")
        public void testReturnNumber() throws Exception {
            doTest("j2k/tests/testData/ast/returnStatement/returnNumber.java");
        }
        
        @TestMetadata("returnString.java")
        public void testReturnString() throws Exception {
            doTest("j2k/tests/testData/ast/returnStatement/returnString.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/starProjectionType")
    public static class StarProjectionType extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInStarProjectionType() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/starProjectionType"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("methodParams.java")
        public void testMethodParams() throws Exception {
            doTest("j2k/tests/testData/ast/starProjectionType/methodParams.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/superExpression")
    public static class SuperExpression extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInSuperExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/superExpression"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("classAdotSuperFoo.java")
        public void testClassAdotSuperFoo() throws Exception {
            doTest("j2k/tests/testData/ast/superExpression/classAdotSuperFoo.java");
        }
        
        @TestMetadata("classAextendsB.java")
        public void testClassAextendsB() throws Exception {
            doTest("j2k/tests/testData/ast/superExpression/classAextendsB.java");
        }
        
        @TestMetadata("superStatement.java")
        public void testSuperStatement() throws Exception {
            doTest("j2k/tests/testData/ast/superExpression/superStatement.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/switch")
    public static class Switch extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInSwitch() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/switch"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("comlicatedFallDown.java")
        public void testComlicatedFallDown() throws Exception {
            doTest("j2k/tests/testData/ast/switch/comlicatedFallDown.java");
        }
        
        @TestMetadata("emptySwitch.java")
        public void testEmptySwitch() throws Exception {
            doTest("j2k/tests/testData/ast/switch/emptySwitch.java");
        }
        
        @TestMetadata("fallDown.java")
        public void testFallDown() throws Exception {
            doTest("j2k/tests/testData/ast/switch/fallDown.java");
        }
        
        @TestMetadata("kt-539.java")
        public void testKt_539() throws Exception {
            doTest("j2k/tests/testData/ast/switch/kt-539.java");
        }
        
        @TestMetadata("nondefault.java")
        public void testNondefault() throws Exception {
            doTest("j2k/tests/testData/ast/switch/nondefault.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/synchronizedStatement")
    public static class SynchronizedStatement extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInSynchronizedStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/synchronizedStatement"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("singleLineExample.java")
        public void testSingleLineExample() throws Exception {
            doTest("j2k/tests/testData/ast/synchronizedStatement/singleLineExample.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/thisExpression")
    public static class ThisExpression extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInThisExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/thisExpression"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("classAdotThisFoo.java")
        public void testClassAdotThisFoo() throws Exception {
            doTest("j2k/tests/testData/ast/thisExpression/classAdotThisFoo.java");
        }
        
        @TestMetadata("thisStatement.java")
        public void testThisStatement() throws Exception {
            doTest("j2k/tests/testData/ast/thisExpression/thisStatement.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/throwStatement")
    public static class ThrowStatement extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInThrowStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/throwStatement"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("simpleThrowStatement.java")
        public void testSimpleThrowStatement() throws Exception {
            doTest("j2k/tests/testData/ast/throwStatement/simpleThrowStatement.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/trait")
    public static class Trait extends AbstractJavaToKotlinConverterBasicTest {
        @TestMetadata("abstactInterface.java")
        public void testAbstactInterface() throws Exception {
            doTest("j2k/tests/testData/ast/trait/abstactInterface.java");
        }
        
        public void testAllFilesPresentInTrait() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/trait"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("emptyInterface.java")
        public void testEmptyInterface() throws Exception {
            doTest("j2k/tests/testData/ast/trait/emptyInterface.java");
        }
        
        @TestMetadata("extendsOneClassAndImplementsSeveralInterfaces.java")
        public void testExtendsOneClassAndImplementsSeveralInterfaces() throws Exception {
            doTest("j2k/tests/testData/ast/trait/extendsOneClassAndImplementsSeveralInterfaces.java");
        }
        
        @TestMetadata("extendsOneInterface.java")
        public void testExtendsOneInterface() throws Exception {
            doTest("j2k/tests/testData/ast/trait/extendsOneInterface.java");
        }
        
        @TestMetadata("interfaceWithFields.java")
        public void testInterfaceWithFields() throws Exception {
            doTest("j2k/tests/testData/ast/trait/interfaceWithFields.java");
        }
        
        @TestMetadata("interfaceWithMethodDeclaration.java")
        public void testInterfaceWithMethodDeclaration() throws Exception {
            doTest("j2k/tests/testData/ast/trait/interfaceWithMethodDeclaration.java");
        }
        
        @TestMetadata("interfaceWithStaticFields.java")
        public void testInterfaceWithStaticFields() throws Exception {
            doTest("j2k/tests/testData/ast/trait/interfaceWithStaticFields.java");
        }
        
        @TestMetadata("internalInterface.java")
        public void testInternalInterface() throws Exception {
            doTest("j2k/tests/testData/ast/trait/internalInterface.java");
        }
        
        @TestMetadata("privateInterface.java")
        public void testPrivateInterface() throws Exception {
            doTest("j2k/tests/testData/ast/trait/privateInterface.java");
        }
        
        @TestMetadata("protectedInterface.java")
        public void testProtectedInterface() throws Exception {
            doTest("j2k/tests/testData/ast/trait/protectedInterface.java");
        }
        
        @TestMetadata("publicInterface.java")
        public void testPublicInterface() throws Exception {
            doTest("j2k/tests/testData/ast/trait/publicInterface.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/tryStatement")
    public static class TryStatement extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInTryStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/tryStatement"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("commonCaseForTryStatement.java")
        public void testCommonCaseForTryStatement() throws Exception {
            doTest("j2k/tests/testData/ast/tryStatement/commonCaseForTryStatement.java");
        }
        
        @TestMetadata("emptyTryWithTwoCatchesWithEmptyFinally.java")
        public void testEmptyTryWithTwoCatchesWithEmptyFinally() throws Exception {
            doTest("j2k/tests/testData/ast/tryStatement/emptyTryWithTwoCatchesWithEmptyFinally.java");
        }
        
        @TestMetadata("emptyTryWithTwoCatchesWithFinally.java")
        public void testEmptyTryWithTwoCatchesWithFinally() throws Exception {
            doTest("j2k/tests/testData/ast/tryStatement/emptyTryWithTwoCatchesWithFinally.java");
        }
        
        @TestMetadata("emptyTryWithTwoCatchesWithoutFinally.java")
        public void testEmptyTryWithTwoCatchesWithoutFinally() throws Exception {
            doTest("j2k/tests/testData/ast/tryStatement/emptyTryWithTwoCatchesWithoutFinally.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/typeCastExpression")
    public static class TypeCastExpression extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInTypeCastExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/typeCastExpression"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("extendsWildcardCast.java")
        public void testExtendsWildcardCast() throws Exception {
            doTest("j2k/tests/testData/ast/typeCastExpression/extendsWildcardCast.java");
        }
        
        @TestMetadata("fooCast.java")
        public void testFooCast() throws Exception {
            doTest("j2k/tests/testData/ast/typeCastExpression/fooCast.java");
        }
        
        @TestMetadata("intCast.java")
        public void testIntCast() throws Exception {
            doTest("j2k/tests/testData/ast/typeCastExpression/intCast.java");
        }
        
        @TestMetadata("primitiveType.java")
        public void testPrimitiveType() throws Exception {
            doTest("j2k/tests/testData/ast/typeCastExpression/primitiveType.java");
        }
        
        @TestMetadata("simpleGenericCast.java")
        public void testSimpleGenericCast() throws Exception {
            doTest("j2k/tests/testData/ast/typeCastExpression/simpleGenericCast.java");
        }
        
        @TestMetadata("stringCast.java")
        public void testStringCast() throws Exception {
            doTest("j2k/tests/testData/ast/typeCastExpression/stringCast.java");
        }
        
        @TestMetadata("superWildcardCast.java")
        public void testSuperWildcardCast() throws Exception {
            doTest("j2k/tests/testData/ast/typeCastExpression/superWildcardCast.java");
        }
        
        @TestMetadata("wildcardCast.java")
        public void testWildcardCast() throws Exception {
            doTest("j2k/tests/testData/ast/typeCastExpression/wildcardCast.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/typeParameters")
    public static class TypeParameters extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInTypeParameters() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/typeParameters"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("classDoubleParametrizationWithTwoBoundsWithExtending.java")
        public void testClassDoubleParametrizationWithTwoBoundsWithExtending() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/classDoubleParametrizationWithTwoBoundsWithExtending.java");
        }
        
        @TestMetadata("classParametrizationWithTwoBounds.java")
        public void testClassParametrizationWithTwoBounds() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/classParametrizationWithTwoBounds.java");
        }
        
        @TestMetadata("classParametrizationWithTwoBoundsWithExtending.java")
        public void testClassParametrizationWithTwoBoundsWithExtending() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/classParametrizationWithTwoBoundsWithExtending.java");
        }
        
        @TestMetadata("complexExampleWithClassExtending.java")
        public void testComplexExampleWithClassExtending() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/complexExampleWithClassExtending.java");
        }
        
        @TestMetadata("complexExampleWithClassMultiplyExtending.java")
        public void testComplexExampleWithClassMultiplyExtending() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/complexExampleWithClassMultiplyExtending.java");
        }
        
        @TestMetadata("genericClass.java")
        public void testGenericClass() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/genericClass.java");
        }
        
        @TestMetadata("genericParam.java")
        public void testGenericParam() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/genericParam.java");
        }
        
        @TestMetadata("manyGenericParams.java")
        public void testManyGenericParams() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/manyGenericParams.java");
        }
        
        @TestMetadata("methodDoubleParametrizationWithTwoBounds.java")
        public void testMethodDoubleParametrizationWithTwoBounds() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/methodDoubleParametrizationWithTwoBounds.java");
        }
        
        @TestMetadata("traitDoubleParametrizationWithTwoBoundsWithExtending.java")
        public void testTraitDoubleParametrizationWithTwoBoundsWithExtending() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/traitDoubleParametrizationWithTwoBoundsWithExtending.java");
        }
        
        @TestMetadata("where.java")
        public void testWhere() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/where.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/varArg")
    public static class VarArg extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInVarArg() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/varArg"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("ellipsisTypeSeveralParams.java")
        public void testEllipsisTypeSeveralParams() throws Exception {
            doTest("j2k/tests/testData/ast/varArg/ellipsisTypeSeveralParams.java");
        }
        
        @TestMetadata("ellipsisTypeSingleParams.java")
        public void testEllipsisTypeSingleParams() throws Exception {
            doTest("j2k/tests/testData/ast/varArg/ellipsisTypeSingleParams.java");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/whileStatement")
    public static class WhileStatement extends AbstractJavaToKotlinConverterBasicTest {
        public void testAllFilesPresentInWhileStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("j2k/tests/testData/ast/whileStatement"), Pattern.compile("^(.+)\\.java$"), true);
        }
        
        @TestMetadata("whileWithBlock.java")
        public void testWhileWithBlock() throws Exception {
            doTest("j2k/tests/testData/ast/whileStatement/whileWithBlock.java");
        }
        
        @TestMetadata("whileWithEmptyBlock.java")
        public void testWhileWithEmptyBlock() throws Exception {
            doTest("j2k/tests/testData/ast/whileStatement/whileWithEmptyBlock.java");
        }
        
        @TestMetadata("whileWithExpression.java")
        public void testWhileWithExpression() throws Exception {
            doTest("j2k/tests/testData/ast/whileStatement/whileWithExpression.java");
        }
        
        @TestMetadata("whileWithReturn.java")
        public void testWhileWithReturn() throws Exception {
            doTest("j2k/tests/testData/ast/whileStatement/whileWithReturn.java");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("JavaToKotlinConverterBasicTestGenerated");
        suite.addTestSuite(JavaToKotlinConverterBasicTestGenerated.class);
        suite.addTestSuite(Annotations.class);
        suite.addTestSuite(AnonymousBlock.class);
        suite.addTestSuite(ArrayAccessExpression.class);
        suite.addTestSuite(ArrayInitializerExpression.class);
        suite.addTestSuite(ArrayType.class);
        suite.addTestSuite(AssertStatement.class);
        suite.addTestSuite(AssignmentExpression.class);
        suite.addTestSuite(BinaryExpression.class);
        suite.addTestSuite(BoxedType.class);
        suite.addTestSuite(BreakStatement.class);
        suite.addTestSuite(CallChainExpression.class);
        suite.addTestSuite(Class.class);
        suite.addTestSuite(ClassExpression.class);
        suite.addTestSuite(ConditionalExpression.class);
        suite.addTestSuite(Constructors.class);
        suite.addTestSuite(ContinueStatement.class);
        suite.addTestSuite(DeclarationStatement.class);
        suite.addTestSuite(DoWhileStatement.class);
        suite.addTestSuite(Enum.class);
        suite.addTestSuite(Field.class);
        suite.addTestSuite(For.class);
        suite.addTestSuite(ForeachStatement.class);
        suite.addTestSuite(Formatting.class);
        suite.addTestSuite(Function.class);
        suite.addTestSuite(Identifier.class);
        suite.addTestSuite(IfStatement.class);
        suite.addTestSuite(ImportStatement.class);
        suite.addTestSuite(InProjectionType.class);
        suite.addTestSuite(Inheritance.class);
        suite.addTestSuite(IsOperator.class);
        suite.addTestSuite(Issues.class);
        suite.addTestSuite(KotlinExclusion.class);
        suite.addTestSuite(LabelStatement.class);
        suite.addTestSuite(List.class);
        suite.addTestSuite(LiteralExpression.class);
        suite.addTestSuite(LocalVariable.class);
        suite.addTestSuite(MethodCallExpression.class);
        suite.addTestSuite(Misc.class);
        suite.addTestSuite(NewClassExpression.class);
        suite.addTestSuite(ObjectLiteral.class);
        suite.addTestSuite(OutProjectionType.class);
        suite.addTestSuite(PackageStatement.class);
        suite.addTestSuite(ParenthesizedExpression.class);
        suite.addTestSuite(PolyadicExpression.class);
        suite.addTestSuite(PostfixOperator.class);
        suite.addTestSuite(PrefixOperator.class);
        suite.addTestSuite(RawGenerics.class);
        suite.addTestSuite(ReturnStatement.class);
        suite.addTestSuite(StarProjectionType.class);
        suite.addTestSuite(SuperExpression.class);
        suite.addTestSuite(Switch.class);
        suite.addTestSuite(SynchronizedStatement.class);
        suite.addTestSuite(ThisExpression.class);
        suite.addTestSuite(ThrowStatement.class);
        suite.addTestSuite(Trait.class);
        suite.addTestSuite(TryStatement.class);
        suite.addTestSuite(TypeCastExpression.class);
        suite.addTestSuite(TypeParameters.class);
        suite.addTestSuite(VarArg.class);
        suite.addTestSuite(WhileStatement.class);
        return suite;
    }
}

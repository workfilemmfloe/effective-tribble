/*
 * Copyright 2010-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.di;

import org.jetbrains.jet.lang.resolve.DescriptorResolver;
import org.jetbrains.jet.lang.types.expressions.ExpressionTypingServices;
import org.jetbrains.jet.lang.resolve.TypeResolver;
import org.jetbrains.jet.lang.resolve.calls.CallResolver;
import org.jetbrains.jet.lang.types.lang.KotlinBuiltIns;
import com.intellij.openapi.project.Project;
import org.jetbrains.jet.lang.resolve.ModuleSourcesManager;
import org.jetbrains.jet.lang.resolve.AnnotationResolver;
import org.jetbrains.jet.lang.resolve.calls.CallExpressionResolver;
import org.jetbrains.jet.lang.resolve.QualifiedExpressionResolver;
import org.jetbrains.jet.lang.resolve.calls.ArgumentTypeResolver;
import org.jetbrains.jet.lang.resolve.calls.CandidateResolver;
import org.jetbrains.annotations.NotNull;
import javax.annotation.PreDestroy;

/* This file is generated by org.jetbrains.jet.generators.injectors.GenerateInjectors. DO NOT EDIT! */
public class InjectorForTests {
    
    private DescriptorResolver descriptorResolver;
    private ExpressionTypingServices expressionTypingServices;
    private TypeResolver typeResolver;
    private CallResolver callResolver;
    private KotlinBuiltIns kotlinBuiltIns;
    private final Project project;
    private final ModuleSourcesManager moduleSourcesManager;
    private AnnotationResolver annotationResolver;
    private CallExpressionResolver callExpressionResolver;
    private QualifiedExpressionResolver qualifiedExpressionResolver;
    private ArgumentTypeResolver argumentTypeResolver;
    private CandidateResolver candidateResolver;
    
    public InjectorForTests(
        @NotNull Project project,
        @NotNull ModuleSourcesManager moduleSourcesManager
    ) {
        this.descriptorResolver = new DescriptorResolver();
        this.expressionTypingServices = new ExpressionTypingServices();
        this.typeResolver = new TypeResolver();
        this.callResolver = new CallResolver();
        this.kotlinBuiltIns = KotlinBuiltIns.getInstance();
        this.project = project;
        this.moduleSourcesManager = moduleSourcesManager;
        this.annotationResolver = new AnnotationResolver();
        this.callExpressionResolver = new CallExpressionResolver();
        this.qualifiedExpressionResolver = new QualifiedExpressionResolver();
        this.argumentTypeResolver = new ArgumentTypeResolver();
        this.candidateResolver = new CandidateResolver();

        this.descriptorResolver.setAnnotationResolver(annotationResolver);
        this.descriptorResolver.setExpressionTypingServices(expressionTypingServices);
        this.descriptorResolver.setTypeResolver(typeResolver);

        this.expressionTypingServices.setCallExpressionResolver(callExpressionResolver);
        this.expressionTypingServices.setCallResolver(callResolver);
        this.expressionTypingServices.setDescriptorResolver(descriptorResolver);
        this.expressionTypingServices.setModuleSourcesManager(moduleSourcesManager);
        this.expressionTypingServices.setProject(project);
        this.expressionTypingServices.setTypeResolver(typeResolver);

        this.typeResolver.setAnnotationResolver(annotationResolver);
        this.typeResolver.setDescriptorResolver(descriptorResolver);
        this.typeResolver.setModuleSourcesManager(moduleSourcesManager);
        this.typeResolver.setQualifiedExpressionResolver(qualifiedExpressionResolver);

        this.callResolver.setArgumentTypeResolver(argumentTypeResolver);
        this.callResolver.setCandidateResolver(candidateResolver);
        this.callResolver.setExpressionTypingServices(expressionTypingServices);
        this.callResolver.setTypeResolver(typeResolver);

        annotationResolver.setCallResolver(callResolver);
        annotationResolver.setExpressionTypingServices(expressionTypingServices);

        callExpressionResolver.setExpressionTypingServices(expressionTypingServices);

        argumentTypeResolver.setExpressionTypingServices(expressionTypingServices);
        argumentTypeResolver.setTypeResolver(typeResolver);

        candidateResolver.setArgumentTypeResolver(argumentTypeResolver);

    }
    
    @PreDestroy
    public void destroy() {
    }
    
    public DescriptorResolver getDescriptorResolver() {
        return this.descriptorResolver;
    }
    
    public ExpressionTypingServices getExpressionTypingServices() {
        return this.expressionTypingServices;
    }
    
    public TypeResolver getTypeResolver() {
        return this.typeResolver;
    }
    
    public CallResolver getCallResolver() {
        return this.callResolver;
    }
    
    public KotlinBuiltIns getKotlinBuiltIns() {
        return this.kotlinBuiltIns;
    }
    
    public Project getProject() {
        return this.project;
    }
    
}

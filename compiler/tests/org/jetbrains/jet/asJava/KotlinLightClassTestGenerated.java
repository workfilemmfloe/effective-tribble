/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.asJava;

import junit.framework.Test;
import junit.framework.TestSuite;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/asJava/lightClasses")
@InnerTestClasses({KotlinLightClassTestGenerated.Delegation.class, KotlinLightClassTestGenerated.NullabilityAnnotations.class})
public class KotlinLightClassTestGenerated extends AbstractKotlinLightClassTest {
    public void testAllFilesPresentInLightClasses() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/asJava/lightClasses"), Pattern.compile("^(.+)\\.kt$"), true);
    }
    
    @TestMetadata("compiler/testData/asJava/lightClasses/delegation")
    public static class Delegation extends AbstractKotlinLightClassTest {
        public void testAllFilesPresentInDelegation() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/asJava/lightClasses/delegation"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("Function.kt")
        public void testFunction() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/delegation/Function.kt");
        }
        
        @TestMetadata("Property.kt")
        public void testProperty() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/delegation/Property.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/asJava/lightClasses/nullabilityAnnotations")
    public static class NullabilityAnnotations extends AbstractKotlinLightClassTest {
        public void testAllFilesPresentInNullabilityAnnotations() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/asJava/lightClasses/nullabilityAnnotations"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("Class.kt")
        public void testClass() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/nullabilityAnnotations/Class.kt");
        }
        
        @TestMetadata("ClassObjectField.kt")
        public void testClassObjectField() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/nullabilityAnnotations/ClassObjectField.kt");
        }
        
        @TestMetadata("ClassWithConstructor.kt")
        public void testClassWithConstructor() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/nullabilityAnnotations/ClassWithConstructor.kt");
        }
        
        @TestMetadata("ClassWithConstructorAndProperties.kt")
        public void testClassWithConstructorAndProperties() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/nullabilityAnnotations/ClassWithConstructorAndProperties.kt");
        }
        
        @TestMetadata("Generic.kt")
        public void testGeneric() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/nullabilityAnnotations/Generic.kt");
        }
        
        @TestMetadata("IntOverridesAny.kt")
        public void testIntOverridesAny() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/nullabilityAnnotations/IntOverridesAny.kt");
        }
        
        @TestMetadata("NullableUnitReturn.kt")
        public void testNullableUnitReturn() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/nullabilityAnnotations/NullableUnitReturn.kt");
        }
        
        @TestMetadata("OverrideAnyWithUnit.kt")
        public void testOverrideAnyWithUnit() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/nullabilityAnnotations/OverrideAnyWithUnit.kt");
        }
        
        @TestMetadata("Primitives.kt")
        public void testPrimitives() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/nullabilityAnnotations/Primitives.kt");
        }
        
        @TestMetadata("PrivateInClass.kt")
        public void testPrivateInClass() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/nullabilityAnnotations/PrivateInClass.kt");
        }
        
        @TestMetadata("PrivateInTrait.kt")
        public void testPrivateInTrait() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/nullabilityAnnotations/PrivateInTrait.kt");
        }
        
        @TestMetadata("Synthetic.kt")
        public void testSynthetic() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/nullabilityAnnotations/Synthetic.kt");
        }
        
        @TestMetadata("Trait.kt")
        public void testTrait() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/nullabilityAnnotations/Trait.kt");
        }
        
        @TestMetadata("TraitClassObjectField.kt")
        public void testTraitClassObjectField() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/nullabilityAnnotations/TraitClassObjectField.kt");
        }
        
        @TestMetadata("UnitAsGenericArgument.kt")
        public void testUnitAsGenericArgument() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/nullabilityAnnotations/UnitAsGenericArgument.kt");
        }
        
        @TestMetadata("UnitParameter.kt")
        public void testUnitParameter() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/nullabilityAnnotations/UnitParameter.kt");
        }
        
        @TestMetadata("VoidReturn.kt")
        public void testVoidReturn() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/nullabilityAnnotations/VoidReturn.kt");
        }
        
        @TestMetadata("_DefaultPackage.kt")
        public void test_DefaultPackage() throws Exception {
            doTest("compiler/testData/asJava/lightClasses/nullabilityAnnotations/_DefaultPackage.kt");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("KotlinLightClassTestGenerated");
        suite.addTestSuite(KotlinLightClassTestGenerated.class);
        suite.addTestSuite(Delegation.class);
        suite.addTestSuite(NullabilityAnnotations.class);
        return suite;
    }
}

/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.resolve.calls;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.resolve.calls.AbstractResolvedCallsTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/resolvedCalls")
@InnerTestClasses({ResolvedCallsTestGenerated.FunctionTypes.class, ResolvedCallsTestGenerated.Invoke.class, ResolvedCallsTestGenerated.RealExamples.class})
public class ResolvedCallsTestGenerated extends AbstractResolvedCallsTest {
    public void testAllFilesPresentInResolvedCalls() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/resolvedCalls"), Pattern.compile("^(.+)\\.kt$"), true);
    }
    
    @TestMetadata("explicitReceiverIsReceiverArgument.kt")
    public void testExplicitReceiverIsReceiverArgument() throws Exception {
        doTest("compiler/testData/resolvedCalls/explicitReceiverIsReceiverArgument.kt");
    }
    
    @TestMetadata("explicitReceiverIsThisObject.kt")
    public void testExplicitReceiverIsThisObject() throws Exception {
        doTest("compiler/testData/resolvedCalls/explicitReceiverIsThisObject.kt");
    }
    
    @TestMetadata("hasBothThisObjectAndReceiverArgument.kt")
    public void testHasBothThisObjectAndReceiverArgument() throws Exception {
        doTest("compiler/testData/resolvedCalls/hasBothThisObjectAndReceiverArgument.kt");
    }
    
    @TestMetadata("hasBothThisObjectAndReceiverArgumentWithoutExplicitReceiver.kt")
    public void testHasBothThisObjectAndReceiverArgumentWithoutExplicitReceiver() throws Exception {
        doTest("compiler/testData/resolvedCalls/hasBothThisObjectAndReceiverArgumentWithoutExplicitReceiver.kt");
    }
    
    @TestMetadata("implicitReceiverIsReceiverArgument.kt")
    public void testImplicitReceiverIsReceiverArgument() throws Exception {
        doTest("compiler/testData/resolvedCalls/implicitReceiverIsReceiverArgument.kt");
    }
    
    @TestMetadata("implicitReceiverIsThisObject.kt")
    public void testImplicitReceiverIsThisObject() throws Exception {
        doTest("compiler/testData/resolvedCalls/implicitReceiverIsThisObject.kt");
    }
    
    @TestMetadata("impliedThisNoExplicitReceiver.kt")
    public void testImpliedThisNoExplicitReceiver() throws Exception {
        doTest("compiler/testData/resolvedCalls/impliedThisNoExplicitReceiver.kt");
    }
    
    @TestMetadata("simpleCall.kt")
    public void testSimpleCall() throws Exception {
        doTest("compiler/testData/resolvedCalls/simpleCall.kt");
    }
    
    @TestMetadata("compiler/testData/resolvedCalls/functionTypes")
    public static class FunctionTypes extends AbstractResolvedCallsTest {
        public void testAllFilesPresentInFunctionTypes() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/resolvedCalls/functionTypes"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("invokeForExtensionFunctionType.kt")
        public void testInvokeForExtensionFunctionType() throws Exception {
            doTest("compiler/testData/resolvedCalls/functionTypes/invokeForExtensionFunctionType.kt");
        }
        
        @TestMetadata("invokeForFunctionType.kt")
        public void testInvokeForFunctionType() throws Exception {
            doTest("compiler/testData/resolvedCalls/functionTypes/invokeForFunctionType.kt");
        }
        
        @TestMetadata("valOfExtensionFunctionType.kt")
        public void testValOfExtensionFunctionType() throws Exception {
            doTest("compiler/testData/resolvedCalls/functionTypes/valOfExtensionFunctionType.kt");
        }
        
        @TestMetadata("valOfExtensionFunctionTypeInvoke.kt")
        public void testValOfExtensionFunctionTypeInvoke() throws Exception {
            doTest("compiler/testData/resolvedCalls/functionTypes/valOfExtensionFunctionTypeInvoke.kt");
        }
        
        @TestMetadata("valOfFunctionType.kt")
        public void testValOfFunctionType() throws Exception {
            doTest("compiler/testData/resolvedCalls/functionTypes/valOfFunctionType.kt");
        }
        
        @TestMetadata("valOfFunctionTypeInvoke.kt")
        public void testValOfFunctionTypeInvoke() throws Exception {
            doTest("compiler/testData/resolvedCalls/functionTypes/valOfFunctionTypeInvoke.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/resolvedCalls/invoke")
    public static class Invoke extends AbstractResolvedCallsTest {
        public void testAllFilesPresentInInvoke() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/resolvedCalls/invoke"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("bothReceivers.kt")
        public void testBothReceivers() throws Exception {
            doTest("compiler/testData/resolvedCalls/invoke/bothReceivers.kt");
        }
        
        @TestMetadata("implicitReceiverForInvoke.kt")
        public void testImplicitReceiverForInvoke() throws Exception {
            doTest("compiler/testData/resolvedCalls/invoke/implicitReceiverForInvoke.kt");
        }
        
        @TestMetadata("receiverArgumentAsReceiverForInvoke.kt")
        public void testReceiverArgumentAsReceiverForInvoke() throws Exception {
            doTest("compiler/testData/resolvedCalls/invoke/receiverArgumentAsReceiverForInvoke.kt");
        }
        
        @TestMetadata("thisObjectAsReceiverForInvoke.kt")
        public void testThisObjectAsReceiverForInvoke() throws Exception {
            doTest("compiler/testData/resolvedCalls/invoke/thisObjectAsReceiverForInvoke.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/resolvedCalls/realExamples")
    public static class RealExamples extends AbstractResolvedCallsTest {
        public void testAllFilesPresentInRealExamples() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/resolvedCalls/realExamples"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("stringPlusInBuilders.kt")
        public void testStringPlusInBuilders() throws Exception {
            doTest("compiler/testData/resolvedCalls/realExamples/stringPlusInBuilders.kt");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("ResolvedCallsTestGenerated");
        suite.addTestSuite(ResolvedCallsTestGenerated.class);
        suite.addTestSuite(FunctionTypes.class);
        suite.addTestSuite(Invoke.class);
        suite.addTestSuite(RealExamples.class);
        return suite;
    }
}

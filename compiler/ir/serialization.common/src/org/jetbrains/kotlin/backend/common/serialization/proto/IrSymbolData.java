// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData}
 */
public final class IrSymbolData extends
    org.jetbrains.kotlin.protobuf.GeneratedMessageLite implements
    // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData)
    IrSymbolDataOrBuilder {
  // Use IrSymbolData.newBuilder() to construct.
  private IrSymbolData(org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private IrSymbolData(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.ByteString.EMPTY;}

  private static final IrSymbolData defaultInstance;
  public static IrSymbolData getDefaultInstance() {
    return defaultInstance;
  }

  public IrSymbolData getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final org.jetbrains.kotlin.protobuf.ByteString unknownFields;
  private IrSymbolData(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    org.jetbrains.kotlin.protobuf.ByteString.Output unknownFieldsOutput =
        org.jetbrains.kotlin.protobuf.ByteString.newOutput();
    org.jetbrains.kotlin.protobuf.CodedOutputStream unknownFieldsCodedOutput =
        org.jetbrains.kotlin.protobuf.CodedOutputStream.newInstance(
            unknownFieldsOutput, 1);
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            int rawValue = input.readEnum();
            org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolKind value = org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolKind.valueOf(rawValue);
            if (value == null) {
              unknownFieldsCodedOutput.writeRawVarint32(tag);
              unknownFieldsCodedOutput.writeRawVarint32(rawValue);
            } else {
              bitField0_ |= 0x00000001;
              kind_ = value;
            }
            break;
          }
          case 32: {
            bitField0_ |= 0x00000002;
            uniqIdIndex_ = input.readInt64();
            break;
          }
          case 40: {
            bitField0_ |= 0x00000004;
            topLevelUniqIdIndex_ = input.readInt64();
            break;
          }
          case 48: {
            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
              fqName_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000008;
            }
            fqName_.add(input.readInt32());
            break;
          }
          case 50: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
              fqName_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000008;
            }
            while (input.getBytesUntilLimit() > 0) {
              fqName_.add(input.readInt32());
            }
            input.popLimit(limit);
            break;
          }
          case 58: {
            org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference.Builder subBuilder = null;
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
              subBuilder = descriptorReference_.toBuilder();
            }
            descriptorReference_ = input.readMessage(org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(descriptorReference_);
              descriptorReference_ = subBuilder.buildPartial();
            }
            bitField0_ |= 0x00000008;
            break;
          }
        }
      }
    } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
        fqName_ = java.util.Collections.unmodifiableList(fqName_);
      }
      try {
        unknownFieldsCodedOutput.flush();
      } catch (java.io.IOException e) {
      // Should not happen
      } finally {
        unknownFields = unknownFieldsOutput.toByteString();
      }
      makeExtensionsImmutable();
    }
  }
  public static org.jetbrains.kotlin.protobuf.Parser<IrSymbolData> PARSER =
      new org.jetbrains.kotlin.protobuf.AbstractParser<IrSymbolData>() {
    public IrSymbolData parsePartialFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return new IrSymbolData(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public org.jetbrains.kotlin.protobuf.Parser<IrSymbolData> getParserForType() {
    return PARSER;
  }

  private int bitField0_;
  public static final int KIND_FIELD_NUMBER = 1;
  private org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolKind kind_;
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolKind kind = 1;</code>
   */
  public boolean hasKind() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolKind kind = 1;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolKind getKind() {
    return kind_;
  }

  public static final int UNIQ_ID_INDEX_FIELD_NUMBER = 4;
  private long uniqIdIndex_;
  /**
   * <code>required int64 uniq_id_index = 4;</code>
   */
  public boolean hasUniqIdIndex() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>required int64 uniq_id_index = 4;</code>
   */
  public long getUniqIdIndex() {
    return uniqIdIndex_;
  }

  public static final int TOP_LEVEL_UNIQ_ID_INDEX_FIELD_NUMBER = 5;
  private long topLevelUniqIdIndex_;
  /**
   * <code>required int64 top_level_uniq_id_index = 5;</code>
   */
  public boolean hasTopLevelUniqIdIndex() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>required int64 top_level_uniq_id_index = 5;</code>
   */
  public long getTopLevelUniqIdIndex() {
    return topLevelUniqIdIndex_;
  }

  public static final int FQ_NAME_FIELD_NUMBER = 6;
  private java.util.List<java.lang.Integer> fqName_;
  /**
   * <code>repeated int32 fq_name = 6;</code>
   */
  public java.util.List<java.lang.Integer>
      getFqNameList() {
    return fqName_;
  }
  /**
   * <code>repeated int32 fq_name = 6;</code>
   */
  public int getFqNameCount() {
    return fqName_.size();
  }
  /**
   * <code>repeated int32 fq_name = 6;</code>
   */
  public int getFqName(int index) {
    return fqName_.get(index);
  }

  public static final int DESCRIPTOR_REFERENCE_FIELD_NUMBER = 7;
  private org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference descriptorReference_;
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference descriptor_reference = 7;</code>
   */
  public boolean hasDescriptorReference() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference descriptor_reference = 7;</code>
   */
  public org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference getDescriptorReference() {
    return descriptorReference_;
  }

  private void initFields() {
    kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolKind.FUNCTION_SYMBOL;
    uniqIdIndex_ = 0L;
    topLevelUniqIdIndex_ = 0L;
    fqName_ = java.util.Collections.emptyList();
    descriptorReference_ = org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference.getDefaultInstance();
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasKind()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasUniqIdIndex()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasTopLevelUniqIdIndex()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (hasDescriptorReference()) {
      if (!getDescriptorReference().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeEnum(1, kind_.getNumber());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeInt64(4, uniqIdIndex_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt64(5, topLevelUniqIdIndex_);
    }
    for (int i = 0; i < fqName_.size(); i++) {
      output.writeInt32(6, fqName_.get(i));
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeMessage(7, descriptorReference_);
    }
    output.writeRawBytes(unknownFields);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeEnumSize(1, kind_.getNumber());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt64Size(4, uniqIdIndex_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeInt64Size(5, topLevelUniqIdIndex_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < fqName_.size(); i++) {
        dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(fqName_.get(i));
      }
      size += dataSize;
      size += 1 * getFqNameList().size();
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += org.jetbrains.kotlin.protobuf.CodedOutputStream
        .computeMessageSize(7, descriptorReference_);
    }
    size += unknownFields.size();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData parseFrom(
      org.jetbrains.kotlin.protobuf.ByteString data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData parseFrom(byte[] data)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData parseFrom(
      byte[] data,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData parseFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData parseDelimitedFrom(
      java.io.InputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData parseFrom(
      org.jetbrains.kotlin.protobuf.CodedInputStream input,
      org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  /**
   * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData}
   */
  public static final class Builder extends
      org.jetbrains.kotlin.protobuf.GeneratedMessageLite.Builder<
        org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData, Builder>
      implements
      // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData)
      org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolDataOrBuilder {
    // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolKind.FUNCTION_SYMBOL;
      bitField0_ = (bitField0_ & ~0x00000001);
      uniqIdIndex_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000002);
      topLevelUniqIdIndex_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000004);
      fqName_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000008);
      descriptorReference_ = org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference.getDefaultInstance();
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData getDefaultInstanceForType() {
      return org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData.getDefaultInstance();
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData build() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData buildPartial() {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData result = new org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.kind_ = kind_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.uniqIdIndex_ = uniqIdIndex_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.topLevelUniqIdIndex_ = topLevelUniqIdIndex_;
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        fqName_ = java.util.Collections.unmodifiableList(fqName_);
        bitField0_ = (bitField0_ & ~0x00000008);
      }
      result.fqName_ = fqName_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000008;
      }
      result.descriptorReference_ = descriptorReference_;
      result.bitField0_ = to_bitField0_;
      return result;
    }

    public Builder mergeFrom(org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData other) {
      if (other == org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData.getDefaultInstance()) return this;
      if (other.hasKind()) {
        setKind(other.getKind());
      }
      if (other.hasUniqIdIndex()) {
        setUniqIdIndex(other.getUniqIdIndex());
      }
      if (other.hasTopLevelUniqIdIndex()) {
        setTopLevelUniqIdIndex(other.getTopLevelUniqIdIndex());
      }
      if (!other.fqName_.isEmpty()) {
        if (fqName_.isEmpty()) {
          fqName_ = other.fqName_;
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          ensureFqNameIsMutable();
          fqName_.addAll(other.fqName_);
        }
        
      }
      if (other.hasDescriptorReference()) {
        mergeDescriptorReference(other.getDescriptorReference());
      }
      setUnknownFields(
          getUnknownFields().concat(other.unknownFields));
      return this;
    }

    public final boolean isInitialized() {
      if (!hasKind()) {
        
        return false;
      }
      if (!hasUniqIdIndex()) {
        
        return false;
      }
      if (!hasTopLevelUniqIdIndex()) {
        
        return false;
      }
      if (hasDescriptorReference()) {
        if (!getDescriptorReference().isInitialized()) {
          
          return false;
        }
      }
      return true;
    }

    public Builder mergeFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolKind kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolKind.FUNCTION_SYMBOL;
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolKind kind = 1;</code>
     */
    public boolean hasKind() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolKind kind = 1;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolKind getKind() {
      return kind_;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolKind kind = 1;</code>
     */
    public Builder setKind(org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolKind value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      kind_ = value;
      
      return this;
    }
    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolKind kind = 1;</code>
     */
    public Builder clearKind() {
      bitField0_ = (bitField0_ & ~0x00000001);
      kind_ = org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolKind.FUNCTION_SYMBOL;
      
      return this;
    }

    private long uniqIdIndex_ ;
    /**
     * <code>required int64 uniq_id_index = 4;</code>
     */
    public boolean hasUniqIdIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int64 uniq_id_index = 4;</code>
     */
    public long getUniqIdIndex() {
      return uniqIdIndex_;
    }
    /**
     * <code>required int64 uniq_id_index = 4;</code>
     */
    public Builder setUniqIdIndex(long value) {
      bitField0_ |= 0x00000002;
      uniqIdIndex_ = value;
      
      return this;
    }
    /**
     * <code>required int64 uniq_id_index = 4;</code>
     */
    public Builder clearUniqIdIndex() {
      bitField0_ = (bitField0_ & ~0x00000002);
      uniqIdIndex_ = 0L;
      
      return this;
    }

    private long topLevelUniqIdIndex_ ;
    /**
     * <code>required int64 top_level_uniq_id_index = 5;</code>
     */
    public boolean hasTopLevelUniqIdIndex() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int64 top_level_uniq_id_index = 5;</code>
     */
    public long getTopLevelUniqIdIndex() {
      return topLevelUniqIdIndex_;
    }
    /**
     * <code>required int64 top_level_uniq_id_index = 5;</code>
     */
    public Builder setTopLevelUniqIdIndex(long value) {
      bitField0_ |= 0x00000004;
      topLevelUniqIdIndex_ = value;
      
      return this;
    }
    /**
     * <code>required int64 top_level_uniq_id_index = 5;</code>
     */
    public Builder clearTopLevelUniqIdIndex() {
      bitField0_ = (bitField0_ & ~0x00000004);
      topLevelUniqIdIndex_ = 0L;
      
      return this;
    }

    private java.util.List<java.lang.Integer> fqName_ = java.util.Collections.emptyList();
    private void ensureFqNameIsMutable() {
      if (!((bitField0_ & 0x00000008) == 0x00000008)) {
        fqName_ = new java.util.ArrayList<java.lang.Integer>(fqName_);
        bitField0_ |= 0x00000008;
       }
    }
    /**
     * <code>repeated int32 fq_name = 6;</code>
     */
    public java.util.List<java.lang.Integer>
        getFqNameList() {
      return java.util.Collections.unmodifiableList(fqName_);
    }
    /**
     * <code>repeated int32 fq_name = 6;</code>
     */
    public int getFqNameCount() {
      return fqName_.size();
    }
    /**
     * <code>repeated int32 fq_name = 6;</code>
     */
    public int getFqName(int index) {
      return fqName_.get(index);
    }
    /**
     * <code>repeated int32 fq_name = 6;</code>
     */
    public Builder setFqName(
        int index, int value) {
      ensureFqNameIsMutable();
      fqName_.set(index, value);
      
      return this;
    }
    /**
     * <code>repeated int32 fq_name = 6;</code>
     */
    public Builder addFqName(int value) {
      ensureFqNameIsMutable();
      fqName_.add(value);
      
      return this;
    }
    /**
     * <code>repeated int32 fq_name = 6;</code>
     */
    public Builder addAllFqName(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureFqNameIsMutable();
      org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
          values, fqName_);
      
      return this;
    }
    /**
     * <code>repeated int32 fq_name = 6;</code>
     */
    public Builder clearFqName() {
      fqName_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000008);
      
      return this;
    }

    private org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference descriptorReference_ = org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference.getDefaultInstance();
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference descriptor_reference = 7;</code>
     */
    public boolean hasDescriptorReference() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference descriptor_reference = 7;</code>
     */
    public org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference getDescriptorReference() {
      return descriptorReference_;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference descriptor_reference = 7;</code>
     */
    public Builder setDescriptorReference(org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference value) {
      if (value == null) {
        throw new NullPointerException();
      }
      descriptorReference_ = value;

      bitField0_ |= 0x00000010;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference descriptor_reference = 7;</code>
     */
    public Builder setDescriptorReference(
        org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference.Builder builderForValue) {
      descriptorReference_ = builderForValue.build();

      bitField0_ |= 0x00000010;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference descriptor_reference = 7;</code>
     */
    public Builder mergeDescriptorReference(org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference value) {
      if (((bitField0_ & 0x00000010) == 0x00000010) &&
          descriptorReference_ != org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference.getDefaultInstance()) {
        descriptorReference_ =
          org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference.newBuilder(descriptorReference_).mergeFrom(value).buildPartial();
      } else {
        descriptorReference_ = value;
      }

      bitField0_ |= 0x00000010;
      return this;
    }
    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference descriptor_reference = 7;</code>
     */
    public Builder clearDescriptorReference() {
      descriptorReference_ = org.jetbrains.kotlin.backend.common.serialization.proto.DescriptorReference.getDefaultInstance();

      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData)
  }

  static {
    defaultInstance = new IrSymbolData(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrSymbolData)
}

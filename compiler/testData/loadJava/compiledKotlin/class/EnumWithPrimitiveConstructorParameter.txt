package test

public final enum class EnumWithPrimitiveConstructorParameter : kotlin.Enum<test.EnumWithPrimitiveConstructorParameter> {
    /*primary*/ private constructor EnumWithPrimitiveConstructorParameter(/*0*/ b: kotlin.Boolean)
    public final override /*1*/ /*fake_override*/ val name: kotlin.String
        public final override /*1*/ /*fake_override*/ fun <get-name>(): kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
        public final override /*1*/ /*fake_override*/ fun <get-ordinal>(): kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.EnumWithPrimitiveConstructorParameter): kotlin.Int

    // Static members
    @kotlin.Deprecated(level = DeprecationLevel.ERROR, message = "Use 'values()' function instead", replaceWith = kotlin.ReplaceWith(expression = "this.values()", imports = {})) public final /*synthesized*/ val values: kotlin.Array<test.EnumWithPrimitiveConstructorParameter>
        public final fun <get-values>(): kotlin.Array<test.EnumWithPrimitiveConstructorParameter>
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): test.EnumWithPrimitiveConstructorParameter
    public final /*synthesized*/ fun values(): kotlin.Array<test.EnumWithPrimitiveConstructorParameter>
}

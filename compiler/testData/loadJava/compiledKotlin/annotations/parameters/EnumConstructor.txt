package test

@kotlin.annotation.annotation() public final class A : kotlin.Annotation {
    /*primary*/ public constructor A()
}

@kotlin.annotation.annotation() public final class B : kotlin.Annotation {
    /*primary*/ public constructor B()
}

public final enum class E : kotlin.Enum<test.E> {
    /*primary*/ private constructor E(/*0*/ @test.A() x: kotlin.String, /*1*/ @test.B() y: kotlin.Int)
    public final val x: kotlin.String
        public final fun <get-x>(): kotlin.String
    public final val y: kotlin.Int
        public final fun <get-y>(): kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.E): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): test.E
    public final /*synthesized*/ fun values(): kotlin.Array<test.E>
}

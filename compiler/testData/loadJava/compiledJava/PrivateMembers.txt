package test

public open class PrivateMembers {
    private constructor PrivateMembers()
    private final var field: kotlin.Int
    private open fun method(): kotlin.Unit
    private final /*synthesized*/ fun samAdapter(/*0*/ p0: (() -> kotlin.Unit)?): kotlin.Unit
    private open fun samAdapter(/*0*/ p0: test.PrivateMembers.SamInterface?): kotlin.Unit
    
    private open inner class Inner {
        private constructor Inner()
    }
    
    private open class Nested {
        private constructor Nested()
        
        // Static members
        private open fun staticMethodInNested(): kotlin.Unit
    }
    
    private trait SamInterface {
        public abstract fun foo(): kotlin.Unit
    }
    
    // Static members
    private final var staticField: kotlin.Int
    private final /*synthesized*/ fun SamInterface(/*0*/ function: () -> kotlin.Unit): test.PrivateMembers.SamInterface
    private open fun staticMethod(): kotlin.Unit
}

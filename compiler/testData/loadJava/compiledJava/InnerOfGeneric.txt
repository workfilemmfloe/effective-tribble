package test

public open class InnerOfGeneric {
    public constructor InnerOfGeneric()

    public abstract inner class A</*0*/ K> {
        public constructor A</*0*/ K>()

        public abstract inner class Inner : test.InnerOfGeneric.S<K!> {
            public constructor Inner()
            public open override /*1*/ /*fake_override*/ fun iterator(): kotlin.(Mutable)Iterator<K!>!
        }
    }

    public open inner class B</*0*/ L> : test.InnerOfGeneric.A<L!> {
        public constructor B</*0*/ L>()

        public open inner class SubInner : test.InnerOfGeneric.A.Inner {
            public constructor SubInner()
            public open override /*1*/ fun iterator(): kotlin.(Mutable)Iterator<L!>!
        }
    }

    public open inner class S</*0*/ E> {
        public constructor S</*0*/ E>()
        public open fun iterator(): kotlin.(Mutable)Iterator<E!>!
    }
}

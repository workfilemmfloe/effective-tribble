package test

public final enum class Enum : kotlin.Enum<test.Enum!> {
    enum entry A

    enum entry B

    enum entry C

    private constructor Enum()
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.Enum!): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int

    public open inner class Inner {
        public constructor Inner()
        public/*package*/ open fun bar(): kotlin.Unit
        public/*package*/ open fun valueOf(/*0*/ p0: kotlin.String!): kotlin.Unit
    }

    public open class Nested {
        public constructor Nested()
        public/*package*/ open fun foo(): kotlin.Unit
        public/*package*/ open fun values(): kotlin.Unit
    }

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): test.Enum
    public final /*synthesized*/ fun values(): kotlin.Array<test.Enum>
}

package test

public/*package*/ interface Parent1 {

    // Static members
    public const final val a: kotlin.Int = 1
    public const final val b: kotlin.Int = 2
}

public/*package*/ interface Parent2 {

    // Static members
    public const final val d: kotlin.Int = 1
    public const final val e: kotlin.Int = 2
}

public/*package*/ final enum class StaticMembersInEnum : kotlin.Enum<test.StaticMembersInEnum!>, test.Parent1, test.Parent2 {
    enum entry ENTRY

    private constructor StaticMembersInEnum()
    public final override /*1*/ /*fake_override*/ val name: kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: test.StaticMembersInEnum!): kotlin.Int

    // Static members
    public const final override /*1*/ /*fake_override*/ val a: kotlin.Int
    public final override /*1*/ var b: kotlin.Int
    public final var c: kotlin.Int
    public final override /*1*/ var d: kotlin.Int
    public const final override /*1*/ /*fake_override*/ val e: kotlin.Int
    @kotlin.Deprecated(level = DeprecationLevel.ERROR, message = "Use 'values()' function instead", replaceWith = kotlin.ReplaceWith(expression = "this.values()", imports = {})) public final /*synthesized*/ val values: kotlin.Array<test.StaticMembersInEnum>
    public open fun foo(): kotlin.Unit
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): test.StaticMembersInEnum
    public final /*synthesized*/ fun values(): kotlin.Array<test.StaticMembersInEnum>
}

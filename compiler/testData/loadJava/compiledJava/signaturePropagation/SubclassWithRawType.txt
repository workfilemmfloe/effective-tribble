package test

public interface SubclassWithRawType {

    public interface Sub : test.SubclassWithRawType.Super {
        public abstract override /*1*/ fun array1(): kotlin.Array<(out) kotlin.(Mutable)List<kotlin.String!>!>!
        public abstract override /*1*/ fun array2(): kotlin.Array<(out) kotlin.(Mutable)List<(raw) kotlin.Any?>!>!
        public abstract override /*1*/ fun boundWildcard1(): (kotlin.MutableList<out kotlin.(Mutable)List<kotlin.String!>!>..kotlin.List<kotlin.(Mutable)List<kotlin.String!>!>?)
        public abstract override /*1*/ fun boundWildcard2(): kotlin.(Mutable)List<in kotlin.(Mutable)List<(raw) kotlin.Any?>!>!
        public abstract override /*1*/ fun simple1(): kotlin.(Mutable)List<kotlin.String!>!
        public abstract override /*1*/ fun simple2(): kotlin.(Mutable)List<kotlin.(Mutable)List<kotlin.String!>!>!
        public abstract override /*1*/ fun simple3(): kotlin.(Mutable)List<(raw) kotlin.Any?>!
        public abstract override /*1*/ fun wildcard(): kotlin.(Mutable)List<(raw) kotlin.Any?>!
    }

    public interface Super {
        public abstract fun array1(): kotlin.Array<(out) kotlin.(Mutable)List<(raw) kotlin.Any?>!>!
        public abstract fun array2(): kotlin.Array<(out) kotlin.(Mutable)List<kotlin.String!>!>!
        public abstract fun boundWildcard1(): (kotlin.MutableList<out kotlin.(Mutable)List<(raw) kotlin.Any?>!>..kotlin.List<kotlin.(Mutable)List<(raw) kotlin.Any?>!>?)
        public abstract fun boundWildcard2(): kotlin.(Mutable)List<in kotlin.(Mutable)List<kotlin.String!>!>!
        public abstract fun simple1(): kotlin.(Mutable)List<(raw) kotlin.Any?>!
        public abstract fun simple2(): kotlin.(Mutable)List<(raw) kotlin.Any?>!
        public abstract fun simple3(): kotlin.(Mutable)List<kotlin.String!>!
        public abstract fun wildcard(): kotlin.(Mutable)List<*>!
    }
}

package test

public trait SubclassWithRawType {

    public trait Sub : test.SubclassWithRawType.Super {
        public abstract override /*1*/ fun array1(): kotlin.Array<kotlin.List<kotlin.String?>>?
        public abstract override /*1*/ fun array2(): kotlin.Array<kotlin.List<kotlin.Any>>?
        public abstract override /*1*/ fun boundWildcard1(): kotlin.MutableList<out kotlin.List<kotlin.String?>?>?
        public abstract override /*1*/ fun boundWildcard2(): kotlin.MutableList<in kotlin.List<kotlin.Any>?>?
        public abstract override /*1*/ fun simple1(): kotlin.MutableList<out kotlin.String?>?
        public abstract override /*1*/ fun simple2(): kotlin.MutableList<out kotlin.List<kotlin.String>?>?
        public abstract override /*1*/ fun simple3(): kotlin.MutableList<out kotlin.Any>?
        public abstract override /*1*/ fun wildcard(): kotlin.MutableList<out kotlin.Any?>?
    }

    public trait Super {
        public abstract fun array1(): kotlin.Array<kotlin.List<kotlin.Any?>>?
        public abstract fun array2(): kotlin.Array<kotlin.List<kotlin.String>>?
        public abstract fun boundWildcard1(): kotlin.MutableList<out kotlin.List<kotlin.Any?>?>?
        public abstract fun boundWildcard2(): kotlin.MutableList<in kotlin.List<kotlin.String>?>?
        public abstract fun simple1(): kotlin.MutableList<out kotlin.Any?>?
        public abstract fun simple2(): kotlin.MutableList<out kotlin.Any?>?
        public abstract fun simple3(): kotlin.MutableList<kotlin.String>?
        public abstract fun wildcard(): kotlin.MutableList<out kotlin.Any?>?
    }
}

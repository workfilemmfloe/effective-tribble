== foo ==
fun foo() {
    "before"
    try {
        foo()
    }
    catch (e: Exception) {
        val a = e
    }
    finally {
        val a = 1
    }
    "after"
}
---------------------
L0:
  1 <START>                                                                                                  INIT: in: {} out: {}
  2 mark({ "before" try { foo() } catch (e: Exception) { val a = e } finally { val a = 1 } "after" })
    mark("before")
    r("before") -> <v0>
    mark(try { foo() } catch (e: Exception) { val a = e } finally { val a = 1 })
    jmp?(L2)
    jmp?(L4)
  3 mark({ foo() })
    mark(foo())
    call(foo(), foo) -> <v1>
  2 jmp?(L3)
    jmp?(L4)
    jmp(L5)
L3 [beforeCatchFromTryMagic]:
    magic[CATCH_FROM_TRY](try { foo() } catch (e: Exception) { val a = e } finally { val a = 1 }) -> <v2>                                               USE: in: {} out: {}
L2 [onException]:
  3 v(e: Exception)                                                                                          INIT: in: {} out: {e=D}
    magic[FAKE_INITIALIZER](e: Exception) -> <v3>                                                            INIT: in: {e=D} out: {e=D}
    w(e|<v3>)                                                                                                INIT: in: {e=D} out: {e=ID}
  4 mark({ val a = e })                                                                                      INIT: in: {e=ID} out: {e=ID}
    v(val a = e)                                                                                             INIT: in: {e=ID} out: {a=D, e=ID}          USE: in: {e=READ} out: {e=READ}
    r(e) -> <v4>                                                                                             INIT: in: {a=D, e=ID} out: {a=D, e=ID}     USE: in: {} out: {e=READ}
    w(a|<v4>)                                                                                                INIT: in: {a=D, e=ID} out: {a=ID, e=ID}
  3 magic[OUT_OF_CATCH](try { foo() } catch (e: Exception) { val a = e } finally { val a = 1 }) -> <v5>      INIT: in: {e=ID} out: {e=ID}
    jmp(L5)
L5 [afterCatches]:
  2 jmp(L6)                                                                                                  INIT: in: {} out: {}
L4 [onExceptionToFinallyBlock]:
L7 [start finally]:
  3 mark({ val a = 1 })
    v(val a = 1)                                                                                             INIT: in: {} out: {a=D}
    r(1) -> <v6>                                                                                             INIT: in: {a=D} out: {a=D}
    w(a|<v6>)                                                                                                INIT: in: {a=D} out: {a=ID}
L8 [finish finally]:
  2 jmp(error)                                                                                               INIT: in: {} out: {}
L6 [skipFinallyToErrorBlock]:
L9 [copy of L4, onExceptionToFinallyBlock]:
  3 mark({ val a = 1 })
    v(val a = 1)                                                                                             INIT: in: {} out: {a=D}
    r(1) -> <v6>                                                                                             INIT: in: {a=D} out: {a=D}
    w(a|<v6>)                                                                                                INIT: in: {a=D} out: {a=ID}
  2 merge(try { foo() } catch (e: Exception) { val a = e } finally { val a = 1 }|<v1>, !<v7>) -> <v8>        INIT: in: {} out: {}
    mark("after")
    r("after") -> <v9>
L1:
  1 <END>
error:
    <ERROR>
sink:
    <SINK>                                                                                                                                              USE: in: {} out: {}
=====================

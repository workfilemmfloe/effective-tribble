== foo ==
fun foo() {
    "before"
    try {
        foo()
    }
    catch (e: Exception) {
        val a = e
    }
    finally {
        val a = 1
    }
    "after"
}
---------------------
                                                                                              <v2>: {<: Exception}   NEW: magic(e: Exception) -> <v2>
"before"                                                                                      <v0>: *                NEW: r("before") -> <v0>        
foo()                                                                                         <v1>: *                NEW: call(foo, foo) -> <v1>     
{ foo() }                                                                                     <v1>: *                COPY                            
e                                                                                             <v3>: {<: Exception}   NEW: r(e) -> <v3>               
1                                                                                             <v4>: Int              NEW: r(1) -> <v4>               
try { foo() } catch (e: Exception) { val a = e } finally { val a = 1 }                        <v1>: *                COPY                            
"after"                                                                                       <v5>: *                NEW: r("after") -> <v5>         
{ "before" try { foo() } catch (e: Exception) { val a = e } finally { val a = 1 } "after" }   <v5>: *                COPY                            
=====================

== sample ==
fun sample(): String? {
    try {
        if (false) {
            return "fail"
        } else {
            if (false) {
                if (false) {
                    var foo: String? = null
                    try {
                        foo = "test"
                    } catch (e: Exception) {
                        return "fail"
                    } finally {
                        println(foo) // Variable 'foo' must be initialized
                    }
                }
                return "fail"
            }
        }
    } finally {}
    return null
}
---------------------
                                                                                                                                                                                                                                                                          <v8>: *                NEW: magic[CATCH_FROM_TRY](try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized }) -> <v8>
                                                                                                                                                                                                                                                                          <v9>: {<: Exception}   NEW: magic[FAKE_INITIALIZER](e: Exception) -> <v9>
false                                                                                                                                                                                                                                                                     <v0>: Boolean          NEW: r(false) -> <v0>
"fail"                                                                                                                                                                                                                                                                    <v1>: {<: String?}     NEW: r("fail") -> <v1>
return "fail"                                                                                                                                                                                                                                                             !<v2>: *
{ return "fail" }                                                                                                                                                                                                                                                         !<v2>: *               COPY
false                                                                                                                                                                                                                                                                     <v3>: Boolean          NEW: r(false) -> <v3>
false                                                                                                                                                                                                                                                                     <v4>: Boolean          NEW: r(false) -> <v4>
null                                                                                                                                                                                                                                                                      <v5>: {<: String?}     NEW: r(null) -> <v5>
"test"                                                                                                                                                                                                                                                                    <v6>: {<: String?}     NEW: r("test") -> <v6>
foo = "test"                                                                                                                                                                                                                                                              !<v7>: *
{ foo = "test" }                                                                                                                                                                                                                                                          !<v7>: *               COPY
"fail"                                                                                                                                                                                                                                                                    <v10>: {<: String?}    NEW: r("fail") -> <v10>
return "fail"                                                                                                                                                                                                                                                             !<v14>: *
{ return "fail" }                                                                                                                                                                                                                                                         !<v14>: *              COPY
println                                                                                                                                                                                                                                                                   !<v12>: *
foo                                                                                                                                                                                                                                                                       <v11>: *               NEW: r(foo) -> <v11>
println(foo)                                                                                                                                                                                                                                                              <v13>: *               NEW: magic[UNRESOLVED_CALL](println(foo)|<v11>, !<v12>) -> <v13>
{ println(foo) // Variable 'foo' must be initialized }                                                                                                                                                                                                                    <v13>: *               COPY
try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized }                                                                                                                                                <v16>: *               NEW: merge(try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized }|!<v7>, !<v14>) -> <v16>
{ var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } }                                                                                                                    <v16>: *               COPY
if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } }                                                                                                         <v17>: *               NEW: merge(if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } }|<v16>) -> <v17>
"fail"                                                                                                                                                                                                                                                                    <v18>: {<: String?}    NEW: r("fail") -> <v18>
return "fail"                                                                                                                                                                                                                                                             !<v19>: *
{ if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" }                                                                                       !<v19>: *              COPY
if (false) { if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" }                                                                            <v20>: *               NEW: merge(if (false) { if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" }|!<v19>) -> <v20>
{ if (false) { if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" } }                                                                        <v20>: *               COPY
if (false) { return "fail" } else { if (false) { if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" } }                                      <v21>: *               NEW: merge(if (false) { return "fail" } else { if (false) { if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" } }|!<v2>, <v20>) -> <v21>
{ if (false) { return "fail" } else { if (false) { if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" } } }                                  <v21>: *               COPY
try { if (false) { return "fail" } else { if (false) { if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" } } } finally {}                   <v22>: *               NEW: merge(try { if (false) { return "fail" } else { if (false) { if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" } } } finally {}|<v21>) -> <v22>
null                                                                                                                                                                                                                                                                      <v23>: {<: String?}    NEW: r(null) -> <v23>
return null                                                                                                                                                                                                                                                               !<v24>: *
{ try { if (false) { return "fail" } else { if (false) { if (false) { var foo: String? = null try { foo = "test" } catch (e: Exception) { return "fail" } finally { println(foo) // Variable 'foo' must be initialized } } return "fail" } } } finally {} return null }   !<v24>: *              COPY
=====================

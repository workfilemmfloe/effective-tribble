namespace test

internal final enum class test.Test : jet.Enum<test.Test> {
    private final /*constructor*/ fun <init>(/*0*/ a: jet.Int): test.Test
    public final override /*1*/ /*fake_override*/ fun name(): jet.String
    public final override /*1*/ /*fake_override*/ fun ordinal(): jet.Int
    internal final class object test.Test.<class-object-for-Test> {
        private final /*constructor*/ fun <init>(): test.Test.<class-object-for-Test>
        internal final val A: test.Test.<class-object-for-Test>.A
        internal final val B: test.Test.<class-object-for-Test>.B
        internal final enum entry test.Test.<class-object-for-Test>.A : test.Test {
            private final /*constructor*/ fun <init>(): test.Test.<class-object-for-Test>.A
            public final override /*1*/ /*fake_override*/ fun name(): jet.String
            public final override /*1*/ /*fake_override*/ fun ordinal(): jet.Int
        }
        internal final enum entry test.Test.<class-object-for-Test>.B : test.Test {
            private final /*constructor*/ fun <init>(): test.Test.<class-object-for-Test>.B
            public final override /*1*/ /*fake_override*/ fun name(): jet.String
            public final override /*1*/ /*fake_override*/ fun ordinal(): jet.Int
        }
        public final fun valueOf(/*0*/ value: jet.String): test.Test
        public final fun values(): jet.Array<test.Test>
    }
}

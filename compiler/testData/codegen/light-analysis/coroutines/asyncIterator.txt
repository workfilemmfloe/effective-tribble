@kotlin.Metadata
public interface AsyncGenerator {
    public abstract @org.jetbrains.annotations.Nullable method yield(p0: java.lang.Object, @org.jetbrains.annotations.NotNull p1: kotlin.coroutines.experimental.Continuation): java.lang.Object
}

@kotlin.Metadata
public final class AsyncGeneratorIterator {
    private @org.jetbrains.annotations.Nullable field computeContinuation: kotlin.coroutines.experimental.Continuation
    private field computedNext: boolean
    private field computesNext: boolean
    private final @org.jetbrains.annotations.NotNull field context: kotlin.coroutines.experimental.EmptyCoroutineContext
    private @org.jetbrains.annotations.Nullable field nextStep: kotlin.coroutines.experimental.Continuation
    private @org.jetbrains.annotations.Nullable field nextValue: java.lang.Object
    public method <init>(): void
    public final @org.jetbrains.annotations.Nullable method computeHasNext(@org.jetbrains.annotations.NotNull p0: kotlin.coroutines.experimental.Continuation): java.lang.Object
    public final @org.jetbrains.annotations.Nullable method computeNext(@org.jetbrains.annotations.NotNull p0: kotlin.coroutines.experimental.Continuation): java.lang.Object
    private final method done(): void
    public final @org.jetbrains.annotations.Nullable method getComputeContinuation(): kotlin.coroutines.experimental.Continuation
    public final method getComputedNext(): boolean
    public final method getComputesNext(): boolean
    public synthetic method getContext(): kotlin.coroutines.experimental.CoroutineContext
    public @org.jetbrains.annotations.NotNull method getContext(): kotlin.coroutines.experimental.EmptyCoroutineContext
    public final @org.jetbrains.annotations.Nullable method getNextStep(): kotlin.coroutines.experimental.Continuation
    public final @org.jetbrains.annotations.Nullable method getNextValue(): java.lang.Object
    public @org.jetbrains.annotations.Nullable method hasNext(@org.jetbrains.annotations.NotNull p0: kotlin.coroutines.experimental.Continuation): java.lang.Object
    public @org.jetbrains.annotations.Nullable method next(@org.jetbrains.annotations.NotNull p0: kotlin.coroutines.experimental.Continuation): java.lang.Object
    public method resume(@org.jetbrains.annotations.NotNull p0: kotlin.Unit): void
    public synthetic method resume(p0: java.lang.Object): void
    public final @kotlin.Suppress method resumeIterator(@org.jetbrains.annotations.Nullable p0: java.lang.Throwable): void
    public method resumeWithException(@org.jetbrains.annotations.NotNull p0: java.lang.Throwable): void
    public final method setComputeContinuation(@org.jetbrains.annotations.Nullable p0: kotlin.coroutines.experimental.Continuation): void
    public final method setComputedNext(p0: boolean): void
    public final method setComputesNext(p0: boolean): void
    public final method setNextStep(@org.jetbrains.annotations.Nullable p0: kotlin.coroutines.experimental.Continuation): void
    public final method setNextValue(@org.jetbrains.annotations.Nullable p0: java.lang.Object): void
    public @org.jetbrains.annotations.Nullable method yield(p0: java.lang.Object, @org.jetbrains.annotations.NotNull p1: kotlin.coroutines.experimental.Continuation): java.lang.Object
}

@kotlin.Metadata
public interface AsyncIterator {
    public abstract @org.jetbrains.annotations.Nullable method hasNext(@org.jetbrains.annotations.NotNull p0: kotlin.coroutines.experimental.Continuation): java.lang.Object
    public abstract @org.jetbrains.annotations.Nullable method next(@org.jetbrains.annotations.NotNull p0: kotlin.coroutines.experimental.Continuation): java.lang.Object
}

@kotlin.Metadata
public final class AsyncIteratorKt {
    public final static @org.jetbrains.annotations.NotNull method asyncGenerate(@org.jetbrains.annotations.NotNull p0: kotlin.jvm.functions.Function2): AsyncSequence
    public final static @org.jetbrains.annotations.NotNull method box(): java.lang.String
    public final static method builder(@org.jetbrains.annotations.NotNull p0: kotlin.jvm.functions.Function1): void
}

@kotlin.Metadata
public interface AsyncSequence {
    public abstract @org.jetbrains.annotations.NotNull method iterator(): AsyncIterator
}

@kotlin.Metadata
public final class CoroutineUtilKt {
    public final static @org.jetbrains.annotations.NotNull method handleExceptionContinuation(@org.jetbrains.annotations.NotNull p0: kotlin.jvm.functions.Function1): kotlin.coroutines.experimental.Continuation
    public final static @org.jetbrains.annotations.NotNull method handleResultContinuation(@org.jetbrains.annotations.NotNull p0: kotlin.jvm.functions.Function1): kotlin.coroutines.experimental.Continuation
}

@kotlin.Metadata
public class EmptyContinuation {
    public final static field Companion: EmptyContinuation.Companion
    private final @org.jetbrains.annotations.NotNull field context: kotlin.coroutines.experimental.CoroutineContext
    inner class EmptyContinuation/Companion
    public @synthetic.kotlin.jvm.GeneratedByJvmOverloads method <init>(): void
    public method <init>(@org.jetbrains.annotations.NotNull p0: kotlin.coroutines.experimental.CoroutineContext): void
    public synthetic method <init>(p0: kotlin.coroutines.experimental.CoroutineContext, p1: int, p2: kotlin.jvm.internal.DefaultConstructorMarker): void
    public @org.jetbrains.annotations.NotNull method getContext(): kotlin.coroutines.experimental.CoroutineContext
    public method resume(@org.jetbrains.annotations.Nullable p0: java.lang.Object): void
    public method resumeWithException(@org.jetbrains.annotations.NotNull p0: java.lang.Throwable): void
}

@kotlin.Metadata
public final static class EmptyContinuation/Companion {
    inner class EmptyContinuation/Companion
    private method <init>(): void
}

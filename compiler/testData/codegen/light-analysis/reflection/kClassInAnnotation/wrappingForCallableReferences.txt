@java.lang.annotation.Retention
@kotlin.Metadata
public annotation class Anno {
    public abstract method kClasses(): java.lang.Class[]
    public abstract method kClassesVararg(): java.lang.Class[]
    public abstract method klass(): java.lang.Class
}

@kotlin.Metadata
public final class WrappingForCallableReferencesKt {
    public final static @org.jetbrains.annotations.NotNull method box(): java.lang.String
    public final static method checkBoundReference(@org.jetbrains.annotations.Nullable p0: java.lang.Object, @org.jetbrains.annotations.NotNull p1: kotlin.jvm.functions.Function0): void
    public final static method checkBoundReferenceArray(@org.jetbrains.annotations.Nullable p0: java.lang.Object, @org.jetbrains.annotations.NotNull p1: kotlin.jvm.functions.Function0): void
    public final static method checkReference(@org.jetbrains.annotations.NotNull p0: Anno, @org.jetbrains.annotations.Nullable p1: java.lang.Object, @org.jetbrains.annotations.NotNull p2: kotlin.jvm.functions.Function1): void
    public final static method checkReferenceArray(@org.jetbrains.annotations.NotNull p0: Anno, @org.jetbrains.annotations.Nullable p1: java.lang.Object, @org.jetbrains.annotations.NotNull p2: kotlin.jvm.functions.Function1): void
    public final static @Anno method foo(): void
}

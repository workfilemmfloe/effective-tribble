package

internal final class A {
    public constructor A()
    internal final var p: kotlin.Int
    kotlin.platform.platformStatic() internal final val z2: kotlin.Int = 1
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    internal object A : B {
        private constructor A()
        kotlin.platform.platformStatic() public open override /*1*/ val base1: kotlin.Int = 0
        public open override /*1*/ val base2: kotlin.Int = 0
        internal final var p: kotlin.Int
        kotlin.platform.platformStatic() internal final val z: kotlin.Int = 1
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        kotlin.platform.platformStatic() internal open fun f(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    internal companion object Companion : B {
        private constructor Companion()
        kotlin.platform.platformStatic() public open override /*1*/ val base1: kotlin.Int = 0
        public open override /*1*/ val base2: kotlin.Int = 0
        internal final var p1: kotlin.Int
        kotlin.platform.platformStatic() internal final val z: kotlin.Int = 1
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

internal open class B {
    public constructor B()
    public open val base1: kotlin.Int = 1
    public open val base2: kotlin.Int = 1
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

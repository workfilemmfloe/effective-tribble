package

public final annotation class A : kotlin.Annotation {
    public /*synthesized*/ constructor A(/*0*/ arg: kotlin.Array<out java.lang.Class<*>>)
    public constructor A(/*0*/ arg: kotlin.Array<out kotlin.reflect.KClass<*>>)
    public final val arg: kotlin.Array<kotlin.reflect.KClass<*>>
    public abstract fun arg(): kotlin.Array<kotlin.reflect.KClass<*>>
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

A(arg = {javaClass<kotlin.String>(), javaClass<kotlin.Int>()}: kotlin.Array<java.lang.Class<out kotlin.Comparable<out kotlin.Any?>>>) internal final class MyClass1 {
    public constructor MyClass1()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

A(arg = {javaClass<kotlin.String>(), kotlin.Int::class}: kotlin.Array<???>) internal final class MyClass2 {
    public constructor MyClass2()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

A(arg = {kotlin.String::class, javaClass<kotlin.Int>()}: kotlin.Array<???>) internal final class MyClass3 {
    public constructor MyClass3()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

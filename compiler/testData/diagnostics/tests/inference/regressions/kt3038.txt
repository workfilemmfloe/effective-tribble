package

package a {
    internal fun hello(): kotlin.Unit
    internal fun </*0*/ T> inferenceTest(/*0*/ a: T): T
    internal fun use(/*0*/ vararg a: kotlin.Any? /*kotlin.Array<kotlin.Any?>*/): kotlin.Array<kotlin.Any?>

    internal final enum class TestEnum : kotlin.Enum<a.TestEnum> {
        private constructor TestEnum()
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: a.TestEnum): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        public enum entry FIRST : a.TestEnum {
            private constructor FIRST()
            public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: a.TestEnum): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

            public class object <class-object-for-FIRST> : a.TestEnum.FIRST {
                private constructor <class-object-for-FIRST>()
                public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: a.TestEnum): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
        }

        public enum entry SECOND : a.TestEnum {
            private constructor SECOND()
            public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: a.TestEnum): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

            public class object <class-object-for-SECOND> : a.TestEnum.SECOND {
                private constructor <class-object-for-SECOND>()
                public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: a.TestEnum): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
        }

        // Static members
        public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): a.TestEnum
        public final /*synthesized*/ fun values(): kotlin.Array<a.TestEnum>
    }
}

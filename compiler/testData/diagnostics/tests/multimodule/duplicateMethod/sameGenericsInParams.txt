// -- Module: <m0> --
package

package p {

    public trait G1</*0*/ T> {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public trait G2</*0*/ A, /*1*/ B> {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}


// -- Module: <m1> --
package

package p {

    public trait B {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public abstract fun foo(/*0*/ a: p.G1<kotlin.Int>, /*1*/ b: p.G2<p.B, kotlin.String>): p.B?
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public trait G1</*0*/ T> {
        // -- Module: <m0> --
    }

    public trait G2</*0*/ A, /*1*/ B> {
        // -- Module: <m0> --
    }
}


// -- Module: <m2> --
package

package p {

    public trait B {
        // -- Module: <m1> --
    }

    public trait C : p.B {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public abstract override /*1*/ fun foo(/*0*/ a: p.G1<kotlin.Int>, /*1*/ b: p.G2<p.B, kotlin.String>): p.B?
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public trait G1</*0*/ T> {
        // -- Module: <m0> --
    }

    public trait G2</*0*/ A, /*1*/ B> {
        // -- Module: <m0> --
    }
}


// -- Module: <m3> --
package

package p {

    public trait B {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public abstract fun foo(/*0*/ a: p.G1<kotlin.Int>, /*1*/ b: p.G2<p.B, kotlin.String>): p.B?
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public trait G1</*0*/ T> {
        // -- Module: <m0> --
    }

    public trait G2</*0*/ A, /*1*/ B> {
        // -- Module: <m0> --
    }
}


// -- Module: <m4> --
package

internal fun test(/*0*/ b: p.B?, /*1*/ a: p.G1<kotlin.Int>, /*2*/ b1: p.G2<p.B, kotlin.String>): kotlin.Unit

package p {

    public trait B {
        // -- Module: <m3> --
    }

    public trait C : p.B {
        // -- Module: <m2> --
    }

    public trait G1</*0*/ T> {
        // -- Module: <m0> --
    }

    public trait G2</*0*/ A, /*1*/ B> {
        // -- Module: <m0> --
    }
}

package

public val a1: kotlin.reflect.KClass<A<*>>
public val a2: [ERROR : Unresolved class]
public val a3: [ERROR : Unresolved class]
public val a4: [ERROR : Unresolved class]
public val b1: kotlin.reflect.KClass<kotlin.Int>
public val b2: kotlin.reflect.KClass<kotlin.Nothing>
public val i1: kotlin.reflect.KClass<A.Inner<*>>
public val i2: [ERROR : Unresolved class]
public val i3: [ERROR : Unresolved class]
public val m1: kotlin.reflect.KClass<kotlin.Map<*, *>>
public val m2: [ERROR : Unresolved class]
public val m3: kotlin.reflect.KClass<kotlin.Map.Entry<*, *>>
public val n1: kotlin.reflect.KClass<A.Nested<*>>
public val n2: [ERROR : Unresolved class]

public final class A</*0*/ T> {
    public constructor A</*0*/ T>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public final inner class Inner</*0*/ I> {
        public constructor Inner</*0*/ I>()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public final class Nested</*0*/ N> {
        public constructor Nested</*0*/ N>()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

package

internal final class Outer {
    public constructor Outer()
    internal final val property: kotlin.String = ""
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    internal final fun function(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    internal final inner class Inner {
        public constructor Inner()
        internal final val innerProp: kotlin.String = ""
        internal final val innerThisProp: kotlin.String = ""
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        internal final fun innerFun(): kotlin.Int
        internal final fun innerThisFun(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        internal final inner class InnerInner {
            public constructor InnerInner()
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            internal final fun f(): kotlin.Int
            internal final fun g(): kotlin.String
            internal final fun h(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            internal final fun i(): kotlin.String
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
    }

    internal final class Nested {
        public constructor Nested()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        internal final fun f(): kotlin.Int
        internal final fun g(): kotlin.String
        internal final fun h(): [ERROR : <ERROR FUNCTION RETURN TYPE>]
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        internal final fun i(): [ERROR : <ERROR PROPERTY TYPE>]
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
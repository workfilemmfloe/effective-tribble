package

internal fun En(): kotlin.Int
internal fun Foo(): kotlin.Int

internal final enum class En : kotlin.Enum<En> {
    private constructor En()
    internal final fun ENTRY(): kotlin.Int
    internal final fun SUBCLASS(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public enum entry ENTRY : En {
        private constructor ENTRY()
        internal final override /*1*/ /*fake_override*/ fun ENTRY(): kotlin.Int
        internal final override /*1*/ /*fake_override*/ fun SUBCLASS(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        public class object <class-object-for-ENTRY> : En.ENTRY {
            private constructor <class-object-for-ENTRY>()
            internal final override /*1*/ /*fake_override*/ fun ENTRY(): kotlin.Int
            internal final override /*1*/ /*fake_override*/ fun SUBCLASS(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
    }

    public enum entry SUBCLASS : En {
        private constructor SUBCLASS()
        internal final override /*1*/ /*fake_override*/ fun ENTRY(): kotlin.Int
        internal final override /*1*/ /*fake_override*/ fun SUBCLASS(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        public class object <class-object-for-SUBCLASS> : En.SUBCLASS {
            private constructor <class-object-for-SUBCLASS>()
            internal final override /*1*/ /*fake_override*/ fun ENTRY(): kotlin.Int
            internal final override /*1*/ /*fake_override*/ fun SUBCLASS(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
    }

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): En
    public final /*synthesized*/ fun values(): kotlin.Array<En>
}

internal object Foo {
    private constructor Foo()
    internal final fun Bar(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public class object <class-object-for-Foo> : Foo {
        private constructor <class-object-for-Foo>()
        internal final override /*1*/ /*fake_override*/ fun Bar(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    internal object Bar {
        private constructor Bar()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        public class object <class-object-for-Bar> : Foo.Bar {
            private constructor <class-object-for-Bar>()
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
    }
}
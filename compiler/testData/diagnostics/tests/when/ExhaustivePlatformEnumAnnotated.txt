package

public fun foo(): kotlin.Int

public final enum class J : kotlin.Enum<J!> {
    enum entry A

    enum entry B

    public constructor J()
    public final override /*1*/ /*fake_override*/ val name: kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: J!): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    @kotlin.Deprecated(message = "Use 'values()' function instead", replaceWith = kotlin.ReplaceWith(expression = "this.values()", imports = {})) public final /*synthesized*/ val values: kotlin.Array<J>
    @org.jetbrains.annotations.NotNull() public open fun create(): J
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): J
    public final /*synthesized*/ fun values(): kotlin.Array<J>
}

package

package kt1185 {
    internal fun bar(/*0*/ c: kt1185.Color): kotlin.Int
    internal fun bar1(/*0*/ c: kt1185.Color): kotlin.Int
    internal fun foo(/*0*/ d: kt1185.Direction): kotlin.Int
    internal fun foo1(/*0*/ d: kt1185.Direction): kotlin.Int

    internal final class A {
        public constructor A()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        internal companion object Companion {
            private constructor Companion()
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
    }

    internal final enum class Color : kotlin.Enum<kt1185.Color> {
        public enum entry RED : kt1185.Color {
            private constructor RED()
            internal final override /*1*/ /*fake_override*/ val rgb: kotlin.Int
            public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: kt1185.Color): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }

        public enum entry GREEN : kt1185.Color {
            private constructor GREEN()
            internal final override /*1*/ /*fake_override*/ val rgb: kotlin.Int
            public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: kt1185.Color): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }

        public enum entry BLUE : kt1185.Color {
            private constructor BLUE()
            internal final override /*1*/ /*fake_override*/ val rgb: kotlin.Int
            public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: kt1185.Color): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }

        private constructor Color(/*0*/ rgb: kotlin.Int)
        internal final val rgb: kotlin.Int
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: kt1185.Color): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        // Static members
        public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): kt1185.Color
        public final /*synthesized*/ fun values(): kotlin.Array<kt1185.Color>
    }

    internal final enum class Direction : kotlin.Enum<kt1185.Direction> {
        public enum entry NORTH : kt1185.Direction {
            private constructor NORTH()
            public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: kt1185.Direction): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }

        public enum entry SOUTH : kt1185.Direction {
            private constructor SOUTH()
            public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: kt1185.Direction): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }

        public enum entry WEST : kt1185.Direction {
            private constructor WEST()
            public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: kt1185.Direction): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }

        public enum entry EAST : kt1185.Direction {
            private constructor EAST()
            public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: kt1185.Direction): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }

        private constructor Direction()
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: kt1185.Direction): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        // Static members
        public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): kt1185.Direction
        public final /*synthesized*/ fun values(): kotlin.Array<kt1185.Direction>
    }
}

package

package test {
    internal fun testFun(/*0*/ a: kotlin.Int): kotlin.Int

    internal final class TestSome</*0*/ P> {
        public constructor TestSome</*0*/ P>()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        internal class object <class-object-for-TestSome> : test.ToResolve<P> {
            private constructor <class-object-for-TestSome>()
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
    }

    internal open class ToResolve</*0*/ SomeClass> {
        public constructor ToResolve</*0*/ SomeClass>(/*0*/ f: (kotlin.Int) -> kotlin.Int)
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

package

package null_safety {
    internal fun main(/*0*/ args: kotlin.Array<kotlin.String>): kotlin.Unit
    internal fun parse(/*0*/ cmd: kotlin.String): null_safety.Command?
    internal fun kotlin.Any.equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    internal fun kotlin.Any?.equals1(/*0*/ other: kotlin.Any?): kotlin.Boolean
    internal fun kotlin.Any.equals2(/*0*/ other: kotlin.Any?): kotlin.Boolean

    internal final class Command {
        public constructor Command()
        internal final val foo: kotlin.Int = 0
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

package outer {
    internal val kotlin.Int.abs: kotlin.Int
    internal val </*0*/ T> T.foo: T
    internal val kotlin.Int?.optval: kotlin.Unit
    internal fun test(): kotlin.Unit
    internal fun </*0*/ T : kotlin.Any, /*1*/ E> T.foo(/*0*/ x: E, /*1*/ y: outer.A): T
    internal fun kotlin.Int.foo(): kotlin.Int
    internal fun </*0*/ T> T.minus(/*0*/ t: T): kotlin.Int
    internal fun kotlin.Int?.optint(): kotlin.Unit
    internal fun outer.A.plus(/*0*/ a: kotlin.Any): kotlin.Unit
    internal fun outer.A.plus(/*0*/ a: kotlin.Int): kotlin.Unit

    internal final class A {
        public constructor A()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
package

package kt462 {
    public val topLevelVar: kotlin.Int = 11

    public final class T {
        public constructor T()
        public final val a: kotlin.Any
        public final var r: kotlin.Int
        public final var x: kotlin.Int
        public final val z: kotlin.Int
        public final fun bar(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public final fun foo(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public final class TestBackingFieldsVisibility {
        public constructor TestBackingFieldsVisibility()
        public final var a: kotlin.Int
        public abstract val w: kotlin.Int = 11
        public final val x: kotlin.Int = 11
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public final fun foo(): kotlin.Unit
        public final fun foo(/*0*/ a: kt462.TestBackingFieldsVisibility): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        public final inner class Inner {
            public constructor Inner()
            public final val z: kotlin.Int = 11
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
    }

    public abstract class TestInitializationThroughBackingField {
        public constructor TestInitializationThroughBackingField()
        public abstract var abstractVar: kotlin.Int
        public final var finalDefaultVar: kotlin.Int
        public open var openVar: kotlin.Int
        public final val valWithBackingField: kotlin.Int
        public final val valWithoutBackingField: kotlin.Int
        public final var varWithCustomSetter: kotlin.Int
        public final var varWithoutBackingField: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public abstract class TestInitializationWithoutBackingField {
        public constructor TestInitializationWithoutBackingField()
        public abstract var abstractVar: kotlin.Int
        public final var finalDefaultVar: kotlin.Int
        public open var openVar: kotlin.Int
        public final val valWithBackingField: kotlin.Int
        public final val valWithoutBackingField: kotlin.Int
        public final var varWithCustomSetter: kotlin.Int
        public final var varWithoutBackingField: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

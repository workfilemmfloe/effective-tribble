package

@empty() public val z: kotlin.Int
@empty() public fun foo(/*0*/ @empty() y: @empty() kotlin.Int): kotlin.Int

@empty() public final enum class My : kotlin.Enum<My> {
    @empty() enum entry FIRST

    @empty() enum entry SECOND

    @empty() private constructor My()
    public final override /*1*/ /*fake_override*/ val name: kotlin.String
    public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
    protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: My): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    @kotlin.Deprecated(level = DeprecationLevel.ERROR, message = "Use 'values()' function instead", replaceWith = kotlin.ReplaceWith(expression = "this.values()", imports = {})) public final /*synthesized*/ val values: kotlin.Array<My>
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): My
    public final /*synthesized*/ fun values(): kotlin.Array<My>
}

@empty() public final class correct {
    @empty() public constructor correct()
    public constructor correct(/*0*/ x: kotlin.Int, /*1*/ @empty() w: @empty() kotlin.Int)
    @empty() public final val x: kotlin.Int
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@empty() public final annotation class derived : kotlin.Annotation {
    public constructor derived()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@kotlin.annotation.Target(allowedTargets = {}) public final annotation class empty : kotlin.Annotation {
    public constructor empty()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

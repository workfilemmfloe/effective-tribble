package

internal var a: kotlin.Int
internal var a1: [ERROR : Type from delegate]
internal var b: kotlin.Int
internal var c: kotlin.String
internal val cObj: C
internal fun </*0*/ T> B.get(/*0*/ t: kotlin.Any?, /*1*/ p: kotlin.PropertyMetadata): T
kotlin.inline() internal fun </*0*/ reified T> C.get(/*0*/ t: kotlin.Any?, /*1*/ p: kotlin.PropertyMetadata): T
internal fun </*0*/ T> B.set(/*0*/ t: kotlin.Any?, /*1*/ p: kotlin.PropertyMetadata, /*2*/ x: T): kotlin.Unit
kotlin.inline() internal fun </*0*/ reified T> C.set(/*0*/ t: kotlin.Any?, /*1*/ p: kotlin.PropertyMetadata, /*2*/ x: T): kotlin.Unit

internal final class A {
    public constructor A()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    internal final fun </*0*/ T> get(/*0*/ t: kotlin.Any?, /*1*/ p: kotlin.PropertyMetadata): T
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    internal final fun </*0*/ T> set(/*0*/ t: kotlin.Any?, /*1*/ p: kotlin.PropertyMetadata, /*2*/ x: T): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

internal final class B {
    public constructor B()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

internal final class C {
    public constructor C()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

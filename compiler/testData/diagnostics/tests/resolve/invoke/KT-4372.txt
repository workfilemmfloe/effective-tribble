package

internal val </*0*/ T> T.javaClass: java.lang.Class<T>
internal fun </*0*/ reified T> javaClass(): java.lang.Class<T>
internal fun </*0*/ TInner, /*1*/ TOuter> Foo<TInner, TOuter>.invoke(/*0*/ name: kotlin.String, /*1*/ content: TInner.() -> kotlin.Unit): kotlin.Unit

internal final enum class EnumClass : kotlin.Enum<EnumClass> {
    private constructor EnumClass(/*0*/ x: kotlin.String)
    internal final val x: kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): EnumClass
    public final /*synthesized*/ fun values(): kotlin.Array<EnumClass>
}

internal final class Foo</*0*/ TInner, /*1*/ TOuter> {
    public constructor Foo</*0*/ TInner, /*1*/ TOuter>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    internal final fun invoke(/*0*/ content: TInner.() -> kotlin.Unit): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

internal object Y {
    private constructor Y()
    internal final val x: java.lang.Class<EnumClass>
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public class object <class-object-for-Y> : Y {
        private constructor <class-object-for-Y>()
        internal final override /*1*/ /*fake_override*/ val x: java.lang.Class<EnumClass>
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
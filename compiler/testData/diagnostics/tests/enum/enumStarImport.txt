package

internal fun f(/*0*/ e: enum.HappyEnum): kotlin.Unit

package enum {

    internal final enum class HappyEnum : kotlin.Enum<enum.HappyEnum> {
        public enum entry CASE1 : enum.HappyEnum {
            private constructor CASE1()
            public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: enum.HappyEnum): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

            public class object <class-object-for-CASE1> : enum.HappyEnum.CASE1 {
                private constructor <class-object-for-CASE1>()
                public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: enum.HappyEnum): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
        }

        public enum entry CASE2 : enum.HappyEnum {
            private constructor CASE2()
            public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: enum.HappyEnum): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

            public class object <class-object-for-CASE2> : enum.HappyEnum.CASE2 {
                private constructor <class-object-for-CASE2>()
                public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: enum.HappyEnum): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
        }

        private constructor HappyEnum()
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: enum.HappyEnum): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        // Static members
        public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): enum.HappyEnum
        public final /*synthesized*/ fun values(): kotlin.Array<enum.HappyEnum>
    }
}

package

public fun f(/*0*/ e: enum.HappyEnum): kotlin.Unit

package enum {

    public final enum class HappyEnum : kotlin.Enum<enum.HappyEnum> {
        enum entry CASE1

        enum entry CASE2

        private constructor HappyEnum()
        public final override /*1*/ /*fake_override*/ val name: kotlin.String
        public final override /*1*/ /*fake_override*/ val ordinal: kotlin.Int
        protected final override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
        public final override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: enum.HappyEnum): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        // Static members
        public final /*synthesized*/ val values: kotlin.Array<enum.HappyEnum>
        public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): enum.HappyEnum
        @kotlin.Deprecated(message = "Use 'values' property instead", replaceWith = kotlin.ReplaceWith(expression = "this.values", imports = {})) public final /*synthesized*/ fun values(): kotlin.Array<enum.HappyEnum>
    }
}

package

internal final enum class E : kotlin.Enum<E> {
    private constructor E()
    public open override /*1*/ fun compareTo(/*0*/ other: E): kotlin.Int
    public open override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ fun hashCode(): kotlin.Int
    public open override /*1*/ fun name(): kotlin.String
    public open override /*1*/ fun ordinal(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public enum entry ENTRY : E {
        private constructor ENTRY()
        public open override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: E): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun name(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        public class object <class-object-for-ENTRY> : E.ENTRY {
            private constructor <class-object-for-ENTRY>()
            public open override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: E): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun name(): kotlin.String
            public open override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
    }

    // Static members
    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): E
    public final /*synthesized*/ fun values(): kotlin.Array<E>
}

== foo ==
fun foo(c: Collection<Int>) {
    for (e in c) {
        {
            break
        }
    }
}
---------------------
L0:
  1 <START>
    v(c: Collection<Int>)
    magic[FAKE_INITIALIZER](c: Collection<Int>) -> <v0>
    w(c|<v0>)
  2 mark({ for (e in c) { { break } } })
  3 r(c) -> <v1>
    v(e)
L3:
    jmp?(L2)                                               NEXT:[read (Unit), magic[LOOP_RANGE_ITERATION](c|<v1>) -> <v2>]
L4 [loop entry point]:
L5 [body entry point]:
    magic[LOOP_RANGE_ITERATION](c|<v1>) -> <v2>            PREV:[jmp?(L2), jmp?(L4 [loop entry point])]
    w(e|<v2>)
    mark(for (e in c) { { break } })
  4 mark({ { break } })
    mark({ break })
    jmp?(L6)                                               NEXT:[r({ break }) -> <v3>, d({ break })]
    d({ break })                                           NEXT:[<SINK>]
L6:
    r({ break }) -> <v3>                                   PREV:[jmp?(L6)]
  3 jmp?(L4 [loop entry point])                            NEXT:[magic[LOOP_RANGE_ITERATION](c|<v1>) -> <v2>, read (Unit)]
L2:
    read (Unit)                                            PREV:[jmp?(L2), jmp(L2), jmp?(L4 [loop entry point])]
L1:
  1 <END>                                                  NEXT:[<SINK>]
error:
    <ERROR>                                                PREV:[]
sink:
    <SINK>                                                 PREV:[<ERROR>, <END>, d({ break })]
=====================
== anonymous_0 ==
{
            break
        }
---------------------
L7:
  5 <START>
  6 mark(break)
    jmp(L2)            NEXT:[read (Unit)]
- 5 ret(*|!<v0>) L8    PREV:[]
L8:
    <END>              NEXT:[<SINK>]         PREV:[]
error:
    <ERROR>            PREV:[]
sink:
    <SINK>             PREV:[<ERROR>, <END>]
=====================

== Bar ==
class Bar {
    fun invoke(x: Int, y: Int) {}
}
---------------------
=====================
== invoke ==
fun invoke(x: Int, y: Int) {}
---------------------
    <v0>: Int   NEW: magic[FAKE_INITIALIZER](x: Int) -> <v0>
    <v1>: Int   NEW: magic[FAKE_INITIALIZER](y: Int) -> <v1>
=====================
== Foo ==
class Foo {
    val set: Bar = Bar()
}
---------------------
Bar()   <v0>: Bar   NEW: call(Bar(), <init>) -> <v0>
=====================
== test1 ==
fun test1(foo: Foo) {
    foo[1] = 2
}
---------------------
                 <v0>: Foo   NEW: magic[FAKE_INITIALIZER](foo: Foo) -> <v0>
foo              <v1>: Foo   NEW: r(foo) -> <v1>
1                <v3>: Int   NEW: r(1) -> <v3>
foo[1]           <v2>: Bar   NEW: r(foo[1], set|<v1>) -> <v2>
2                <v4>: Int   NEW: r(2) -> <v4>
foo[1] = 2       <v5>: *     NEW: call(foo[1] = 2, invoke|<v2>, <v3>, <v4>) -> <v5>
{ foo[1] = 2 }   <v5>: *     COPY
=====================
== test2 ==
fun test2(foo: Foo, set: Foo.(Int, Int) -> Int) {
    foo[1] = 2
}
---------------------
                 <v0>: Foo                          NEW: magic[FAKE_INITIALIZER](foo: Foo) -> <v0>
                 <v1>: {<: Foo.(Int, Int) -> Int}   NEW: magic[FAKE_INITIALIZER](set: Foo.(Int, Int) -> Int) -> <v1>
foo              <v2>: Foo                          NEW: r(foo) -> <v2>
1                <v4>: Int                          NEW: r(1) -> <v4>
foo[1]           <v3>: Bar                          NEW: r(foo[1], set|<v2>) -> <v3>
2                <v5>: Int                          NEW: r(2) -> <v5>
foo[1] = 2       <v6>: *                            NEW: call(foo[1] = 2, invoke|<v3>, <v4>, <v5>) -> <v6>
{ foo[1] = 2 }   <v6>: *                            COPY
=====================

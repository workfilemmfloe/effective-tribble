== neq ==
fun neq(a: Int, b: Int) {
    if (a != b) {}
}
---------------------
L0:
  1 <START>
    v(a: Int)
    magic(a: Int) -> <v0>
    w(a|<v0>)
    v(b: Int)
    magic(b: Int) -> <v1>
    w(b|<v1>)
  2 mark({ if (a != b) {} })
    mark(if (a != b) {})
    r(a) -> <v2>
    r(b) -> <v3>
    mark(a != b)
    call(!=, equals|<v2>, <v3>) -> <v4>
    jf(L2|<v4>)                            NEXT:[read (Unit), mark({})]
  3 mark({})
    read (Unit)
  2 jmp(L3)                                NEXT:[<END>]
L2:
    read (Unit)                            PREV:[jf(L2|<v4>)]
L1:
L3:
  1 <END>                                  NEXT:[<SINK>]                                 PREV:[jmp(L3), read (Unit)]
error:
    <ERROR>                                PREV:[]
sink:
    <SINK>                                 PREV:[<ERROR>, <END>]
=====================

== illegalWhenBlock ==
fun illegalWhenBlock(a: Any): Any {
    when(a) {
        is Int -> return a
    }
}
---------------------
L0:
  1 <START>
    v(a: Any)
    magic(a: Any) -> <v0>
    w(a|<v0>)
  2 mark({ when(a) { is Int -> return a } })
    mark(when(a) { is Int -> return a })
    r(a) -> <v1>
    mark(is Int -> return a)
    magic(is Int|<v1>) -> <v2>
    jmp?(L4|<v2>)                               NEXT:[<END>, r(a) -> <v3>]
L3:
    r(a) -> <v3>
    ret(*|<v3>) L1                              NEXT:[<END>]
-   jmp(L2)                                     PREV:[]
L1:
L2:
L4:
  1 <END>                                       NEXT:[<SINK>]                                      PREV:[jmp?(L4|<v2>), ret(*|<v3>) L1]
error:
    <ERROR>                                     PREV:[]
sink:
    <SINK>                                      PREV:[<ERROR>, <END>]
=====================

== doCall ==
inline fun doCall(f: () -> Unit) = f()
---------------------
L0:
  1 <START>
    v(f: () -> Unit)
    magic[FAKE_INITIALIZER](f: () -> Unit) -> <v0>
    w(f|<v0>)
    r(f) -> <v1>
    mark(f())
    call(f(), invoke|<v1>) -> <v2>
    ret(*|<v2>) L1
L1:
    <END>                                             NEXT:[<SINK>]
error:
    <ERROR>                                           PREV:[]
sink:
    <SINK>                                            PREV:[<ERROR>, <END>]
=====================
== test1 ==
fun test1(nonLocal: String): String {
    val localResult = doCall {
        return nonLocal  //unreachable
    }
    return "NON_LOCAL_FAILED $localResult"  //unreachable
}
---------------------
L0:
  1 <START>
    v(nonLocal: String)
    magic[FAKE_INITIALIZER](nonLocal: String) -> <v0>
    w(nonLocal|<v0>)
  2 mark({ val localResult = doCall { return nonLocal //unreachable } return "NON_LOCAL_FAILED $localResult" //unreachable })
    v(val localResult = doCall { return nonLocal //unreachable })
    mark({ return nonLocal //unreachable })
    jmp?(L2)                                                                                                                     NEXT:[r({ return nonLocal //unreachable }) -> <v1>, d({ return nonLocal //unreachable })]
    d({ return nonLocal //unreachable })                                                                                         NEXT:[<SINK>]
L2 [after local declaration]:
    r({ return nonLocal //unreachable }) -> <v1>                                                                                 PREV:[jmp?(L2)]
    mark(doCall { return nonLocal //unreachable })
    call(doCall { return nonLocal //unreachable }, doCall|<v1>) -> <v2>
    w(localResult|<v2>)
    mark("NON_LOCAL_FAILED $localResult")
    r(localResult) -> <v3>
    magic[STRING_TEMPLATE]("NON_LOCAL_FAILED $localResult"|<v3>) -> <v4>
    ret(*|<v4>) L1
L1:
  1 <END>                                                                                                                        NEXT:[<SINK>]                                                                                                                       PREV:[ret(*|<v0>) L1, ret(*|<v4>) L1]
error:
    <ERROR>                                                                                                                      PREV:[]
sink:
    <SINK>                                                                                                                       PREV:[<ERROR>, <END>, d({ return nonLocal //unreachable })]
=====================
== anonymous_0 ==
{
        return nonLocal  //unreachable
    }
---------------------
L3:
  3 <START>
  4 mark(return nonLocal)
    r(nonLocal) -> <v0>
    ret(*|<v0>) L1           NEXT:[<END>]
L4:
  3 <END>                    NEXT:[<SINK>]                   PREV:[]
error:
    <ERROR>                  PREV:[]
sink:
    <SINK>                   PREV:[<ERROR>, <END>]
=====================
== doSomething ==
fun doSomething() {}
---------------------
L0:
  1 <START>
  2 mark({})
    read (Unit)
L1:
  1 <END>          NEXT:[<SINK>]
error:
    <ERROR>        PREV:[]
sink:
    <SINK>         PREV:[<ERROR>, <END>]
=====================
== test2 ==
fun test2() {
    fun f(x: Any?) = x
    f(null?.let { return })

    // false unreachable here
    doSomething()
}
---------------------
L0:
  1 <START>
  2 mark({ fun f(x: Any?) = x f(null?.let { return }) // false unreachable here doSomething() })
    jmp?(L2)                                                                                        NEXT:[mark(null?.let { return }), d(fun f(x: Any?) = x)]
    d(fun f(x: Any?) = x)                                                                           NEXT:[<SINK>]
L2 [after local declaration]:
    mark(null?.let { return })                                                                      PREV:[jmp?(L2)]
    jf(L5)                                                                                          NEXT:[mark(f(null?.let { return })), mark({ return })]
    mark({ return })
    jmp?(L6)                                                                                        NEXT:[r({ return }) -> <v0>, d({ return })]
    d({ return })                                                                                   NEXT:[<SINK>]
L6 [after local declaration]:
    r({ return }) -> <v0>                                                                           PREV:[jmp?(L6)]
    r(null) -> <v1>
    mark(let { return })
    magic[UNRESOLVED_CALL](let { return }|<v0>, !<v2>, <v1>) -> <v3>
L5 [result of call]:
    mark(f(null?.let { return }))                                                                   PREV:[jf(L5), magic[UNRESOLVED_CALL](let { return }|<v0>, !<v2>, <v1>) -> <v3>]
    call(f(null?.let { return }), f|<v3>) -> <v4>
    mark(doSomething())
    call(doSomething(), doSomething) -> <v5>
L1:
  1 <END>                                                                                           NEXT:[<SINK>]                                                                                          PREV:[ret L1, call(doSomething(), doSomething) -> <v5>]
error:
    <ERROR>                                                                                         PREV:[]
sink:
    <SINK>                                                                                          PREV:[<ERROR>, <END>, d(fun f(x: Any?) = x), d({ return })]
=====================
== f ==
fun f(x: Any?) = x
---------------------
L3:
  3 <START>
    v(x: Any?)
    magic[FAKE_INITIALIZER](x: Any?) -> <v0>
    w(x|<v0>)
    r(x) -> <v1>
    ret(*|<v1>) L4
L4:
    <END>                                       NEXT:[<SINK>]
error:
    <ERROR>                                     PREV:[]
sink:
    <SINK>                                      PREV:[<ERROR>, <END>]
=====================
== anonymous_1 ==
{ return }
---------------------
L7:
  3 <START>
  4 mark(return)
    ret L1             NEXT:[<END>]
- 3 ret(*|!<v0>) L8    PREV:[]
L8:
    <END>              NEXT:[<SINK>]          PREV:[]
error:
    <ERROR>            PREV:[]
sink:
    <SINK>             PREV:[<ERROR>, <END>]
=====================
== test3 ==
fun test3(x: Any?): Boolean =
    x?.let {
        return true
    } ?: false
---------------------
L0:
  1 <START>
    v(x: Any?)
    magic[FAKE_INITIALIZER](x: Any?) -> <v0>
    w(x|<v0>)
    mark(x?.let { return true })
    jf(L2)                                                                   NEXT:[mark(x?.let { return true } ?: false), mark({ return true })]
    mark({ return true })
    jmp?(L3)                                                                 NEXT:[r({ return true }) -> <v1>, d({ return true })]
    d({ return true })                                                       NEXT:[<SINK>]
L3 [after local declaration]:
    r({ return true }) -> <v1>                                               PREV:[jmp?(L3)]
    r(x) -> <v2>
    mark(let { return true })
    magic[UNRESOLVED_CALL](let { return true }|<v1>, !<v3>, <v2>) -> <v4>
L2 [result of call]:
    mark(x?.let { return true } ?: false)                                    PREV:[jf(L2), magic[UNRESOLVED_CALL](let { return true }|<v1>, !<v3>, <v2>) -> <v4>]
    jt(L6|<v4>)                                                              NEXT:[r(false) -> <v5>, merge(x?.let { return true } ?: false|<v4>, <v5>) -> <v6>]
    r(false) -> <v5>
L6 [after elvis operator]:
    merge(x?.let { return true } ?: false|<v4>, <v5>) -> <v6>                PREV:[jt(L6|<v4>), r(false) -> <v5>]
    ret(*|<v6>) L1
L1:
    <END>                                                                    NEXT:[<SINK>]                                                                         PREV:[ret(*|<v0>) L1, ret(*|<v6>) L1]
error:
    <ERROR>                                                                  PREV:[]
sink:
    <SINK>                                                                   PREV:[<ERROR>, <END>, d({ return true })]
=====================
== anonymous_2 ==
{
        return true
    }
---------------------
L4:
  2 <START>
  3 mark(return true)
    r(true) -> <v0>
    ret(*|<v0>) L1       NEXT:[<END>]
- 2 ret(*|!<v1>) L5      PREV:[]
L5:
    <END>                NEXT:[<SINK>]               PREV:[]
error:
    <ERROR>              PREV:[]
sink:
    <SINK>               PREV:[<ERROR>, <END>]
=====================

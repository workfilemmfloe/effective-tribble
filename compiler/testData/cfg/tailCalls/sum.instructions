== sum ==
tailRecursive fun sum(x: Long, sum: Long): Long {
    if (x == 0.toLong()) return sum
    return sum(x - 1, sum + x)
}
---------------------
L0:
  1 <START>
    v(x: Long)
    magic(x: Long) -> <v0>
    w(x|<v0>)
    v(sum: Long)
    magic(sum: Long) -> <v1>
    w(sum|<v1>)
  2 mark({ if (x == 0.toLong()) return sum return sum(x - 1, sum + x) })
    mark(if (x == 0.toLong()) return sum)
    r(x) -> <v2>
    mark(0.toLong())
    r(0) -> <v3>
    mark(toLong())
    call(toLong, toLong|<v3>) -> <v4>
    mark(x == 0.toLong())
    call(==, equals|<v2>, <v4>) -> <v5>
    jf(L2|<v5>)                                                             NEXT:[read (Unit), r(sum) -> <v6>]
    r(sum) -> <v6>
    ret(*|<v6>) L1                                                          NEXT:[<END>]
-   jmp(L3)                                                                 NEXT:[r(x) -> <v7>]                                                            PREV:[]
L2:
    read (Unit)                                                             PREV:[jf(L2|<v5>)]
L3:
    r(x) -> <v7>
    r(1) -> <v8>
    mark(x - 1)
    call(-, minus|<v7>, <v8>) -> <v9>
    r(sum) -> <v10>
    r(x) -> <v11>
    mark(sum + x)
    call(+, plus|<v10>, <v11>) -> <v12>
    mark(sum(x - 1, sum + x))
    call(sum, sum|<v9>, <v12>) -> <v13>
    ret(*|<v13>) L1
L1:
  1 <END>                                                                   NEXT:[<SINK>]                                                                  PREV:[ret(*|<v6>) L1, ret(*|<v13>) L1]
error:
    <ERROR>                                                                 PREV:[]
sink:
    <SINK>                                                                  PREV:[<ERROR>, <END>]
=====================

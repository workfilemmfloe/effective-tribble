package test

public open class DefaultArgumentInEnumConstructor {
    public constructor DefaultArgumentInEnumConstructor()

    // Static members
    public/*package*/ final var entry: test.K!
}

public final enum class K : kotlin.Enum<test.K> {
    enum entry ENTRY

    private constructor K(/*0*/ kotlin.String = ...)
    private final val default: kotlin.String
    public final /*fake_override*/ val name: kotlin.String
    public final /*fake_override*/ val ordinal: kotlin.Int
    protected final /*fake_override*/ fun clone(): kotlin.Any
    public final /*fake_override*/ fun compareTo(/*0*/ test.K): kotlin.Int

    // Static members
    public final /*synthesized*/ val values: kotlin.Array<test.K>
    public final /*synthesized*/ fun valueOf(/*0*/ kotlin.String): test.K
    @kotlin.Deprecated(message = "Use 'values' property instead", replaceWith = kotlin.ReplaceWith(expression = "this.values", imports = {})) public final /*synthesized*/ fun values(): kotlin.Array<test.K>
}

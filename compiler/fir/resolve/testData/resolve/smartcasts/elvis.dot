digraph elvis_kt {
  graph [splines=ortho nodesep=3]
  node [shape=box penwidth=2]
  edge [penwidth=2]

  subgraph cluster_0 {
    color=red
    0 [label="Enter function foo" style="filled" fillcolor=red];
    1 [label="Exit function foo" style="filled" fillcolor=red];
  }

  0 -> {1};

  subgraph cluster_1 {
    color=red
    2 [label="Enter function getter" style="filled" fillcolor=red];
    3 [label="Exit function getter" style="filled" fillcolor=red];
  }

  2 -> {3};

  subgraph cluster_2 {
    color=red
    4 [label="Enter property" style="filled" fillcolor=red];
    5 [label="Exit property" style="filled" fillcolor=red];
  }

  4 -> {5};

  subgraph cluster_3 {
    color=red
    6 [label="Enter function test_1" style="filled" fillcolor=red];
    subgraph cluster_4 {
      color=blue
      7 [label="Enter block"];
      subgraph cluster_5 {
        color=blue
        8 [label="Enter when"];
        subgraph cluster_6 {
          color=blue
          9 [label="Enter when branch condition "];
          subgraph cluster_7 {
            color=blue
            10 [label="Enter when"];
            11 [label="Access variable R|<local>/x|"];
            12 [label="Access variable R|/A.b|"];
            13 [label="Variable declaration: lval <elvis>: R|kotlin/Boolean?|"];
            subgraph cluster_8 {
              color=blue
              14 [label="Enter when branch condition "];
              15 [label="Const: Null(null)"];
              16 [label="Operator =="];
              17 [label="Exit when branch condition"];
            }
            subgraph cluster_9 {
              color=blue
              18 [label="Enter when branch condition else"];
              19 [label="Exit when branch condition"];
            }
            20 [label="Enter when branch result"];
            subgraph cluster_10 {
              color=blue
              21 [label="Enter block"];
              22 [label="Access variable R|<local>/<elvis>|"];
              23 [label="Exit block"];
            }
            24 [label="Exit when branch result"];
            25 [label="Enter when branch result"];
            subgraph cluster_11 {
              color=blue
              26 [label="Enter block"];
              27 [label="Jump: ^test_1 Unit"];
              28 [label="Stub" style="filled" fillcolor=gray];
              29 [label="Exit block" style="filled" fillcolor=gray];
            }
            30 [label="Exit when branch result" style="filled" fillcolor=gray];
            31 [label="Exit when"];
          }
          32 [label="Exit when branch condition"];
        }
        33 [label="Synthetic else branch"];
        34 [label="Enter when branch result"];
        subgraph cluster_12 {
          color=blue
          35 [label="Enter block"];
          36 [label="Access variable R|<local>/x|"];
          37 [label="Function call: R|<local>/x|.R|/A.foo|()"];
          38 [label="Exit block"];
        }
        39 [label="Exit when branch result"];
        40 [label="Exit when"];
      }
      41 [label="Exit block"];
    }
    42 [label="Exit function test_1" style="filled" fillcolor=red];
  }

  6 -> {7};
  7 -> {8};
  8 -> {9};
  9 -> {10};
  10 -> {11};
  11 -> {12};
  12 -> {13};
  13 -> {14};
  14 -> {15};
  15 -> {16};
  16 -> {17};
  17 -> {25 18};
  18 -> {19};
  19 -> {20};
  20 -> {21};
  21 -> {22};
  22 -> {23};
  23 -> {24};
  24 -> {31};
  25 -> {26};
  26 -> {27};
  27 -> {42};
  27 -> {28} [style=dotted];
  28 -> {29} [style=dotted];
  29 -> {30} [style=dotted];
  30 -> {31} [style=dotted];
  31 -> {32};
  32 -> {34 33};
  33 -> {40};
  34 -> {35};
  35 -> {36};
  36 -> {37};
  37 -> {38};
  38 -> {39};
  39 -> {40};
  40 -> {41};
  41 -> {42};

  subgraph cluster_13 {
    color=red
    43 [label="Enter function test2" style="filled" fillcolor=red];
    subgraph cluster_14 {
      color=blue
      44 [label="Enter block"];
      subgraph cluster_15 {
        color=blue
        45 [label="Enter when"];
        subgraph cluster_16 {
          color=blue
          46 [label="Enter when branch condition "];
          47 [label="Access variable R|<local>/b|"];
          48 [label="Type operator: b !is String"];
          49 [label="Exit when branch condition"];
        }
        50 [label="Synthetic else branch"];
        51 [label="Enter when branch result"];
        subgraph cluster_17 {
          color=blue
          52 [label="Enter block"];
          53 [label="Const: String()"];
          54 [label="Jump: ^test2 String()"];
          55 [label="Stub" style="filled" fillcolor=gray];
          56 [label="Exit block" style="filled" fillcolor=gray];
        }
        57 [label="Exit when branch result" style="filled" fillcolor=gray];
        58 [label="Exit when"];
      }
      subgraph cluster_18 {
        color=blue
        59 [label="Enter when"];
        subgraph cluster_19 {
          color=blue
          60 [label="Enter when branch condition "];
          61 [label="Access variable R|<local>/a|"];
          62 [label="Type operator: a !is String?"];
          63 [label="Exit when branch condition"];
        }
        64 [label="Synthetic else branch"];
        65 [label="Enter when branch result"];
        subgraph cluster_20 {
          color=blue
          66 [label="Enter block"];
          67 [label="Const: String()"];
          68 [label="Jump: ^test2 String()"];
          69 [label="Stub" style="filled" fillcolor=gray];
          70 [label="Exit block" style="filled" fillcolor=gray];
        }
        71 [label="Exit when branch result" style="filled" fillcolor=gray];
        72 [label="Exit when"];
      }
      subgraph cluster_21 {
        color=blue
        73 [label="Enter when"];
        74 [label="Access variable R|<local>/a|"];
        75 [label="Variable declaration: lval <elvis>: R|kotlin/String?|"];
        subgraph cluster_22 {
          color=blue
          76 [label="Enter when branch condition "];
          77 [label="Const: Null(null)"];
          78 [label="Operator =="];
          79 [label="Exit when branch condition"];
        }
        subgraph cluster_23 {
          color=blue
          80 [label="Enter when branch condition else"];
          81 [label="Exit when branch condition"];
        }
        82 [label="Enter when branch result"];
        subgraph cluster_24 {
          color=blue
          83 [label="Enter block"];
          84 [label="Access variable R|<local>/<elvis>|"];
          85 [label="Exit block"];
        }
        86 [label="Exit when branch result"];
        87 [label="Enter when branch result"];
        subgraph cluster_25 {
          color=blue
          88 [label="Enter block"];
          89 [label="Access variable R|<local>/b|"];
          90 [label="Exit block"];
        }
        91 [label="Exit when branch result"];
        92 [label="Exit when"];
      }
      93 [label="Jump: ^test2 when (lval <elvis>: R|kotlin/String?| = R|<local>/a|) {
    ==($subj$, Null(null)) ->  {
        R|<local>/b|
    }
    else ->  {
        R|<local>/<elvis>|
    }
}
"];
      94 [label="Stub" style="filled" fillcolor=gray];
      95 [label="Exit block" style="filled" fillcolor=gray];
    }
    96 [label="Exit function test2" style="filled" fillcolor=red];
  }

  43 -> {44};
  44 -> {45};
  45 -> {46};
  46 -> {47};
  47 -> {48};
  48 -> {49};
  49 -> {51 50};
  50 -> {58};
  51 -> {52};
  52 -> {53};
  53 -> {54};
  54 -> {96};
  54 -> {55} [style=dotted];
  55 -> {56} [style=dotted];
  56 -> {57} [style=dotted];
  57 -> {58} [style=dotted];
  58 -> {59};
  59 -> {60};
  60 -> {61};
  61 -> {62};
  62 -> {63};
  63 -> {65 64};
  64 -> {72};
  65 -> {66};
  66 -> {67};
  67 -> {68};
  68 -> {96};
  68 -> {69} [style=dotted];
  69 -> {70} [style=dotted];
  70 -> {71} [style=dotted];
  71 -> {72} [style=dotted];
  72 -> {73};
  73 -> {74};
  74 -> {75};
  75 -> {76};
  76 -> {77};
  77 -> {78};
  78 -> {79};
  79 -> {87 80};
  80 -> {81};
  81 -> {82};
  82 -> {83};
  83 -> {84};
  84 -> {85};
  85 -> {86};
  86 -> {92};
  87 -> {88};
  88 -> {89};
  89 -> {90};
  90 -> {91};
  91 -> {92};
  92 -> {93};
  93 -> {96};
  93 -> {94} [style=dotted];
  94 -> {95} [style=dotted];
  95 -> {96} [style=dotted];

}

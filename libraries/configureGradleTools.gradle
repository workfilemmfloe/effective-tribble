import de.undercouch.gradle.tasks.download.Download

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:4.0.0'
    }
}

configure([project(':kotlin-gradle-plugin'), project(':kotlin-allopen'), project(':kotlin-noarg'), project(':kotlin-serialization')]) { project ->
    apply plugin: 'com.gradle.plugin-publish'

    afterEvaluate {
        if (project.hasProperty('publishPluginsVersion')) {
            configurations.archives.artifacts.all {
                version = project.getProperty('publishPluginsVersion')
            }
        }

        if (project.hasProperty("${project.name}-jar")) {
            apply plugin: 'de.undercouch.download'

            def artifactName = "${project.name}-${project.version}.jar"
            def prebuiltJarFile = file("$buildDir/prebuiltJar/$artifactName")

            task downloadPrebuiltJar(type: Download) {
                def artifactUrlSuffix =
                        project.group.split("\\.").join("/") + "/" + project.name + "/" + project.version + "/" + artifactName
                src "https://repo.maven.apache.org/maven2/$artifactUrlSuffix"
                dest prebuiltJarFile
                overwrite true
            }

            println("Using pre-built artifact for ${project.name}")
            configurations.archives.artifacts.clear()

            artifacts {
                archives(prebuiltJarFile) {
                    name project.name
                    builtBy downloadPrebuiltJar
                }
            }

            publishPlugins.dependsOn(downloadPrebuiltJar)
        }

        publishPlugins.doFirst {
            assert !kotlinVersion.contains('SNAPSHOT')
        }

        pluginBundle {
            website = 'https://kotlinlang.org/'
            vcsUrl = 'https://github.com/JetBrains/kotlin/'
            description = 'Kotlin plugins for Gradle'
            tags = ['kotlin']

            mavenCoordinates {
                groupId = "org.jetbrains.kotlin"
            }
        }
    }
}

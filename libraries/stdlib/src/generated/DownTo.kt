package kotlin

//
// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt
// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib
//


public inline fun Byte.downTo(to: Byte): ByteRange {
    return if (this >= to) ByteRange(this, to - this - 1) else ByteRange.EMPTY
}

public inline fun Byte.downTo(to: Char): CharRange {
    return if (this >= to) CharRange(this.toChar(), to - this - 1) else CharRange.EMPTY
}

public inline fun Byte.downTo(to: Short): ShortRange {
    return if (this >= to) ShortRange(this.toShort(), to - this - 1) else ShortRange.EMPTY
}

public inline fun Byte.downTo(to: Int): IntRange {
    return if (this >= to) IntRange(this.toInt(), to - this - 1) else IntRange.EMPTY
}

public inline fun Byte.downTo(to: Long): LongRange {
    return if (this >= to) LongRange(this.toLong(), to - this - 1) else LongRange.EMPTY
}

public inline fun Byte.downTo(to: Float): FloatRange {
    return FloatRange(this.toFloat(), to - this)
}

public inline fun Byte.downTo(to: Double): DoubleRange {
    return DoubleRange(this.toDouble(), to - this)
}

public inline fun Char.downTo(to: Byte): CharRange {
    return if (this >= to) CharRange(this, to - this - 1) else CharRange.EMPTY
}

public inline fun Char.downTo(to: Char): CharRange {
    return if (this >= to) CharRange(this, to - this - 1) else CharRange.EMPTY
}

public inline fun Char.downTo(to: Short): ShortRange {
    return if (this >= to) ShortRange(this.toShort(), to - this - 1) else ShortRange.EMPTY
}

public inline fun Char.downTo(to: Int): IntRange {
    return if (this >= to) IntRange(this.toInt(), to - this - 1) else IntRange.EMPTY
}

public inline fun Char.downTo(to: Long): LongRange {
    return if (this >= to) LongRange(this.toLong(), to - this - 1) else LongRange.EMPTY
}

public inline fun Char.downTo(to: Float): FloatRange {
    return FloatRange(this.toFloat(), to - this)
}

public inline fun Char.downTo(to: Double): DoubleRange {
    return DoubleRange(this.toDouble(), to - this)
}

public inline fun Short.downTo(to: Byte): ShortRange {
    return if (this >= to) ShortRange(this, to - this - 1) else ShortRange.EMPTY
}

public inline fun Short.downTo(to: Char): ShortRange {
    return if (this >= to) ShortRange(this, to - this - 1) else ShortRange.EMPTY
}

public inline fun Short.downTo(to: Short): ShortRange {
    return if (this >= to) ShortRange(this, to - this - 1) else ShortRange.EMPTY
}

public inline fun Short.downTo(to: Int): IntRange {
    return if (this >= to) IntRange(this.toInt(), to - this - 1) else IntRange.EMPTY
}

public inline fun Short.downTo(to: Long): LongRange {
    return if (this >= to) LongRange(this.toLong(), to - this - 1) else LongRange.EMPTY
}

public inline fun Short.downTo(to: Float): FloatRange {
    return FloatRange(this.toFloat(), to - this)
}

public inline fun Short.downTo(to: Double): DoubleRange {
    return DoubleRange(this.toDouble(), to - this)
}

public inline fun Int.downTo(to: Byte): IntRange {
    return if (this >= to) IntRange(this, to - this - 1) else IntRange.EMPTY
}

public inline fun Int.downTo(to: Char): IntRange {
    return if (this >= to) IntRange(this, to - this - 1) else IntRange.EMPTY
}

public inline fun Int.downTo(to: Short): IntRange {
    return if (this >= to) IntRange(this, to - this - 1) else IntRange.EMPTY
}

public inline fun Int.downTo(to: Int): IntRange {
    return if (this >= to) IntRange(this, to - this - 1) else IntRange.EMPTY
}

public inline fun Int.downTo(to: Long): LongRange {
    return if (this >= to) LongRange(this.toLong(), to - this - 1) else LongRange.EMPTY
}

public inline fun Int.downTo(to: Float): FloatRange {
    return FloatRange(this.toFloat(), to - this)
}

public inline fun Int.downTo(to: Double): DoubleRange {
    return DoubleRange(this.toDouble(), to - this)
}

public inline fun Long.downTo(to: Byte): LongRange {
    return if (this >= to) LongRange(this, to - this - 1) else LongRange.EMPTY
}

public inline fun Long.downTo(to: Char): LongRange {
    return if (this >= to) LongRange(this, to - this - 1) else LongRange.EMPTY
}

public inline fun Long.downTo(to: Short): LongRange {
    return if (this >= to) LongRange(this, to - this - 1) else LongRange.EMPTY
}

public inline fun Long.downTo(to: Int): LongRange {
    return if (this >= to) LongRange(this, to - this - 1) else LongRange.EMPTY
}

public inline fun Long.downTo(to: Long): LongRange {
    return if (this >= to) LongRange(this, to - this - 1) else LongRange.EMPTY
}

public inline fun Long.downTo(to: Float): FloatRange {
    return FloatRange(this.toFloat(), to - this)
}

public inline fun Long.downTo(to: Double): DoubleRange {
    return DoubleRange(this.toDouble(), to - this)
}

public inline fun Float.downTo(to: Byte): FloatRange {
    return FloatRange(this, to - this)
}

public inline fun Float.downTo(to: Char): FloatRange {
    return FloatRange(this, to - this)
}

public inline fun Float.downTo(to: Short): FloatRange {
    return FloatRange(this, to - this)
}

public inline fun Float.downTo(to: Int): FloatRange {
    return FloatRange(this, to - this)
}

public inline fun Float.downTo(to: Long): FloatRange {
    return FloatRange(this, to - this)
}

public inline fun Float.downTo(to: Float): FloatRange {
    return FloatRange(this, to - this)
}

public inline fun Float.downTo(to: Double): DoubleRange {
    return DoubleRange(this.toDouble(), to - this)
}

public inline fun Double.downTo(to: Byte): DoubleRange {
    return DoubleRange(this, to - this)
}

public inline fun Double.downTo(to: Char): DoubleRange {
    return DoubleRange(this, to - this)
}

public inline fun Double.downTo(to: Short): DoubleRange {
    return DoubleRange(this, to - this)
}

public inline fun Double.downTo(to: Int): DoubleRange {
    return DoubleRange(this, to - this)
}

public inline fun Double.downTo(to: Long): DoubleRange {
    return DoubleRange(this, to - this)
}

public inline fun Double.downTo(to: Float): DoubleRange {
    return DoubleRange(this, to - this)
}

public inline fun Double.downTo(to: Double): DoubleRange {
    return DoubleRange(this, to - this)
}

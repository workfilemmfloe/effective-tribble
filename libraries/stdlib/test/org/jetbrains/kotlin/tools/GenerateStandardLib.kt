package org.jetbrains.kotlin.tools

import java.io.*

private val COMMON_AUTOGENERATED_WARNING: String = """//
// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt
// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib
//"""

fun generateFile(outFile: File, header: String, inputFile: File, f: (String)-> String) {
    generateFile(outFile, header, arrayList(inputFile), f)
}

fun generateFile(outFile: File, header: String, inputFile: File, jvmFile: File, f: (String)-> String) {
    generateFile(outFile, header, arrayList(inputFile, jvmFile), f)
}

fun generateFile(outFile: File, header: String, inputFiles: List<File>, f: (String)-> String) {
    outFile.getParentFile()?.mkdirs()
    val writer = PrintWriter(FileWriter(outFile))
    try {
        writer.println(header)

        for (file in inputFiles) {
            writer.println("""
$COMMON_AUTOGENERATED_WARNING
// Generated from input file: $file
//
""")

        println("Parsing $file and writing $outFile")
        val reader = FileReader(file).buffered()
        try {
            // TODO ideally we'd use a filterNot() here :)
            val iter = reader.lineIterator()
            while (iter.hasNext()) {
                val line = iter.next()

                if (line.startsWith("package")) continue

                val xform = f(line)
                writer.println(xform)
            }
        } finally {
            reader.close()
            reader.close()
        }
        }
    } finally {
        writer.close()
    }
}


/**
 * Generates methods in the standard library which are mostly identical
 * but just using a different input kind.
 *
 * Kinda like mimicking source macros here, but this avoids the inefficiency of type conversions
 * at runtime.
 */
fun main(args: Array<String>) {
    var srcDir = File("src/kotlin")
    if (!srcDir.exists()) {
        srcDir = File("stdlib/src/kotlin")
        require(srcDir.exists(), "Could not find the src/kotlin directory!")
    }
    val outDir = File(srcDir, "../generated")

    val jsCoreDir = File(srcDir, "../../../../js/js.libraries/src/core")
    require(jsCoreDir.exists())
    generateDomAPI(File(jsCoreDir, "dom.kt"))
    generateDomEventsAPI(File(jsCoreDir, "domEvents.kt"))

    val otherArrayNames = arrayList("Boolean", "Byte", "Char", "Short", "Int", "Long", "Float", "Double")

    // Iterables - Generic iterable stuff
    generateFile(File(outDir, "ArraysFromIterables.kt"), "package kotlin\n", File(srcDir, "Iterables.kt")) {
        it.replaceAll("Iterable<T", "Array<T").
            replaceAll("Iterable<T", "Array<T")
    }
    generateFile(File(outDir, "ArraysFromIterablesJVM.kt"), "package kotlin\n", File(srcDir, "IterablesJVM.kt")) {
        it.replaceAll("Iterable<T", "Array<T").
            replaceAll("Iterable<T", "Array<T")
    }
    generateFile(File(outDir, "ArraysFromIterablesLazy.kt"), "package kotlin\n", File(srcDir, "IterablesLazy.kt")) {
        it.replaceAll("Iterable<T", "Array<T")
    }
    for (arrayName in otherArrayNames) {
        fun replace(it: String): String {
            replaceGenerics(arrayName, it.replaceAll("<T> Iterable<T>", "${arrayName}Array").
            replaceAll("<T> Iterable<T\\?>", "${arrayName}Array").
            replaceAll("Iterable<T\\?>", "${arrayName}Array").
            replaceAll("Iterable<T>", "${arrayName}Array"))
        }

        generateFile(File(outDir, "${arrayName}ArraysFromIterables.kt"), "package kotlin\n", File(srcDir, "Iterables.kt")) {
            replace(it)
        }
        generateFile(File(outDir, "${arrayName}ArraysFromIterablesJVM.kt"), "package kotlin\n", File(srcDir, "IterablesJVM.kt")) {
            replace(it)
        }
        generateFile(File(outDir, "${arrayName}ArraysFromIterablesLazy.kt"), "package kotlin\n", File(srcDir, "IterablesLazy.kt")) {
            replace(it)
        }
    }

    generateFile(File(outDir, "IteratorsFromIterables.kt"), "package kotlin", File(srcDir, "Iterables.kt")) {
        it.replaceAll("Iterable<T", "Iterator<T")
    }
    generateFile(File(outDir, "IteratorsFromIterablesJVM.kt"), "package kotlin", File(srcDir, "IterablesJVM.kt")) {
        it.replaceAll("Iterable<T", "Iterator<T")
    }


    // Collections - methods returning a collection of the same input size (if its a collection)
    generateFile(File(outDir, "ArraysFromCollections.kt"), "package kotlin", File(srcDir, "Collections.kt")) {
        it.replaceAll("Collection<T", "Array<T")
    }
    generateFile(File(outDir, "ArraysFromCollectionsJVM.kt"), "package kotlin", File(srcDir, "CollectionsJVM.kt")) {
        it.replaceAll("Collection<T", "Array<T")
    }
    for (arrayName in otherArrayNames) {
        generateFile(File(outDir, "${arrayName}ArraysFromCollections.kt"), "package kotlin", File(srcDir, "Collections.kt")) {
            replaceGenerics(arrayName, it.replaceAll("<T> Collection<T>", "${arrayName}Array").
            replaceAll("Collection<T>", "${arrayName}Array"))
        }
        generateFile(File(outDir, "${arrayName}ArraysFromCollectionsJVM.kt"), "package kotlin", File(srcDir, "CollectionsJVM.kt")) {
            replaceGenerics(arrayName, it.replaceAll("<T> Collection<T>", "${arrayName}Array").
            replaceAll("Collection<T>", "${arrayName}Array"))
        }
    }

    generateFile(File(outDir, "StandardFromCollections.kt"), "package kotlin", File(srcDir, "Collections.kt")) {
        it.replaceAll("Collection<T", "Iterable<T").replaceAll("(this.size)", "")
    }
    generateFile(File(outDir, "StandardFromCollectionsJVM.kt"), "package kotlin",  File(srcDir, "CollectionsJVM.kt")) {
        it.replaceAll("Collection<T", "Iterable<T").replaceAll("(this.size)", "")
    }

    generateDownTos(File(outDir, "DownTo.kt"), "package kotlin")
}

// Pretty hacky way to code generate; ideally we'd be using the AST and just changing the function prototypes
fun replaceGenerics(arrayName: String, it: String): String {
    return it.replaceAll(" <in T>", " ").replaceAll("<in T, ", "<").replaceAll("<T, ", "<").replaceAll("<T,", "<").
    replaceAll(" <T> ", " ").
    replaceAll("<T>", "<${arrayName}>").replaceAll("<in T>", "<${arrayName}>").
    replaceAll("\\(T\\)", "(${arrayName})").replaceAll("T\\?", "${arrayName}?").
    replaceAll("T,", "${arrayName},").
    replaceAll("T\\)", "${arrayName})").
    replaceAll(" T ", " ${arrayName} ")
}


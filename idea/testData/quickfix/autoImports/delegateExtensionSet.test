// FILE: first.before.kt
// "Import" "true"
// ERROR: Missing 'setValue(testing.BigTest, kotlin.reflect.KProperty<*>, kotlin.Int)' method on delegate of type 'some.DelegateImpl<kotlin.Int>'

package testing

import some.DelegateImpl
import some.getValue

class BigTest {
    var a by <caret>DelegateImpl<Int>()
}


// FILE: second.kt
package some

import kotlin.reflect.KProperty

class DelegateImpl<T> {
    val value: T = null!!
}

operator fun <T> DelegateImpl<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value
operator fun <T> DelegateImpl<T>.setValue(thisRef: Any, property: KProperty<*>, t: T) {}



// FILE: first.after.kt
// "Import" "true"
// ERROR: Missing 'setValue(testing.BigTest, kotlin.reflect.KProperty<*>, kotlin.Int)' method on delegate of type 'some.DelegateImpl<kotlin.Int>'

package testing

import some.DelegateImpl
import some.getValue
import some.setValue

class BigTest {
    var a by <caret>DelegateImpl<Int>()
}

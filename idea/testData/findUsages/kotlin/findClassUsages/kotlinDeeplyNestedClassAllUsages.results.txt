Class/object property type (6: 21) var next: Inner.A? = Inner.A()
Field declaration (6: 11) Inner.A next = new Inner.A();
Function return types (19: 26) fun getNext(): Inner.A? {
Function return types (40: 22) fun Any.toA(): Inner.A? {
Local variable declaration (15: 23) val aa: Inner.A = a
Nested class/object (10: 15) Inner.A.bar = ""
Nested class/object (11: 15) Inner.A.foo()
Nested class/object (5: 37) public class X(bar: String? = Inner.A.bar): Inner.A() {
Nested class/object (7: 32) val myBar: String? = Inner.A.bar
New instance creation (36: 30) fun X.bar(a: Inner.A = Inner.A()) {
New instance creation (6: 30) Inner.A next = new Inner.A();
New instance creation (6: 32) var next: Inner.A? = Inner.A()
Parameter type (14: 22) fun foo(a: Inner.A) {
Parameter type (36: 20) fun X.bar(a: Inner.A = Inner.A()) {
Super type qualifier (24: 21) super<Inner.A>.foo()
Supertype (27: 25) class object: Inner.A() {
Supertype (32: 17) object O: Inner.A() {
Supertype (5: 51) public class X(bar: String? = Inner.A.bar): Inner.A() {
Target type of 'is' operation (41: 30) return if (this is Inner.A) this as Inner.A else null
Usage in cast target type (41: 47) return if (this is Inner.A) this as Inner.A else null
Usage in extends/implements clause (5: 30) public class X extends Inner.A {

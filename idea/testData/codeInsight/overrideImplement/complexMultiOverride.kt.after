open class Base<A, B, C>() {
    open val method : (A?) -> A = { it!! }
    open fun foo(value : B) : B = value
    open fun bar(value : () -> C) : (String) -> C = { value() }
}

class C : Base<String, C, Unit>() {

    override fun bar(value: () -> Unit): (String) -> Unit {
        return super<Base>.bar(value)
    }
    override fun equals(other: Any?): Boolean {
        return super<Base>.equals(other)
    }
    override fun foo(value: C): C {
        return super<Base>.foo(value)
    }
    override fun hashCode(): Int {
        return super<Base>.hashCode()
    }
    override val method: (String?) -> String = ?
    override fun toString(): String {
        return super<Base>.toString()
    }
}

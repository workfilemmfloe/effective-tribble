/*
 * Copyright 2010-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.kotlin.completion;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.InnerTestClasses;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.JetTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/completion/smart")
@TestDataPath("$PROJECT_ROOT")
@InnerTestClasses({
        JvmSmartCompletionTestGenerated.AfterAs.class,
        JvmSmartCompletionTestGenerated.AnonymousObject.class,
        JvmSmartCompletionTestGenerated.Constructor.class,
        JvmSmartCompletionTestGenerated.ForLoopRange.class,
        JvmSmartCompletionTestGenerated.FunctionLiterals.class,
        JvmSmartCompletionTestGenerated.FunctionReference.class,
        JvmSmartCompletionTestGenerated.Generics.class,
        JvmSmartCompletionTestGenerated.HeuristicSignatures.class,
        JvmSmartCompletionTestGenerated.IfValue.class,
        JvmSmartCompletionTestGenerated.InElvisOperator.class,
        JvmSmartCompletionTestGenerated.InOperator.class,
        JvmSmartCompletionTestGenerated.Inheritors.class,
        JvmSmartCompletionTestGenerated.MultipleArgsItem.class,
        JvmSmartCompletionTestGenerated.SmartCasts.class,
        JvmSmartCompletionTestGenerated.This.class,
        JvmSmartCompletionTestGenerated.WhenEntry.class,
})
@RunWith(JUnit3RunnerWithInners.class)
public class JvmSmartCompletionTestGenerated extends AbstractJvmSmartCompletionTest {
    @TestMetadata("AfterExclSign.kt")
    public void testAfterExclSign() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/AfterExclSign.kt");
        doTest(fileName);
    }

    public void testAllFilesPresentInSmart() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/completion/smart"), Pattern.compile("^(.+)\\.kt$"), true);
    }

    @TestMetadata("AnyExpected.kt")
    public void testAnyExpected() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/AnyExpected.kt");
        doTest(fileName);
    }

    @TestMetadata("BackingFields.kt")
    public void testBackingFields() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/BackingFields.kt");
        doTest(fileName);
    }

    @TestMetadata("BeforeArgumentWithBinaryOperation.kt")
    public void testBeforeArgumentWithBinaryOperation() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/BeforeArgumentWithBinaryOperation.kt");
        doTest(fileName);
    }

    @TestMetadata("BeforeArgumentWithBinaryOperation2.kt")
    public void testBeforeArgumentWithBinaryOperation2() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/BeforeArgumentWithBinaryOperation2.kt");
        doTest(fileName);
    }

    @TestMetadata("BeforeArgumentWithBinaryOperation3.kt")
    public void testBeforeArgumentWithBinaryOperation3() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/BeforeArgumentWithBinaryOperation3.kt");
        doTest(fileName);
    }

    @TestMetadata("BooleanExpected.kt")
    public void testBooleanExpected() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/BooleanExpected.kt");
        doTest(fileName);
    }

    @TestMetadata("ChainedCall.kt")
    public void testChainedCall() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/ChainedCall.kt");
        doTest(fileName);
    }

    @TestMetadata("ClassObjectMembers.kt")
    public void testClassObjectMembers() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/ClassObjectMembers.kt");
        doTest(fileName);
    }

    @TestMetadata("ClassObjectMembersForNullable.kt")
    public void testClassObjectMembersForNullable() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/ClassObjectMembersForNullable.kt");
        doTest(fileName);
    }

    @TestMetadata("ClassObjectMembersWithPrefix.kt")
    public void testClassObjectMembersWithPrefix() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/ClassObjectMembersWithPrefix.kt");
        doTest(fileName);
    }

    @TestMetadata("EmptyPrefix.kt")
    public void testEmptyPrefix() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/EmptyPrefix.kt");
        doTest(fileName);
    }

    @TestMetadata("EnumMembers.kt")
    public void testEnumMembers() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/EnumMembers.kt");
        doTest(fileName);
    }

    @TestMetadata("EqOperator.kt")
    public void testEqOperator() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/EqOperator.kt");
        doTest(fileName);
    }

    @TestMetadata("GroupBySubstitutor.kt")
    public void testGroupBySubstitutor() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/GroupBySubstitutor.kt");
        doTest(fileName);
    }

    @TestMetadata("IfCondition.kt")
    public void testIfCondition() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/IfCondition.kt");
        doTest(fileName);
    }

    @TestMetadata("ImmediateExtensionMembers.kt")
    public void testImmediateExtensionMembers() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/ImmediateExtensionMembers.kt");
        doTest(fileName);
    }

    @TestMetadata("ImmediateMembers.kt")
    public void testImmediateMembers() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/ImmediateMembers.kt");
        doTest(fileName);
    }

    @TestMetadata("ImplicitlyTypedFunBody.kt")
    public void testImplicitlyTypedFunBody() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/ImplicitlyTypedFunBody.kt");
        doTest(fileName);
    }

    @TestMetadata("ImplicitlyTypedValInitializer1.kt")
    public void testImplicitlyTypedValInitializer1() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/ImplicitlyTypedValInitializer1.kt");
        doTest(fileName);
    }

    @TestMetadata("ImplicitlyTypedValInitializer2.kt")
    public void testImplicitlyTypedValInitializer2() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/ImplicitlyTypedValInitializer2.kt");
        doTest(fileName);
    }

    @TestMetadata("InClassObject.kt")
    public void testInClassObject() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/InClassObject.kt");
        doTest(fileName);
    }

    @TestMetadata("InNestedClass.kt")
    public void testInNestedClass() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/InNestedClass.kt");
        doTest(fileName);
    }

    @TestMetadata("InaccessibleConstructor.kt")
    public void testInaccessibleConstructor() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/InaccessibleConstructor.kt");
        doTest(fileName);
    }

    @TestMetadata("InaccessibleDeclarations.kt")
    public void testInaccessibleDeclarations() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/InaccessibleDeclarations.kt");
        doTest(fileName);
    }

    @TestMetadata("InfixCall.kt")
    public void testInfixCall() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/InfixCall.kt");
        doTest(fileName);
    }

    @TestMetadata("InsideIdentifier.kt")
    public void testInsideIdentifier() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/InsideIdentifier.kt");
        doTest(fileName);
    }

    @TestMetadata("InvokeFunctionVariable.kt")
    public void testInvokeFunctionVariable() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/InvokeFunctionVariable.kt");
        doTest(fileName);
    }

    @TestMetadata("JavaEnumMembers.kt")
    public void testJavaEnumMembers() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/JavaEnumMembers.kt");
        doTest(fileName);
    }

    @TestMetadata("JavaEnumMembersAfterQualifier.kt")
    public void testJavaEnumMembersAfterQualifier() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/JavaEnumMembersAfterQualifier.kt");
        doTest(fileName);
    }

    @TestMetadata("JavaEnumMembersForNullable.kt")
    public void testJavaEnumMembersForNullable() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/JavaEnumMembersForNullable.kt");
        doTest(fileName);
    }

    @TestMetadata("JavaStaticFields.kt")
    public void testJavaStaticFields() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/JavaStaticFields.kt");
        doTest(fileName);
    }

    @TestMetadata("JavaStaticFieldsForNullable.kt")
    public void testJavaStaticFieldsForNullable() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/JavaStaticFieldsForNullable.kt");
        doTest(fileName);
    }

    @TestMetadata("JavaStaticMethods.kt")
    public void testJavaStaticMethods() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/JavaStaticMethods.kt");
        doTest(fileName);
    }

    @TestMetadata("kt5873.kt")
    public void testKt5873() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/kt5873.kt");
        doTest(fileName);
    }

    @TestMetadata("MethodCallArgument.kt")
    public void testMethodCallArgument() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/MethodCallArgument.kt");
        doTest(fileName);
    }

    @TestMetadata("NoExtensionMethodFromClassObject.kt")
    public void testNoExtensionMethodFromClassObject() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/NoExtensionMethodFromClassObject.kt");
        doTest(fileName);
    }

    @TestMetadata("NoNothing.kt")
    public void testNoNothing() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/NoNothing.kt");
        doTest(fileName);
    }

    @TestMetadata("NoPrivateOverload.kt")
    public void testNoPrivateOverload() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/NoPrivateOverload.kt");
        doTest(fileName);
    }

    @TestMetadata("NoSillyAssignment.kt")
    public void testNoSillyAssignment() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/NoSillyAssignment.kt");
        doTest(fileName);
    }

    @TestMetadata("NotEqOperator.kt")
    public void testNotEqOperator() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/NotEqOperator.kt");
        doTest(fileName);
    }

    @TestMetadata("NotSillyAssignment.kt")
    public void testNotSillyAssignment() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/NotSillyAssignment.kt");
        doTest(fileName);
    }

    @TestMetadata("Null.kt")
    public void testNull() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/Null.kt");
        doTest(fileName);
    }

    @TestMetadata("Object.kt")
    public void testObject() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/Object.kt");
        doTest(fileName);
    }

    @TestMetadata("ObjectsFromType.kt")
    public void testObjectsFromType() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/ObjectsFromType.kt");
        doTest(fileName);
    }

    @TestMetadata("OverloadedConstructorArgument.kt")
    public void testOverloadedConstructorArgument() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/OverloadedConstructorArgument.kt");
        doTest(fileName);
    }

    @TestMetadata("OverloadedMethodCallArgument1.kt")
    public void testOverloadedMethodCallArgument1() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/OverloadedMethodCallArgument1.kt");
        doTest(fileName);
    }

    @TestMetadata("OverloadedMethodCallArgument2.kt")
    public void testOverloadedMethodCallArgument2() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/OverloadedMethodCallArgument2.kt");
        doTest(fileName);
    }

    @TestMetadata("OverloadedMethodCallArgument3.kt")
    public void testOverloadedMethodCallArgument3() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/OverloadedMethodCallArgument3.kt");
        doTest(fileName);
    }

    @TestMetadata("ParameterWithDefaultValue.kt")
    public void testParameterWithDefaultValue() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/ParameterWithDefaultValue.kt");
        doTest(fileName);
    }

    @TestMetadata("QualifiedOverloadedMethodCallArgument1.kt")
    public void testQualifiedOverloadedMethodCallArgument1() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/QualifiedOverloadedMethodCallArgument1.kt");
        doTest(fileName);
    }

    @TestMetadata("QualifiedOverloadedMethodCallArgument2.kt")
    public void testQualifiedOverloadedMethodCallArgument2() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/QualifiedOverloadedMethodCallArgument2.kt");
        doTest(fileName);
    }

    @TestMetadata("SAMExpected1.kt")
    public void testSAMExpected1() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/SAMExpected1.kt");
        doTest(fileName);
    }

    @TestMetadata("SkipDeclarationsOfType.kt")
    public void testSkipDeclarationsOfType() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/SkipDeclarationsOfType.kt");
        doTest(fileName);
    }

    @TestMetadata("SkipUnresolvedTypes.kt")
    public void testSkipUnresolvedTypes() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/SkipUnresolvedTypes.kt");
        doTest(fileName);
    }

    @TestMetadata("UnresolvedExpectedType.kt")
    public void testUnresolvedExpectedType() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/UnresolvedExpectedType.kt");
        doTest(fileName);
    }

    @TestMetadata("VariableAsFunction1.kt")
    public void testVariableAsFunction1() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/VariableAsFunction1.kt");
        doTest(fileName);
    }

    @TestMetadata("VariableAsFunction3.kt")
    public void testVariableAsFunction3() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/VariableAsFunction3.kt");
        doTest(fileName);
    }

    @TestMetadata("VariableInitializer.kt")
    public void testVariableInitializer() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/VariableInitializer.kt");
        doTest(fileName);
    }

    @TestMetadata("WithPrefix.kt")
    public void testWithPrefix() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/WithPrefix.kt");
        doTest(fileName);
    }

    @TestMetadata("WithQualifier.kt")
    public void testWithQualifier() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/WithQualifier.kt");
        doTest(fileName);
    }

    @TestMetadata("WrongNumberOfTypeArguments.kt")
    public void testWrongNumberOfTypeArguments() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/WrongNumberOfTypeArguments.kt");
        doTest(fileName);
    }

    @TestMetadata("WrongReceiver.kt")
    public void testWrongReceiver() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/WrongReceiver.kt");
        doTest(fileName);
    }

    @TestMetadata("idea/testData/completion/smart/afterAs")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class AfterAs extends AbstractJvmSmartCompletionTest {
        @TestMetadata("1.kt")
        public void test1() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/afterAs/1.kt");
            doTest(fileName);
        }

        @TestMetadata("2.kt")
        public void test2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/afterAs/2.kt");
            doTest(fileName);
        }

        @TestMetadata("3.kt")
        public void test3() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/afterAs/3.kt");
            doTest(fileName);
        }

        public void testAllFilesPresentInAfterAs() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/completion/smart/afterAs"), Pattern.compile("^(.+)\\.kt$"), true);
        }
    }

    @TestMetadata("idea/testData/completion/smart/anonymousObject")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class AnonymousObject extends AbstractJvmSmartCompletionTest {
        @TestMetadata("1.kt")
        public void test1() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/anonymousObject/1.kt");
            doTest(fileName);
        }

        @TestMetadata("2.kt")
        public void test2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/anonymousObject/2.kt");
            doTest(fileName);
        }

        public void testAllFilesPresentInAnonymousObject() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/completion/smart/anonymousObject"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("ForJavaInterface.kt")
        public void testForJavaInterface() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/anonymousObject/ForJavaInterface.kt");
            doTest(fileName);
        }

        @TestMetadata("WithPrefix.kt")
        public void testWithPrefix() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/anonymousObject/WithPrefix.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("idea/testData/completion/smart/constructor")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Constructor extends AbstractJvmSmartCompletionTest {
        public void testAllFilesPresentInConstructor() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/completion/smart/constructor"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("GenericJavaClass.kt")
        public void testGenericJavaClass() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/constructor/GenericJavaClass.kt");
            doTest(fileName);
        }

        @TestMetadata("GenericType.kt")
        public void testGenericType() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/constructor/GenericType.kt");
            doTest(fileName);
        }

        @TestMetadata("InnerClass.kt")
        public void testInnerClass() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/constructor/InnerClass.kt");
            doTest(fileName);
        }

        @TestMetadata("JavaClass.kt")
        public void testJavaClass() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/constructor/JavaClass.kt");
            doTest(fileName);
        }

        @TestMetadata("NoConstructorWithQualifier.kt")
        public void testNoConstructorWithQualifier() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/constructor/NoConstructorWithQualifier.kt");
            doTest(fileName);
        }

        @TestMetadata("NoInnerClassInstantiation.kt")
        public void testNoInnerClassInstantiation() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/constructor/NoInnerClassInstantiation.kt");
            doTest(fileName);
        }

        @TestMetadata("Nullable.kt")
        public void testNullable() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/constructor/Nullable.kt");
            doTest(fileName);
        }

        @TestMetadata("PrivateConstructorForAbstract.kt")
        public void testPrivateConstructorForAbstract() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/constructor/PrivateConstructorForAbstract.kt");
            doTest(fileName);
        }

        @TestMetadata("ProtectedConstructorForAbstract.kt")
        public void testProtectedConstructorForAbstract() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/constructor/ProtectedConstructorForAbstract.kt");
            doTest(fileName);
        }

        @TestMetadata("Simple.kt")
        public void testSimple() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/constructor/Simple.kt");
            doTest(fileName);
        }

        @TestMetadata("WithParameters.kt")
        public void testWithParameters() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/constructor/WithParameters.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("idea/testData/completion/smart/forLoopRange")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class ForLoopRange extends AbstractJvmSmartCompletionTest {
        @TestMetadata("AfterDot.kt")
        public void testAfterDot() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/forLoopRange/AfterDot.kt");
            doTest(fileName);
        }

        public void testAllFilesPresentInForLoopRange() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/completion/smart/forLoopRange"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("ExtensionIteratorMethod.kt")
        public void testExtensionIteratorMethod() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/forLoopRange/ExtensionIteratorMethod.kt");
            doTest(fileName);
        }

        @TestMetadata("NoGenericT.kt")
        public void testNoGenericT() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/forLoopRange/NoGenericT.kt");
            doTest(fileName);
        }

        @TestMetadata("Nullable.kt")
        public void testNullable() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/forLoopRange/Nullable.kt");
            doTest(fileName);
        }

        @TestMetadata("Simple.kt")
        public void testSimple() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/forLoopRange/Simple.kt");
            doTest(fileName);
        }

        @TestMetadata("SmartCasts.kt")
        public void testSmartCasts() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/forLoopRange/SmartCasts.kt");
            doTest(fileName);
        }

        @TestMetadata("TypedLoopVar.kt")
        public void testTypedLoopVar() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/forLoopRange/TypedLoopVar.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("idea/testData/completion/smart/functionLiterals")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FunctionLiterals extends AbstractJvmSmartCompletionTest {
        @TestMetadata("1.kt")
        public void test1() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/functionLiterals/1.kt");
            doTest(fileName);
        }

        @TestMetadata("2.kt")
        public void test2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/functionLiterals/2.kt");
            doTest(fileName);
        }

        @TestMetadata("3.kt")
        public void test3() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/functionLiterals/3.kt");
            doTest(fileName);
        }

        @TestMetadata("4.kt")
        public void test4() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/functionLiterals/4.kt");
            doTest(fileName);
        }

        @TestMetadata("5.kt")
        public void test5() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/functionLiterals/5.kt");
            doTest(fileName);
        }

        public void testAllFilesPresentInFunctionLiterals() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/completion/smart/functionLiterals"), Pattern.compile("^(.+)\\.kt$"), true);
        }
    }

    @TestMetadata("idea/testData/completion/smart/functionReference")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class FunctionReference extends AbstractJvmSmartCompletionTest {
        @TestMetadata("1.kt")
        public void test1() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/functionReference/1.kt");
            doTest(fileName);
        }

        @TestMetadata("10.kt")
        public void test10() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/functionReference/10.kt");
            doTest(fileName);
        }

        @TestMetadata("12.kt")
        public void test12() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/functionReference/12.kt");
            doTest(fileName);
        }

        @TestMetadata("3.kt")
        public void test3() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/functionReference/3.kt");
            doTest(fileName);
        }

        @TestMetadata("4.kt")
        public void test4() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/functionReference/4.kt");
            doTest(fileName);
        }

        @TestMetadata("7.kt")
        public void test7() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/functionReference/7.kt");
            doTest(fileName);
        }

        @TestMetadata("9.kt")
        public void test9() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/functionReference/9.kt");
            doTest(fileName);
        }

        @TestMetadata("AfterQualifier.kt")
        public void testAfterQualifier() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/functionReference/AfterQualifier.kt");
            doTest(fileName);
        }

        public void testAllFilesPresentInFunctionReference() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/completion/smart/functionReference"), Pattern.compile("^(.+)\\.kt$"), true);
        }
    }

    @TestMetadata("idea/testData/completion/smart/generics")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Generics extends AbstractJvmSmartCompletionTest {
        public void testAllFilesPresentInGenerics() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/completion/smart/generics"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("GenericFunction1.kt")
        public void testGenericFunction1() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/generics/GenericFunction1.kt");
            doTest(fileName);
        }

        @TestMetadata("GenericFunction2.kt")
        public void testGenericFunction2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/generics/GenericFunction2.kt");
            doTest(fileName);
        }

        @TestMetadata("GenericFunction3.kt")
        public void testGenericFunction3() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/generics/GenericFunction3.kt");
            doTest(fileName);
        }

        @TestMetadata("GenericFunction4.kt")
        public void testGenericFunction4() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/generics/GenericFunction4.kt");
            doTest(fileName);
        }

        @TestMetadata("GenericFunction5.kt")
        public void testGenericFunction5() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/generics/GenericFunction5.kt");
            doTest(fileName);
        }

        @TestMetadata("GenericMethodArgument.kt")
        public void testGenericMethodArgument() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/generics/GenericMethodArgument.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("idea/testData/completion/smart/heuristicSignatures")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class HeuristicSignatures extends AbstractJvmSmartCompletionTest {
        public void testAllFilesPresentInHeuristicSignatures() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/completion/smart/heuristicSignatures"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("Contains.kt")
        public void testContains() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/heuristicSignatures/Contains.kt");
            doTest(fileName);
        }

        @TestMetadata("ContainsAll.kt")
        public void testContainsAll() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/heuristicSignatures/ContainsAll.kt");
            doTest(fileName);
        }

        @TestMetadata("ContainsKey.kt")
        public void testContainsKey() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/heuristicSignatures/ContainsKey.kt");
            doTest(fileName);
        }

        @TestMetadata("ContainsValue.kt")
        public void testContainsValue() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/heuristicSignatures/ContainsValue.kt");
            doTest(fileName);
        }

        @TestMetadata("Get.kt")
        public void testGet() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/heuristicSignatures/Get.kt");
            doTest(fileName);
        }

        @TestMetadata("InOperator.kt")
        public void testInOperator() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/heuristicSignatures/InOperator.kt");
            doTest(fileName);
        }

        @TestMetadata("IndexOf.kt")
        public void testIndexOf() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/heuristicSignatures/IndexOf.kt");
            doTest(fileName);
        }

        @TestMetadata("LastIndexOf.kt")
        public void testLastIndexOf() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/heuristicSignatures/LastIndexOf.kt");
            doTest(fileName);
        }

        @TestMetadata("MapRemove.kt")
        public void testMapRemove() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/heuristicSignatures/MapRemove.kt");
            doTest(fileName);
        }

        @TestMetadata("Remove.kt")
        public void testRemove() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/heuristicSignatures/Remove.kt");
            doTest(fileName);
        }

        @TestMetadata("RemoveAll.kt")
        public void testRemoveAll() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/heuristicSignatures/RemoveAll.kt");
            doTest(fileName);
        }

        @TestMetadata("RetainAll.kt")
        public void testRetainAll() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/heuristicSignatures/RetainAll.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("idea/testData/completion/smart/ifValue")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class IfValue extends AbstractJvmSmartCompletionTest {
        @TestMetadata("1.kt")
        public void test1() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/ifValue/1.kt");
            doTest(fileName);
        }

        @TestMetadata("2.kt")
        public void test2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/ifValue/2.kt");
            doTest(fileName);
        }

        @TestMetadata("3.kt")
        public void test3() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/ifValue/3.kt");
            doTest(fileName);
        }

        @TestMetadata("4.kt")
        public void test4() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/ifValue/4.kt");
            doTest(fileName);
        }

        public void testAllFilesPresentInIfValue() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/completion/smart/ifValue"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("InBlock1.kt")
        public void testInBlock1() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/ifValue/InBlock1.kt");
            doTest(fileName);
        }

        @TestMetadata("InBlock2.kt")
        public void testInBlock2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/ifValue/InBlock2.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("idea/testData/completion/smart/inElvisOperator")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InElvisOperator extends AbstractJvmSmartCompletionTest {
        @TestMetadata("1.kt")
        public void test1() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/inElvisOperator/1.kt");
            doTest(fileName);
        }

        @TestMetadata("2.kt")
        public void test2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/inElvisOperator/2.kt");
            doTest(fileName);
        }

        @TestMetadata("3.kt")
        public void test3() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/inElvisOperator/3.kt");
            doTest(fileName);
        }

        @TestMetadata("4.kt")
        public void test4() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/inElvisOperator/4.kt");
            doTest(fileName);
        }

        @TestMetadata("5.kt")
        public void test5() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/inElvisOperator/5.kt");
            doTest(fileName);
        }

        @TestMetadata("6.kt")
        public void test6() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/inElvisOperator/6.kt");
            doTest(fileName);
        }

        public void testAllFilesPresentInInElvisOperator() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/completion/smart/inElvisOperator"), Pattern.compile("^(.+)\\.kt$"), true);
        }
    }

    @TestMetadata("idea/testData/completion/smart/inOperator")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InOperator extends AbstractJvmSmartCompletionTest {
        public void testAllFilesPresentInInOperator() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/completion/smart/inOperator"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("ExtensionContains.kt")
        public void testExtensionContains() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/inOperator/ExtensionContains.kt");
            doTest(fileName);
        }

        @TestMetadata("FilterByArgumentType.kt")
        public void testFilterByArgumentType() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/inOperator/FilterByArgumentType.kt");
            doTest(fileName);
        }

        @TestMetadata("GenericMethod.kt")
        public void testGenericMethod() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/inOperator/GenericMethod.kt");
            doTest(fileName);
        }

        @TestMetadata("GenericMethod2.kt")
        public void testGenericMethod2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/inOperator/GenericMethod2.kt");
            doTest(fileName);
        }

        @TestMetadata("GenericMethod3.kt")
        public void testGenericMethod3() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/inOperator/GenericMethod3.kt");
            doTest(fileName);
        }

        @TestMetadata("NonBooleanContains.kt")
        public void testNonBooleanContains() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/inOperator/NonBooleanContains.kt");
            doTest(fileName);
        }

        @TestMetadata("NotIn.kt")
        public void testNotIn() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/inOperator/NotIn.kt");
            doTest(fileName);
        }

        @TestMetadata("Nullable.kt")
        public void testNullable() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/inOperator/Nullable.kt");
            doTest(fileName);
        }

        @TestMetadata("Simple.kt")
        public void testSimple() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/inOperator/Simple.kt");
            doTest(fileName);
        }

        @TestMetadata("SmartCasts.kt")
        public void testSmartCasts() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/inOperator/SmartCasts.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("idea/testData/completion/smart/inheritors")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Inheritors extends AbstractJvmSmartCompletionTest {
        @TestMetadata("1.kt")
        public void test1() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/inheritors/1.kt");
            doTest(fileName);
        }

        @TestMetadata("2.kt")
        public void test2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/inheritors/2.kt");
            doTest(fileName);
        }

        @TestMetadata("3.kt")
        public void test3() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/inheritors/3.kt");
            doTest(fileName);
        }

        public void testAllFilesPresentInInheritors() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/completion/smart/inheritors"), Pattern.compile("^(.+)\\.kt$"), true);
        }
    }

    @TestMetadata("idea/testData/completion/smart/multipleArgsItem")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MultipleArgsItem extends AbstractJvmSmartCompletionTest {
        @TestMetadata("1.kt")
        public void test1() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/multipleArgsItem/1.kt");
            doTest(fileName);
        }

        @TestMetadata("10.kt")
        public void test10() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/multipleArgsItem/10.kt");
            doTest(fileName);
        }

        @TestMetadata("11.kt")
        public void test11() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/multipleArgsItem/11.kt");
            doTest(fileName);
        }

        @TestMetadata("2.kt")
        public void test2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/multipleArgsItem/2.kt");
            doTest(fileName);
        }

        @TestMetadata("3.kt")
        public void test3() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/multipleArgsItem/3.kt");
            doTest(fileName);
        }

        @TestMetadata("4.kt")
        public void test4() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/multipleArgsItem/4.kt");
            doTest(fileName);
        }

        @TestMetadata("5.kt")
        public void test5() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/multipleArgsItem/5.kt");
            doTest(fileName);
        }

        @TestMetadata("6.kt")
        public void test6() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/multipleArgsItem/6.kt");
            doTest(fileName);
        }

        @TestMetadata("7.kt")
        public void test7() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/multipleArgsItem/7.kt");
            doTest(fileName);
        }

        @TestMetadata("8.kt")
        public void test8() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/multipleArgsItem/8.kt");
            doTest(fileName);
        }

        @TestMetadata("9.kt")
        public void test9() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/multipleArgsItem/9.kt");
            doTest(fileName);
        }

        public void testAllFilesPresentInMultipleArgsItem() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/completion/smart/multipleArgsItem"), Pattern.compile("^(.+)\\.kt$"), true);
        }
    }

    @TestMetadata("idea/testData/completion/smart/smartCasts")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class SmartCasts extends AbstractJvmSmartCompletionTest {
        public void testAllFilesPresentInSmartCasts() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/completion/smart/smartCasts"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("AutoNotNullType.kt")
        public void testAutoNotNullType() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/smartCasts/AutoNotNullType.kt");
            doTest(fileName);
        }

        @TestMetadata("AutoNotNullType2.kt")
        public void testAutoNotNullType2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/smartCasts/AutoNotNullType2.kt");
            doTest(fileName);
        }

        @TestMetadata("AutoNotNullTypeForConstructorParameter.kt")
        public void testAutoNotNullTypeForConstructorParameter() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/smartCasts/AutoNotNullTypeForConstructorParameter.kt");
            doTest(fileName);
        }

        @TestMetadata("AutoNotNullTypeWithQualifier.kt")
        public void testAutoNotNullTypeWithQualifier() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/smartCasts/AutoNotNullTypeWithQualifier.kt");
            doTest(fileName);
        }

        @TestMetadata("SmartCastType.kt")
        public void testSmartCastType() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/smartCasts/SmartCastType.kt");
            doTest(fileName);
        }

        @TestMetadata("SmartCastTypeWithQualifier.kt")
        public void testSmartCastTypeWithQualifier() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/smartCasts/SmartCastTypeWithQualifier.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("idea/testData/completion/smart/this")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class This extends AbstractJvmSmartCompletionTest {
        public void testAllFilesPresentInThis() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/completion/smart/this"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("NoQualifiedThisOfAnonymousObject.kt")
        public void testNoQualifiedThisOfAnonymousObject() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/this/NoQualifiedThisOfAnonymousObject.kt");
            doTest(fileName);
        }

        @TestMetadata("NullableThis.kt")
        public void testNullableThis() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/this/NullableThis.kt");
            doTest(fileName);
        }

        @TestMetadata("QualifiedThis.kt")
        public void testQualifiedThis() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/this/QualifiedThis.kt");
            doTest(fileName);
        }

        @TestMetadata("QualifiedThisOfExtensionFunction.kt")
        public void testQualifiedThisOfExtensionFunction() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/this/QualifiedThisOfExtensionFunction.kt");
            doTest(fileName);
        }

        @TestMetadata("QualifiedThisOfExtensionLambda1.kt")
        public void testQualifiedThisOfExtensionLambda1() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/this/QualifiedThisOfExtensionLambda1.kt");
            doTest(fileName);
        }

        @TestMetadata("QualifiedThisOfExtensionLambda2.kt")
        public void testQualifiedThisOfExtensionLambda2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/this/QualifiedThisOfExtensionLambda2.kt");
            doTest(fileName);
        }

        @TestMetadata("QualifiedThisOfExtensionLambda3.kt")
        public void testQualifiedThisOfExtensionLambda3() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/this/QualifiedThisOfExtensionLambda3.kt");
            doTest(fileName);
        }

        @TestMetadata("This.kt")
        public void testThis() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/this/This.kt");
            doTest(fileName);
        }
    }

    @TestMetadata("idea/testData/completion/smart/whenEntry")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class WhenEntry extends AbstractJvmSmartCompletionTest {
        @TestMetadata("1.kt")
        public void test1() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/whenEntry/1.kt");
            doTest(fileName);
        }

        @TestMetadata("2.kt")
        public void test2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/whenEntry/2.kt");
            doTest(fileName);
        }

        @TestMetadata("3.kt")
        public void test3() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/whenEntry/3.kt");
            doTest(fileName);
        }

        @TestMetadata("4.kt")
        public void test4() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/whenEntry/4.kt");
            doTest(fileName);
        }

        @TestMetadata("5.kt")
        public void test5() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/whenEntry/5.kt");
            doTest(fileName);
        }

        @TestMetadata("6.kt")
        public void test6() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/whenEntry/6.kt");
            doTest(fileName);
        }

        @TestMetadata("7.kt")
        public void test7() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/whenEntry/7.kt");
            doTest(fileName);
        }

        @TestMetadata("8.kt")
        public void test8() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/whenEntry/8.kt");
            doTest(fileName);
        }

        @TestMetadata("9.kt")
        public void test9() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/whenEntry/9.kt");
            doTest(fileName);
        }

        public void testAllFilesPresentInWhenEntry() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/completion/smart/whenEntry"), Pattern.compile("^(.+)\\.kt$"), true);
        }

        @TestMetadata("WhenWithNoSubject1.kt")
        public void testWhenWithNoSubject1() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/whenEntry/WhenWithNoSubject1.kt");
            doTest(fileName);
        }

        @TestMetadata("WhenWithNoSubject2.kt")
        public void testWhenWithNoSubject2() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("idea/testData/completion/smart/whenEntry/WhenWithNoSubject2.kt");
            doTest(fileName);
        }
    }
}

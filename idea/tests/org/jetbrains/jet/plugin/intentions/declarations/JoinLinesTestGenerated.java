/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.plugin.intentions.declarations;

import com.intellij.testFramework.TestDataPath;
import junit.framework.Test;
import junit.framework.TestSuite;
import org.junit.runner.RunWith;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;
import org.jetbrains.jet.JUnit3RunnerWithInners;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/joinLines")
@TestDataPath("$PROJECT_ROOT")
@RunWith(org.jetbrains.jet.JUnit3RunnerWithInners.class)
public class JoinLinesTestGenerated extends AbstractJoinLinesTest {
    public void testAllFilesPresentInJoinLines() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/joinLines"), Pattern.compile("^(.+)\\.kt$"), true);
    }
    
    @TestMetadata("longInit.kt")
    public void testLongInit() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/joinLines/longInit.kt");
        doTest(fileName);
    }
    
    @TestMetadata("longInit2.kt")
    public void testLongInit2() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/joinLines/longInit2.kt");
        doTest(fileName);
    }
    
    @TestMetadata("simpleInit.kt")
    public void testSimpleInit() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/joinLines/simpleInit.kt");
        doTest(fileName);
    }
    
    @TestMetadata("simpleInit2.kt")
    public void testSimpleInit2() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/joinLines/simpleInit2.kt");
        doTest(fileName);
    }
    
    @TestMetadata("simpleInitWithBackticks.kt")
    public void testSimpleInitWithBackticks() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/joinLines/simpleInitWithBackticks.kt");
        doTest(fileName);
    }
    
    @TestMetadata("simpleInitWithBackticks2.kt")
    public void testSimpleInitWithBackticks2() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/joinLines/simpleInitWithBackticks2.kt");
        doTest(fileName);
    }
    
    @TestMetadata("simpleInitWithBackticks3.kt")
    public void testSimpleInitWithBackticks3() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/joinLines/simpleInitWithBackticks3.kt");
        doTest(fileName);
    }
    
    @TestMetadata("simpleInitWithComments.kt")
    public void testSimpleInitWithComments() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/joinLines/simpleInitWithComments.kt");
        doTest(fileName);
    }
    
    @TestMetadata("simpleInitWithComments2.kt")
    public void testSimpleInitWithComments2() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/joinLines/simpleInitWithComments2.kt");
        doTest(fileName);
    }
    
    @TestMetadata("simpleInitWithSemicolons.kt")
    public void testSimpleInitWithSemicolons() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/joinLines/simpleInitWithSemicolons.kt");
        doTest(fileName);
    }
    
    @TestMetadata("simpleInitWithSemicolons2.kt")
    public void testSimpleInitWithSemicolons2() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/joinLines/simpleInitWithSemicolons2.kt");
        doTest(fileName);
    }
    
    @TestMetadata("simpleInitWithSemicolons3.kt")
    public void testSimpleInitWithSemicolons3() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/joinLines/simpleInitWithSemicolons3.kt");
        doTest(fileName);
    }
    
    @TestMetadata("simpleInitWithType.kt")
    public void testSimpleInitWithType() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/joinLines/simpleInitWithType.kt");
        doTest(fileName);
    }
    
    @TestMetadata("simpleInitWithType2.kt")
    public void testSimpleInitWithType2() throws Exception {
        String fileName = JetTestUtils.navigationMetadata("idea/testData/joinLines/simpleInitWithType2.kt");
        doTest(fileName);
    }
    
}

/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.plugin.intentions;

import junit.framework.Test;
import junit.framework.TestSuite;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/intentions")
@InnerTestClasses({IntentionTestGenerated.AddBraces.class, IntentionTestGenerated.AttributeCallReplacements.class, IntentionTestGenerated.Branched.class, IntentionTestGenerated.ConvertAssertToIf.class, IntentionTestGenerated.ConvertIfToAssert.class, IntentionTestGenerated.ConvertNegatedBooleanSequence.class, IntentionTestGenerated.ConvertNegatedExpressionWithDemorgansLaw.class, IntentionTestGenerated.ConvertToBlockBody.class, IntentionTestGenerated.ConvertToConcatenatedStringIntention.class, IntentionTestGenerated.ConvertToExpressionBody.class, IntentionTestGenerated.ConvertToForEachFunctionCall.class, IntentionTestGenerated.ConvertToForEachLoop.class, IntentionTestGenerated.ConvertToStringTemplateIntention.class, IntentionTestGenerated.Declarations.class, IntentionTestGenerated.InsertCurlyBracesToTemplate.class, IntentionTestGenerated.InsertExplicitTypeArguments.class, IntentionTestGenerated.InvertIfCondition.class, IntentionTestGenerated.MakeTypeExplicitInLambda.class, IntentionTestGenerated.MakeTypeImplicitInLambda.class, IntentionTestGenerated.MoveLambdaInsideParentheses.class, IntentionTestGenerated.MoveLambdaOutsideParentheses.class, IntentionTestGenerated.OperatorToFunction.class, IntentionTestGenerated.ReconstructedType.class, IntentionTestGenerated.RemoveBraces.class, IntentionTestGenerated.RemoveCurlyBracesFromTemplate.class, IntentionTestGenerated.RemoveExplicitTypeArguments.class, IntentionTestGenerated.RemoveUnnecessaryParentheses.class, IntentionTestGenerated.ReplaceExplicitFunctionLiteralParamWithIt.class, IntentionTestGenerated.ReplaceItWithExplicitFunctionLiteralParam.class, IntentionTestGenerated.ReplaceWithDotQualifiedMethodCall.class, IntentionTestGenerated.ReplaceWithInfixFunctionCall.class, IntentionTestGenerated.ReplaceWithOperatorAssign.class, IntentionTestGenerated.ReplaceWithTraditionalAssignment.class, IntentionTestGenerated.SimplifyBooleanWithConstants.class, IntentionTestGenerated.SimplifyNegatedBinaryExpressionIntention.class, IntentionTestGenerated.SpecifyType.class, IntentionTestGenerated.SplitIf.class, IntentionTestGenerated.SwapBinaryExpression.class})
public class IntentionTestGenerated extends AbstractIntentionTest {
    public void testAllFilesPresentInIntentions() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions"), Pattern.compile("^(.+)\\.kt$"), true);
    }
    
    @TestMetadata("idea/testData/intentions/addBraces")
    public static class AddBraces extends AbstractIntentionTest {
        @TestMetadata("addBracesForDoWhile.kt")
        public void testAddBracesForDoWhile() throws Exception {
            doTest("idea/testData/intentions/addBraces/addBracesForDoWhile.kt");
        }
        
        @TestMetadata("addBracesForElse.kt")
        public void testAddBracesForElse() throws Exception {
            doTest("idea/testData/intentions/addBraces/addBracesForElse.kt");
        }
        
        @TestMetadata("addBracesForFor.kt")
        public void testAddBracesForFor() throws Exception {
            doTest("idea/testData/intentions/addBraces/addBracesForFor.kt");
        }
        
        @TestMetadata("addBracesForIf.kt")
        public void testAddBracesForIf() throws Exception {
            doTest("idea/testData/intentions/addBraces/addBracesForIf.kt");
        }
        
        @TestMetadata("addBracesForIfWithNoSpace.kt")
        public void testAddBracesForIfWithNoSpace() throws Exception {
            doTest("idea/testData/intentions/addBraces/addBracesForIfWithNoSpace.kt");
        }
        
        @TestMetadata("addBracesForIfWithSemicolon.kt")
        public void testAddBracesForIfWithSemicolon() throws Exception {
            doTest("idea/testData/intentions/addBraces/addBracesForIfWithSemicolon.kt");
        }
        
        @TestMetadata("addBracesForWhile.kt")
        public void testAddBracesForWhile() throws Exception {
            doTest("idea/testData/intentions/addBraces/addBracesForWhile.kt");
        }
        
        @TestMetadata("addBracesWithBraces.kt")
        public void testAddBracesWithBraces() throws Exception {
            doTest("idea/testData/intentions/addBraces/addBracesWithBraces.kt");
        }
        
        public void testAllFilesPresentInAddBraces() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/addBraces"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/attributeCallReplacements")
    @InnerTestClasses({AttributeCallReplacements.ReplaceBinaryInfixIntention.class, AttributeCallReplacements.ReplaceContainsIntention.class, AttributeCallReplacements.ReplaceGetIntention.class, AttributeCallReplacements.ReplaceInvokeIntention.class, AttributeCallReplacements.ReplaceUnaryPrefixIntention.class})
    public static class AttributeCallReplacements extends AbstractIntentionTest {
        public void testAllFilesPresentInAttributeCallReplacements() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/attributeCallReplacements"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention")
        public static class ReplaceBinaryInfixIntention extends AbstractIntentionTest {
            @TestMetadata("acceptableVararg1.kt")
            public void testAcceptableVararg1() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/acceptableVararg1.kt");
            }
            
            @TestMetadata("acceptableVararg2.kt")
            public void testAcceptableVararg2() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/acceptableVararg2.kt");
            }
            
            public void testAllFilesPresentInReplaceBinaryInfixIntention() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("allowableDefaultArgument.kt")
            public void testAllowableDefaultArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/allowableDefaultArgument.kt");
            }
            
            @TestMetadata("divSanityTest.kt")
            public void testDivSanityTest() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/divSanityTest.kt");
            }
            
            @TestMetadata("extensionFunction.kt")
            public void testExtensionFunction() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/extensionFunction.kt");
            }
            
            @TestMetadata("functionLiteralArgument.kt")
            public void testFunctionLiteralArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/functionLiteralArgument.kt");
            }
            
            @TestMetadata("minusSanityTest.kt")
            public void testMinusSanityTest() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/minusSanityTest.kt");
            }
            
            @TestMetadata("missingDefaultArgument.kt")
            public void testMissingDefaultArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/missingDefaultArgument.kt");
            }
            
            @TestMetadata("modSanityTest.kt")
            public void testModSanityTest() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/modSanityTest.kt");
            }
            
            @TestMetadata("multipleArguments.kt")
            public void testMultipleArguments() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/multipleArguments.kt");
            }
            
            @TestMetadata("plusSanityTest.kt")
            public void testPlusSanityTest() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/plusSanityTest.kt");
            }
            
            @TestMetadata("rangeToSanityTest.kt")
            public void testRangeToSanityTest() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/rangeToSanityTest.kt");
            }
            
            @TestMetadata("timesSanityTest.kt")
            public void testTimesSanityTest() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/timesSanityTest.kt");
            }
            
            @TestMetadata("typeArguments.kt")
            public void testTypeArguments() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/typeArguments.kt");
            }
            
            @TestMetadata("unacceptableVararg1.kt")
            public void testUnacceptableVararg1() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/unacceptableVararg1.kt");
            }
            
            @TestMetadata("unacceptableVararg2.kt")
            public void testUnacceptableVararg2() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/unacceptableVararg2.kt");
            }
            
            @TestMetadata("validNamedArgument.kt")
            public void testValidNamedArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceBinaryInfixIntention/validNamedArgument.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention")
        public static class ReplaceContainsIntention extends AbstractIntentionTest {
            @TestMetadata("acceptableVararg.kt")
            public void testAcceptableVararg() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/acceptableVararg.kt");
            }
            
            @TestMetadata("acceptableVararg2.kt")
            public void testAcceptableVararg2() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/acceptableVararg2.kt");
            }
            
            public void testAllFilesPresentInReplaceContainsIntention() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("allowableDefaultArgument.kt")
            public void testAllowableDefaultArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/allowableDefaultArgument.kt");
            }
            
            @TestMetadata("containsInExpression.kt")
            public void testContainsInExpression() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/containsInExpression.kt");
            }
            
            @TestMetadata("extensionFunction.kt")
            public void testExtensionFunction() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/extensionFunction.kt");
            }
            
            @TestMetadata("functionLiteralArgument.kt")
            public void testFunctionLiteralArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/functionLiteralArgument.kt");
            }
            
            @TestMetadata("functionLiteralArgumentAfterSemicolon.kt")
            public void testFunctionLiteralArgumentAfterSemicolon() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/functionLiteralArgumentAfterSemicolon.kt");
            }
            
            @TestMetadata("functionLiteralArgumentAtStartOfBlock.kt")
            public void testFunctionLiteralArgumentAtStartOfBlock() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/functionLiteralArgumentAtStartOfBlock.kt");
            }
            
            @TestMetadata("functionLiteralArgumentInExpression.kt")
            public void testFunctionLiteralArgumentInExpression() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/functionLiteralArgumentInExpression.kt");
            }
            
            @TestMetadata("invalidArgument.kt")
            public void testInvalidArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/invalidArgument.kt");
            }
            
            @TestMetadata("missingArgument.kt")
            public void testMissingArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/missingArgument.kt");
            }
            
            @TestMetadata("missingDefaultArgument.kt")
            public void testMissingDefaultArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/missingDefaultArgument.kt");
            }
            
            @TestMetadata("multipleArguments.kt")
            public void testMultipleArguments() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/multipleArguments.kt");
            }
            
            @TestMetadata("simpleArgument.kt")
            public void testSimpleArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/simpleArgument.kt");
            }
            
            @TestMetadata("typeArguments.kt")
            public void testTypeArguments() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/typeArguments.kt");
            }
            
            @TestMetadata("unacceptableVararg1.kt")
            public void testUnacceptableVararg1() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/unacceptableVararg1.kt");
            }
            
            @TestMetadata("unacceptableVararg2.kt")
            public void testUnacceptableVararg2() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/unacceptableVararg2.kt");
            }
            
            @TestMetadata("validNamedArgument.kt")
            public void testValidNamedArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceContainsIntention/validNamedArgument.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/intentions/attributeCallReplacements/replaceGetIntention")
        @InnerTestClasses({})
        public static class ReplaceGetIntention extends AbstractIntentionTest {
            @TestMetadata("acceptableVararg.kt")
            public void testAcceptableVararg() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/acceptableVararg.kt");
            }
            
            public void testAllFilesPresentInReplaceGetIntention() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/attributeCallReplacements/replaceGetIntention"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("argumentAndFunction.kt")
            public void testArgumentAndFunction() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/argumentAndFunction.kt");
            }
            
            @TestMetadata("duplicateArguments.kt")
            public void testDuplicateArguments() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/duplicateArguments.kt");
            }
            
            @TestMetadata("extensionFunction.kt")
            public void testExtensionFunction() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/extensionFunction.kt");
            }
            
            @TestMetadata("functionalArgument.kt")
            public void testFunctionalArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/functionalArgument.kt");
            }
            
            @TestMetadata("invalidArgument.kt")
            public void testInvalidArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/invalidArgument.kt");
            }
            
            @TestMetadata("missingArgument.kt")
            public void testMissingArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/missingArgument.kt");
            }
            
            @TestMetadata("missingDefaultArgument.kt")
            public void testMissingDefaultArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/missingDefaultArgument.kt");
            }
            
            @TestMetadata("multiArgument.kt")
            public void testMultiArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/multiArgument.kt");
            }
            
            @TestMetadata("namedAndFunction.kt")
            public void testNamedAndFunction() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/namedAndFunction.kt");
            }
            
            @TestMetadata("noArgument.kt")
            public void testNoArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/noArgument.kt");
            }
            
            @TestMetadata("sanityCheck.kt")
            public void testSanityCheck() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/sanityCheck.kt");
            }
            
            @TestMetadata("singleArgument.kt")
            public void testSingleArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/singleArgument.kt");
            }
            
            @TestMetadata("singleNamedArgument.kt")
            public void testSingleNamedArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/singleNamedArgument.kt");
            }
            
            @TestMetadata("unacceptableVararg.kt")
            public void testUnacceptableVararg() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/unacceptableVararg.kt");
            }
            
            @TestMetadata("unnamedAndNamed.kt")
            public void testUnnamedAndNamed() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceGetIntention/unnamedAndNamed.kt");
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("ReplaceGetIntention");
                suite.addTestSuite(ReplaceGetIntention.class);
                return suite;
            }
        }
        
        @TestMetadata("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention")
        public static class ReplaceInvokeIntention extends AbstractIntentionTest {
            public void testAllFilesPresentInReplaceInvokeIntention() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("extensionFunction.kt")
            public void testExtensionFunction() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/extensionFunction.kt");
            }
            
            @TestMetadata("functionLiteralInvoke.kt")
            public void testFunctionLiteralInvoke() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/functionLiteralInvoke.kt");
            }
            
            @TestMetadata("invokeInExpression.kt")
            public void testInvokeInExpression() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/invokeInExpression.kt");
            }
            
            @TestMetadata("namedArgumentInvoke.kt")
            public void testNamedArgumentInvoke() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/namedArgumentInvoke.kt");
            }
            
            @TestMetadata("noArgumentInvoke.kt")
            public void testNoArgumentInvoke() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/noArgumentInvoke.kt");
            }
            
            @TestMetadata("typeAndValueArgument.kt")
            public void testTypeAndValueArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/typeAndValueArgument.kt");
            }
            
            @TestMetadata("typeArgumentAndFunctionLiteral.kt")
            public void testTypeArgumentAndFunctionLiteral() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/typeArgumentAndFunctionLiteral.kt");
            }
            
            @TestMetadata("valueAndFunctionLiteralInvoke.kt")
            public void testValueAndFunctionLiteralInvoke() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/valueAndFunctionLiteralInvoke.kt");
            }
            
            @TestMetadata("valueArgumentInvoke.kt")
            public void testValueArgumentInvoke() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/valueArgumentInvoke.kt");
            }
            
            @TestMetadata("varargInvoke.kt")
            public void testVarargInvoke() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceInvokeIntention/varargInvoke.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention")
        public static class ReplaceUnaryPrefixIntention extends AbstractIntentionTest {
            @TestMetadata("acceptableVararg.kt")
            public void testAcceptableVararg() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/acceptableVararg.kt");
            }
            
            public void testAllFilesPresentInReplaceUnaryPrefixIntention() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("complexPlus.kt")
            public void testComplexPlus() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/complexPlus.kt");
            }
            
            @TestMetadata("defaultArgument.kt")
            public void testDefaultArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/defaultArgument.kt");
            }
            
            @TestMetadata("extensionFunction.kt")
            public void testExtensionFunction() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/extensionFunction.kt");
            }
            
            @TestMetadata("functionLiteralArgument.kt")
            public void testFunctionLiteralArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/functionLiteralArgument.kt");
            }
            
            @TestMetadata("minusSanityTest.kt")
            public void testMinusSanityTest() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/minusSanityTest.kt");
            }
            
            @TestMetadata("namedValueArgument.kt")
            public void testNamedValueArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/namedValueArgument.kt");
            }
            
            @TestMetadata("notSanityTest.kt")
            public void testNotSanityTest() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/notSanityTest.kt");
            }
            
            @TestMetadata("plusPlus.kt")
            public void testPlusPlus() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/plusPlus.kt");
            }
            
            @TestMetadata("plusSanityTest.kt")
            public void testPlusSanityTest() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/plusSanityTest.kt");
            }
            
            @TestMetadata("typeArguments.kt")
            public void testTypeArguments() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/typeArguments.kt");
            }
            
            @TestMetadata("unacceptableVararg.kt")
            public void testUnacceptableVararg() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/unacceptableVararg.kt");
            }
            
            @TestMetadata("valueArgument.kt")
            public void testValueArgument() throws Exception {
                doTest("idea/testData/intentions/attributeCallReplacements/replaceUnaryPrefixIntention/valueArgument.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("AttributeCallReplacements");
            suite.addTestSuite(AttributeCallReplacements.class);
            suite.addTestSuite(ReplaceBinaryInfixIntention.class);
            suite.addTestSuite(ReplaceContainsIntention.class);
            suite.addTest(ReplaceGetIntention.innerSuite());
            suite.addTestSuite(ReplaceInvokeIntention.class);
            suite.addTestSuite(ReplaceUnaryPrefixIntention.class);
            return suite;
        }
    }
    
    @TestMetadata("idea/testData/intentions/branched")
    @InnerTestClasses({Branched.DoubleBangToIfThen.class, Branched.ElvisToIfThen.class, Branched.Folding.class, Branched.IfThenToDoubleBang.class, Branched.IfThenToElvis.class, Branched.IfThenToSafeAccess.class, Branched.IfWhen.class, Branched.SafeAccessToIfThen.class, Branched.Unfolding.class, Branched.When.class})
    public static class Branched extends AbstractIntentionTest {
        public void testAllFilesPresentInBranched() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("idea/testData/intentions/branched/doubleBangToIfThen")
        public static class DoubleBangToIfThen extends AbstractIntentionTest {
            public void testAllFilesPresentInDoubleBangToIfThen() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/doubleBangToIfThen"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("callExpression.kt")
            public void testCallExpression() throws Exception {
                doTest("idea/testData/intentions/branched/doubleBangToIfThen/callExpression.kt");
            }
            
            @TestMetadata("callExpressionParens.kt")
            public void testCallExpressionParens() throws Exception {
                doTest("idea/testData/intentions/branched/doubleBangToIfThen/callExpressionParens.kt");
            }
            
            @TestMetadata("exceptionTextEscapesQuotes.kt")
            public void testExceptionTextEscapesQuotes() throws Exception {
                doTest("idea/testData/intentions/branched/doubleBangToIfThen/exceptionTextEscapesQuotes.kt");
            }
            
            @TestMetadata("exceptionTextHandlesMultiline.kt")
            public void testExceptionTextHandlesMultiline() throws Exception {
                doTest("idea/testData/intentions/branched/doubleBangToIfThen/exceptionTextHandlesMultiline.kt");
            }
            
            @TestMetadata("localVal.kt")
            public void testLocalVal() throws Exception {
                doTest("idea/testData/intentions/branched/doubleBangToIfThen/localVal.kt");
            }
            
            @TestMetadata("localVar.kt")
            public void testLocalVar() throws Exception {
                doTest("idea/testData/intentions/branched/doubleBangToIfThen/localVar.kt");
            }
            
            @TestMetadata("simpleNameExpressionInParens.kt")
            public void testSimpleNameExpressionInParens() throws Exception {
                doTest("idea/testData/intentions/branched/doubleBangToIfThen/simpleNameExpressionInParens.kt");
            }
            
            @TestMetadata("topLevelVal.kt")
            public void testTopLevelVal() throws Exception {
                doTest("idea/testData/intentions/branched/doubleBangToIfThen/topLevelVal.kt");
            }
            
            @TestMetadata("topLevelValCustomGetter.kt")
            public void testTopLevelValCustomGetter() throws Exception {
                doTest("idea/testData/intentions/branched/doubleBangToIfThen/topLevelValCustomGetter.kt");
            }
            
            @TestMetadata("topLevelVar.kt")
            public void testTopLevelVar() throws Exception {
                doTest("idea/testData/intentions/branched/doubleBangToIfThen/topLevelVar.kt");
            }
            
            @TestMetadata("topLevelVarCustomGetter.kt")
            public void testTopLevelVarCustomGetter() throws Exception {
                doTest("idea/testData/intentions/branched/doubleBangToIfThen/topLevelVarCustomGetter.kt");
            }
            
            @TestMetadata("usedInAssignment.kt")
            public void testUsedInAssignment() throws Exception {
                doTest("idea/testData/intentions/branched/doubleBangToIfThen/usedInAssignment.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/intentions/branched/elvisToIfThen")
        public static class ElvisToIfThen extends AbstractIntentionTest {
            public void testAllFilesPresentInElvisToIfThen() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/elvisToIfThen"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("callExpression.kt")
            public void testCallExpression() throws Exception {
                doTest("idea/testData/intentions/branched/elvisToIfThen/callExpression.kt");
            }
            
            @TestMetadata("callExpressionParens.kt")
            public void testCallExpressionParens() throws Exception {
                doTest("idea/testData/intentions/branched/elvisToIfThen/callExpressionParens.kt");
            }
            
            @TestMetadata("elvisAsExpression.kt")
            public void testElvisAsExpression() throws Exception {
                doTest("idea/testData/intentions/branched/elvisToIfThen/elvisAsExpression.kt");
            }
            
            @TestMetadata("localValLhs.kt")
            public void testLocalValLhs() throws Exception {
                doTest("idea/testData/intentions/branched/elvisToIfThen/localValLhs.kt");
            }
            
            @TestMetadata("localVarLhs.kt")
            public void testLocalVarLhs() throws Exception {
                doTest("idea/testData/intentions/branched/elvisToIfThen/localVarLhs.kt");
            }
            
            @TestMetadata("simpleNameExpression.kt")
            public void testSimpleNameExpression() throws Exception {
                doTest("idea/testData/intentions/branched/elvisToIfThen/simpleNameExpression.kt");
            }
            
            @TestMetadata("simpleNameExpressionInParens.kt")
            public void testSimpleNameExpressionInParens() throws Exception {
                doTest("idea/testData/intentions/branched/elvisToIfThen/simpleNameExpressionInParens.kt");
            }
            
            @TestMetadata("topLevelVal.kt")
            public void testTopLevelVal() throws Exception {
                doTest("idea/testData/intentions/branched/elvisToIfThen/topLevelVal.kt");
            }
            
            @TestMetadata("topLevelValCustomGetter.kt")
            public void testTopLevelValCustomGetter() throws Exception {
                doTest("idea/testData/intentions/branched/elvisToIfThen/topLevelValCustomGetter.kt");
            }
            
            @TestMetadata("topLevelVar.kt")
            public void testTopLevelVar() throws Exception {
                doTest("idea/testData/intentions/branched/elvisToIfThen/topLevelVar.kt");
            }
            
            @TestMetadata("topLevelVarCustomGetter.kt")
            public void testTopLevelVarCustomGetter() throws Exception {
                doTest("idea/testData/intentions/branched/elvisToIfThen/topLevelVarCustomGetter.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/intentions/branched/folding")
        @InnerTestClasses({Folding.IfToAssignment.class, Folding.IfToReturn.class, Folding.IfToReturnAsymmetrically.class, Folding.WhenToAssignment.class, Folding.WhenToReturn.class})
        public static class Folding extends AbstractIntentionTest {
            public void testAllFilesPresentInFolding() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/folding"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("idea/testData/intentions/branched/folding/ifToAssignment")
            public static class IfToAssignment extends AbstractIntentionTest {
                public void testAllFilesPresentInIfToAssignment() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/folding/ifToAssignment"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("innerIfTransformed.kt")
                public void testInnerIfTransformed() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/ifToAssignment/innerIfTransformed.kt");
                }
                
                @TestMetadata("simpleIf.kt")
                public void testSimpleIf() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/ifToAssignment/simpleIf.kt");
                }
                
                @TestMetadata("simpleIfWithAugmentedAssignment.kt")
                public void testSimpleIfWithAugmentedAssignment() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithAugmentedAssignment.kt");
                }
                
                @TestMetadata("simpleIfWithBlocks.kt")
                public void testSimpleIfWithBlocks() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithBlocks.kt");
                }
                
                @TestMetadata("simpleIfWithShadowedVar.kt")
                public void testSimpleIfWithShadowedVar() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithShadowedVar.kt");
                }
                
                @TestMetadata("simpleIfWithUnmatchedAssignmentOps.kt")
                public void testSimpleIfWithUnmatchedAssignmentOps() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithUnmatchedAssignmentOps.kt");
                }
                
                @TestMetadata("simpleIfWithUnmatchedAssignments.kt")
                public void testSimpleIfWithUnmatchedAssignments() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithUnmatchedAssignments.kt");
                }
                
                @TestMetadata("simpleIfWithoutElse.kt")
                public void testSimpleIfWithoutElse() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithoutElse.kt");
                }
                
                @TestMetadata("simpleIfWithoutTerminatingAssignment.kt")
                public void testSimpleIfWithoutTerminatingAssignment() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/ifToAssignment/simpleIfWithoutTerminatingAssignment.kt");
                }
                
            }
            
            @TestMetadata("idea/testData/intentions/branched/folding/ifToReturn")
            public static class IfToReturn extends AbstractIntentionTest {
                public void testAllFilesPresentInIfToReturn() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/folding/ifToReturn"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("innerIfTransformed.kt")
                public void testInnerIfTransformed() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/ifToReturn/innerIfTransformed.kt");
                }
                
                @TestMetadata("simpleIf.kt")
                public void testSimpleIf() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/ifToReturn/simpleIf.kt");
                }
                
                @TestMetadata("simpleIfWithBlocks.kt")
                public void testSimpleIfWithBlocks() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/ifToReturn/simpleIfWithBlocks.kt");
                }
                
            }
            
            @TestMetadata("idea/testData/intentions/branched/folding/ifToReturnAsymmetrically")
            public static class IfToReturnAsymmetrically extends AbstractIntentionTest {
                public void testAllFilesPresentInIfToReturnAsymmetrically() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/folding/ifToReturnAsymmetrically"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("simpleIf.kt")
                public void testSimpleIf() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/ifToReturnAsymmetrically/simpleIf.kt");
                }
                
                @TestMetadata("simpleIfWithBlocks.kt")
                public void testSimpleIfWithBlocks() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/ifToReturnAsymmetrically/simpleIfWithBlocks.kt");
                }
                
                @TestMetadata("simpleIfWithComments.kt")
                public void testSimpleIfWithComments() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/ifToReturnAsymmetrically/simpleIfWithComments.kt");
                }
                
            }
            
            @TestMetadata("idea/testData/intentions/branched/folding/whenToAssignment")
            public static class WhenToAssignment extends AbstractIntentionTest {
                public void testAllFilesPresentInWhenToAssignment() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/folding/whenToAssignment"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("innerWhenTransformed.kt")
                public void testInnerWhenTransformed() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/whenToAssignment/innerWhenTransformed.kt");
                }
                
                @TestMetadata("simpleWhen.kt")
                public void testSimpleWhen() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/whenToAssignment/simpleWhen.kt");
                }
                
                @TestMetadata("simpleWhenWithBlocks.kt")
                public void testSimpleWhenWithBlocks() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/whenToAssignment/simpleWhenWithBlocks.kt");
                }
                
                @TestMetadata("simpleWhenWithShadowedVar.kt")
                public void testSimpleWhenWithShadowedVar() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/whenToAssignment/simpleWhenWithShadowedVar.kt");
                }
                
                @TestMetadata("simpleWhenWithUnmatchedAssignments.kt")
                public void testSimpleWhenWithUnmatchedAssignments() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/whenToAssignment/simpleWhenWithUnmatchedAssignments.kt");
                }
                
                @TestMetadata("simpleWhenWithoutTerminatingAssignment.kt")
                public void testSimpleWhenWithoutTerminatingAssignment() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/whenToAssignment/simpleWhenWithoutTerminatingAssignment.kt");
                }
                
            }
            
            @TestMetadata("idea/testData/intentions/branched/folding/whenToReturn")
            public static class WhenToReturn extends AbstractIntentionTest {
                public void testAllFilesPresentInWhenToReturn() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/folding/whenToReturn"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("innerWhenTransformed.kt")
                public void testInnerWhenTransformed() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/whenToReturn/innerWhenTransformed.kt");
                }
                
                @TestMetadata("simpleWhen.kt")
                public void testSimpleWhen() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/whenToReturn/simpleWhen.kt");
                }
                
                @TestMetadata("simpleWhenWithBlocks.kt")
                public void testSimpleWhenWithBlocks() throws Exception {
                    doTest("idea/testData/intentions/branched/folding/whenToReturn/simpleWhenWithBlocks.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("Folding");
                suite.addTestSuite(Folding.class);
                suite.addTestSuite(IfToAssignment.class);
                suite.addTestSuite(IfToReturn.class);
                suite.addTestSuite(IfToReturnAsymmetrically.class);
                suite.addTestSuite(WhenToAssignment.class);
                suite.addTestSuite(WhenToReturn.class);
                return suite;
            }
        }
        
        @TestMetadata("idea/testData/intentions/branched/ifThenToDoubleBang")
        public static class IfThenToDoubleBang extends AbstractIntentionTest {
            @TestMetadata("acceptableEmptyElseBlockForStatement.kt")
            public void testAcceptableEmptyElseBlockForStatement() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/acceptableEmptyElseBlockForStatement.kt");
            }
            
            @TestMetadata("acceptableEmptyThenBlockForStatement.kt")
            public void testAcceptableEmptyThenBlockForStatement() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/acceptableEmptyThenBlockForStatement.kt");
            }
            
            @TestMetadata("acceptableWithoutElseBlockForStatementWithFun.kt")
            public void testAcceptableWithoutElseBlockForStatementWithFun() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/acceptableWithoutElseBlockForStatementWithFun.kt");
            }
            
            @TestMetadata("acceptableWithoutElseBlockForStatementWithVal.kt")
            public void testAcceptableWithoutElseBlockForStatementWithVal() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/acceptableWithoutElseBlockForStatementWithVal.kt");
            }
            
            public void testAllFilesPresentInIfThenToDoubleBang() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/ifThenToDoubleBang"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("blockHasMoreThanOneStatement.kt")
            public void testBlockHasMoreThanOneStatement() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/blockHasMoreThanOneStatement.kt");
            }
            
            @TestMetadata("blockUsesDifferentVar.kt")
            public void testBlockUsesDifferentVar() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/blockUsesDifferentVar.kt");
            }
            
            @TestMetadata("conditionComparesNullWithNull.kt")
            public void testConditionComparesNullWithNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/conditionComparesNullWithNull.kt");
            }
            
            @TestMetadata("conditionInvalidBinaryExp.kt")
            public void testConditionInvalidBinaryExp() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/conditionInvalidBinaryExp.kt");
            }
            
            @TestMetadata("conditionNotBinaryExpr.kt")
            public void testConditionNotBinaryExpr() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/conditionNotBinaryExpr.kt");
            }
            
            @TestMetadata("doesNotinlineValueIfUsedMoreThanOnce.kt")
            public void testDoesNotinlineValueIfUsedMoreThanOnce() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/doesNotinlineValueIfUsedMoreThanOnce.kt");
            }
            
            @TestMetadata("doesNotinlineValueOutsideOfScope.kt")
            public void testDoesNotinlineValueOutsideOfScope() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/doesNotinlineValueOutsideOfScope.kt");
            }
            
            @TestMetadata("emptyCondition.kt")
            public void testEmptyCondition() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/emptyCondition.kt");
            }
            
            @TestMetadata("emptyElseBlock.kt")
            public void testEmptyElseBlock() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/emptyElseBlock.kt");
            }
            
            @TestMetadata("emptyThenBlock.kt")
            public void testEmptyThenBlock() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/emptyThenBlock.kt");
            }
            
            @TestMetadata("ifAndElseBothInBlocks.kt")
            public void testIfAndElseBothInBlocks() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/ifAndElseBothInBlocks.kt");
            }
            
            @TestMetadata("ifAndElseNotInBlocks.kt")
            public void testIfAndElseNotInBlocks() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/ifAndElseNotInBlocks.kt");
            }
            
            @TestMetadata("ifAsExpression.kt")
            public void testIfAsExpression() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/ifAsExpression.kt");
            }
            
            @TestMetadata("lhsEqualsNull.kt")
            public void testLhsEqualsNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/lhsEqualsNull.kt");
            }
            
            @TestMetadata("lhsNotEqualsNull.kt")
            public void testLhsNotEqualsNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/lhsNotEqualsNull.kt");
            }
            
            @TestMetadata("missingElseClause.kt")
            public void testMissingElseClause() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/missingElseClause.kt");
            }
            
            @TestMetadata("missingThenClause.kt")
            public void testMissingThenClause() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/missingThenClause.kt");
            }
            
            @TestMetadata("noCondition.kt")
            public void testNoCondition() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/noCondition.kt");
            }
            
            @TestMetadata("noNullInCondition.kt")
            public void testNoNullInCondition() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/noNullInCondition.kt");
            }
            
            @TestMetadata("notApplicableForFunction.kt")
            public void testNotApplicableForFunction() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/notApplicableForFunction.kt");
            }
            
            @TestMetadata("notApplicableForLocalVar.kt")
            public void testNotApplicableForLocalVar() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/notApplicableForLocalVar.kt");
            }
            
            @TestMetadata("nullBranchAlsoNull.kt")
            public void testNullBranchAlsoNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/nullBranchAlsoNull.kt");
            }
            
            @TestMetadata("otherBlockHasMoreThanOneStatement.kt")
            public void testOtherBlockHasMoreThanOneStatement() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/otherBlockHasMoreThanOneStatement.kt");
            }
            
            @TestMetadata("rhsEqualsNull.kt")
            public void testRhsEqualsNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/rhsEqualsNull.kt");
            }
            
            @TestMetadata("rhsNotEqualsNull.kt")
            public void testRhsNotEqualsNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/rhsNotEqualsNull.kt");
            }
            
            @TestMetadata("thenAndElseBothNull.kt")
            public void testThenAndElseBothNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/thenAndElseBothNull.kt");
            }
            
            @TestMetadata("throwByFqName.kt")
            public void testThrowByFqName() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/throwByFqName.kt");
            }
            
            @TestMetadata("unacceptableEmptyElseBlockForExpression.kt")
            public void testUnacceptableEmptyElseBlockForExpression() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/unacceptableEmptyElseBlockForExpression.kt");
            }
            
            @TestMetadata("unacceptableEmptyThenBlockForExpression.kt")
            public void testUnacceptableEmptyThenBlockForExpression() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/unacceptableEmptyThenBlockForExpression.kt");
            }
            
            @TestMetadata("willNotInlineClassProperty.kt")
            public void testWillNotInlineClassProperty() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToDoubleBang/willNotInlineClassProperty.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/intentions/branched/ifThenToElvis")
        @InnerTestClasses({})
        public static class IfThenToElvis extends AbstractIntentionTest {
            public void testAllFilesPresentInIfThenToElvis() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/ifThenToElvis"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("blockHasMoreThanOneStatement.kt")
            public void testBlockHasMoreThanOneStatement() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/blockHasMoreThanOneStatement.kt");
            }
            
            @TestMetadata("blockUsesDifferentVar.kt")
            public void testBlockUsesDifferentVar() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/blockUsesDifferentVar.kt");
            }
            
            @TestMetadata("conditionComparesNullWithNull.kt")
            public void testConditionComparesNullWithNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/conditionComparesNullWithNull.kt");
            }
            
            @TestMetadata("conditionInvalidBinaryExp.kt")
            public void testConditionInvalidBinaryExp() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/conditionInvalidBinaryExp.kt");
            }
            
            @TestMetadata("conditionNotBinaryExpr.kt")
            public void testConditionNotBinaryExpr() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/conditionNotBinaryExpr.kt");
            }
            
            @TestMetadata("doesNotinlineValueIfUsedMoreThanOnce.kt")
            public void testDoesNotinlineValueIfUsedMoreThanOnce() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/doesNotinlineValueIfUsedMoreThanOnce.kt");
            }
            
            @TestMetadata("doesNotinlineValueOutsideOfScope.kt")
            public void testDoesNotinlineValueOutsideOfScope() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/doesNotinlineValueOutsideOfScope.kt");
            }
            
            @TestMetadata("emptyCondition.kt")
            public void testEmptyCondition() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/emptyCondition.kt");
            }
            
            @TestMetadata("emptyElseBlock.kt")
            public void testEmptyElseBlock() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/emptyElseBlock.kt");
            }
            
            @TestMetadata("emptyThenBlock.kt")
            public void testEmptyThenBlock() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/emptyThenBlock.kt");
            }
            
            @TestMetadata("ifAndElseBothInBlocks.kt")
            public void testIfAndElseBothInBlocks() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/ifAndElseBothInBlocks.kt");
            }
            
            @TestMetadata("ifAndElseNotInBlocks.kt")
            public void testIfAndElseNotInBlocks() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/ifAndElseNotInBlocks.kt");
            }
            
            @TestMetadata("ifAsExpression.kt")
            public void testIfAsExpression() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/ifAsExpression.kt");
            }
            
            @TestMetadata("ifAsPartOfExpression.kt")
            public void testIfAsPartOfExpression() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/ifAsPartOfExpression.kt");
            }
            
            @TestMetadata("lhsEqualsNull.kt")
            public void testLhsEqualsNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/lhsEqualsNull.kt");
            }
            
            @TestMetadata("lhsNotEqualsNull.kt")
            public void testLhsNotEqualsNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/lhsNotEqualsNull.kt");
            }
            
            @TestMetadata("missingElseClause.kt")
            public void testMissingElseClause() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/missingElseClause.kt");
            }
            
            @TestMetadata("missingThenClause.kt")
            public void testMissingThenClause() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/missingThenClause.kt");
            }
            
            @TestMetadata("noCondition.kt")
            public void testNoCondition() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/noCondition.kt");
            }
            
            @TestMetadata("noNullInCondition.kt")
            public void testNoNullInCondition() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/noNullInCondition.kt");
            }
            
            @TestMetadata("notApplicableForFunction.kt")
            public void testNotApplicableForFunction() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/notApplicableForFunction.kt");
            }
            
            @TestMetadata("notApplicableForLocalVar.kt")
            public void testNotApplicableForLocalVar() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/notApplicableForLocalVar.kt");
            }
            
            @TestMetadata("notApplicableForSimpleKotlinNPE.kt")
            public void testNotApplicableForSimpleKotlinNPE() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/notApplicableForSimpleKotlinNPE.kt");
            }
            
            @TestMetadata("notApplicableForSimpleNPE.kt")
            public void testNotApplicableForSimpleNPE() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/notApplicableForSimpleNPE.kt");
            }
            
            @TestMetadata("nullBranchAlsoNull.kt")
            public void testNullBranchAlsoNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/nullBranchAlsoNull.kt");
            }
            
            @TestMetadata("otherBlockHasMoreThanOneStatement.kt")
            public void testOtherBlockHasMoreThanOneStatement() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/otherBlockHasMoreThanOneStatement.kt");
            }
            
            @TestMetadata("rhsEqualsNull.kt")
            public void testRhsEqualsNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/rhsEqualsNull.kt");
            }
            
            @TestMetadata("rhsNotEqualsNull.kt")
            public void testRhsNotEqualsNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/rhsNotEqualsNull.kt");
            }
            
            @TestMetadata("thenAndElseBothNull.kt")
            public void testThenAndElseBothNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/thenAndElseBothNull.kt");
            }
            
            @TestMetadata("throwsNPEwithArgument.kt")
            public void testThrowsNPEwithArgument() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/throwsNPEwithArgument.kt");
            }
            
            @TestMetadata("willNotInlineClassProperty.kt")
            public void testWillNotInlineClassProperty() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToElvis/willNotInlineClassProperty.kt");
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("IfThenToElvis");
                suite.addTestSuite(IfThenToElvis.class);
                return suite;
            }
        }
        
        @TestMetadata("idea/testData/intentions/branched/ifThenToSafeAccess")
        @InnerTestClasses({})
        public static class IfThenToSafeAccess extends AbstractIntentionTest {
            public void testAllFilesPresentInIfThenToSafeAccess() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/ifThenToSafeAccess"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("blockHasMoreThanOneStatement.kt")
            public void testBlockHasMoreThanOneStatement() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/blockHasMoreThanOneStatement.kt");
            }
            
            @TestMetadata("blockUsesDifferentVar.kt")
            public void testBlockUsesDifferentVar() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/blockUsesDifferentVar.kt");
            }
            
            @TestMetadata("conditionComparesNullWithNull.kt")
            public void testConditionComparesNullWithNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/conditionComparesNullWithNull.kt");
            }
            
            @TestMetadata("conditionInvalidBinaryExp.kt")
            public void testConditionInvalidBinaryExp() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/conditionInvalidBinaryExp.kt");
            }
            
            @TestMetadata("conditionNotBinaryExpr.kt")
            public void testConditionNotBinaryExpr() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/conditionNotBinaryExpr.kt");
            }
            
            @TestMetadata("doesNotinlineValueIfUsedMoreThanOnce.kt")
            public void testDoesNotinlineValueIfUsedMoreThanOnce() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/doesNotinlineValueIfUsedMoreThanOnce.kt");
            }
            
            @TestMetadata("doesNotinlineValueOutsideOfScope.kt")
            public void testDoesNotinlineValueOutsideOfScope() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/doesNotinlineValueOutsideOfScope.kt");
            }
            
            @TestMetadata("emptyCondition.kt")
            public void testEmptyCondition() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/emptyCondition.kt");
            }
            
            @TestMetadata("emptyElseBlock.kt")
            public void testEmptyElseBlock() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/emptyElseBlock.kt");
            }
            
            @TestMetadata("emptyThenBlock.kt")
            public void testEmptyThenBlock() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/emptyThenBlock.kt");
            }
            
            @TestMetadata("ifAndElseBothInBlocks.kt")
            public void testIfAndElseBothInBlocks() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/ifAndElseBothInBlocks.kt");
            }
            
            @TestMetadata("ifAndElseNotInBlocks.kt")
            public void testIfAndElseNotInBlocks() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/ifAndElseNotInBlocks.kt");
            }
            
            @TestMetadata("ifAsExpression.kt")
            public void testIfAsExpression() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/ifAsExpression.kt");
            }
            
            @TestMetadata("lhsEqualsNull.kt")
            public void testLhsEqualsNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/lhsEqualsNull.kt");
            }
            
            @TestMetadata("lhsNotEqualsNull.kt")
            public void testLhsNotEqualsNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/lhsNotEqualsNull.kt");
            }
            
            @TestMetadata("missingNecessaryElseClause.kt")
            public void testMissingNecessaryElseClause() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/missingNecessaryElseClause.kt");
            }
            
            @TestMetadata("missingNecessaryThenClause.kt")
            public void testMissingNecessaryThenClause() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/missingNecessaryThenClause.kt");
            }
            
            @TestMetadata("noCondition.kt")
            public void testNoCondition() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/noCondition.kt");
            }
            
            @TestMetadata("noElseBlock.kt")
            public void testNoElseBlock() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/noElseBlock.kt");
            }
            
            @TestMetadata("noNullInCondition.kt")
            public void testNoNullInCondition() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/noNullInCondition.kt");
            }
            
            @TestMetadata("noNullInCondition2.kt")
            public void testNoNullInCondition2() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/noNullInCondition2.kt");
            }
            
            @TestMetadata("noThenBlock.kt")
            public void testNoThenBlock() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/noThenBlock.kt");
            }
            
            @TestMetadata("notApplicableForFunction.kt")
            public void testNotApplicableForFunction() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/notApplicableForFunction.kt");
            }
            
            @TestMetadata("notApplicableForLocalVar.kt")
            public void testNotApplicableForLocalVar() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/notApplicableForLocalVar.kt");
            }
            
            @TestMetadata("otherBlockHasMoreThanOneStatement.kt")
            public void testOtherBlockHasMoreThanOneStatement() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/otherBlockHasMoreThanOneStatement.kt");
            }
            
            @TestMetadata("rhsEqualsNull.kt")
            public void testRhsEqualsNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/rhsEqualsNull.kt");
            }
            
            @TestMetadata("rhsNotEqualsNull.kt")
            public void testRhsNotEqualsNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/rhsNotEqualsNull.kt");
            }
            
            @TestMetadata("thenAndElseBothNull.kt")
            public void testThenAndElseBothNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/thenAndElseBothNull.kt");
            }
            
            @TestMetadata("thenAndElseNotNull.kt")
            public void testThenAndElseNotNull() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/thenAndElseNotNull.kt");
            }
            
            @TestMetadata("unacceptableEmptyElseBlock.kt")
            public void testUnacceptableEmptyElseBlock() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/unacceptableEmptyElseBlock.kt");
            }
            
            @TestMetadata("unacceptableEmptyThenBlock.kt")
            public void testUnacceptableEmptyThenBlock() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/unacceptableEmptyThenBlock.kt");
            }
            
            @TestMetadata("unacceptableNoElseBlock.kt")
            public void testUnacceptableNoElseBlock() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/unacceptableNoElseBlock.kt");
            }
            
            @TestMetadata("unacceptableNoThenBlock.kt")
            public void testUnacceptableNoThenBlock() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/unacceptableNoThenBlock.kt");
            }
            
            @TestMetadata("willNotInlineClassProperty.kt")
            public void testWillNotInlineClassProperty() throws Exception {
                doTest("idea/testData/intentions/branched/ifThenToSafeAccess/willNotInlineClassProperty.kt");
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("IfThenToSafeAccess");
                suite.addTestSuite(IfThenToSafeAccess.class);
                return suite;
            }
        }
        
        @TestMetadata("idea/testData/intentions/branched/ifWhen")
        @InnerTestClasses({IfWhen.IfToWhen.class, IfWhen.WhenToIf.class})
        public static class IfWhen extends AbstractIntentionTest {
            public void testAllFilesPresentInIfWhen() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/ifWhen"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("idea/testData/intentions/branched/ifWhen/ifToWhen")
            public static class IfToWhen extends AbstractIntentionTest {
                public void testAllFilesPresentInIfToWhen() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/ifWhen/ifToWhen"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("ifWithEqualityTests.kt")
                public void testIfWithEqualityTests() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithEqualityTests.kt");
                }
                
                @TestMetadata("ifWithIs.kt")
                public void testIfWithIs() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithIs.kt");
                }
                
                @TestMetadata("ifWithMultiConditions.kt")
                public void testIfWithMultiConditions() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithMultiConditions.kt");
                }
                
                @TestMetadata("ifWithNegativeIs.kt")
                public void testIfWithNegativeIs() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithNegativeIs.kt");
                }
                
                @TestMetadata("ifWithNegativeRangeTests.kt")
                public void testIfWithNegativeRangeTests() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithNegativeRangeTests.kt");
                }
                
                @TestMetadata("ifWithRangeTests.kt")
                public void testIfWithRangeTests() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithRangeTests.kt");
                }
                
                @TestMetadata("ifWithRangeTestsAndMultiConditions.kt")
                public void testIfWithRangeTestsAndMultiConditions() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithRangeTestsAndMultiConditions.kt");
                }
                
                @TestMetadata("ifWithRangeTestsAndUnparenthesizedMultiConditions.kt")
                public void testIfWithRangeTestsAndUnparenthesizedMultiConditions() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithRangeTestsAndUnparenthesizedMultiConditions.kt");
                }
                
                @TestMetadata("ifWithoutElse.kt")
                public void testIfWithoutElse() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/ifToWhen/ifWithoutElse.kt");
                }
                
                @TestMetadata("whenWithMultipleConditionTypes.kt")
                public void testWhenWithMultipleConditionTypes() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/ifToWhen/whenWithMultipleConditionTypes.kt");
                }
                
            }
            
            @TestMetadata("idea/testData/intentions/branched/ifWhen/whenToIf")
            public static class WhenToIf extends AbstractIntentionTest {
                public void testAllFilesPresentInWhenToIf() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/ifWhen/whenToIf"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("whenWithDotQualifiedExpression.kt")
                public void testWhenWithDotQualifiedExpression() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithDotQualifiedExpression.kt");
                }
                
                @TestMetadata("whenWithEqualityTests.kt")
                public void testWhenWithEqualityTests() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithEqualityTests.kt");
                }
                
                @TestMetadata("whenWithMultiConditions.kt")
                public void testWhenWithMultiConditions() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithMultiConditions.kt");
                }
                
                @TestMetadata("whenWithMultipleConditionTypes.kt")
                public void testWhenWithMultipleConditionTypes() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithMultipleConditionTypes.kt");
                }
                
                @TestMetadata("whenWithNegativePatterns.kt")
                public void testWhenWithNegativePatterns() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithNegativePatterns.kt");
                }
                
                @TestMetadata("whenWithNegativeRangeTests.kt")
                public void testWhenWithNegativeRangeTests() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithNegativeRangeTests.kt");
                }
                
                @TestMetadata("whenWithPatterns.kt")
                public void testWhenWithPatterns() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithPatterns.kt");
                }
                
                @TestMetadata("whenWithRangeTests.kt")
                public void testWhenWithRangeTests() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithRangeTests.kt");
                }
                
                @TestMetadata("whenWithRangeTestsAndMultiConditions.kt")
                public void testWhenWithRangeTestsAndMultiConditions() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithRangeTestsAndMultiConditions.kt");
                }
                
                @TestMetadata("whenWithoutElse.kt")
                public void testWhenWithoutElse() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithoutElse.kt");
                }
                
                @TestMetadata("whenWithoutSubject.kt")
                public void testWhenWithoutSubject() throws Exception {
                    doTest("idea/testData/intentions/branched/ifWhen/whenToIf/whenWithoutSubject.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("IfWhen");
                suite.addTestSuite(IfWhen.class);
                suite.addTestSuite(IfToWhen.class);
                suite.addTestSuite(WhenToIf.class);
                return suite;
            }
        }
        
        @TestMetadata("idea/testData/intentions/branched/safeAccessToIfThen")
        public static class SafeAccessToIfThen extends AbstractIntentionTest {
            public void testAllFilesPresentInSafeAccessToIfThen() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/safeAccessToIfThen"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("binaryExpressionLhs.kt")
            public void testBinaryExpressionLhs() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/binaryExpressionLhs.kt");
            }
            
            @TestMetadata("callExpression.kt")
            public void testCallExpression() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/callExpression.kt");
            }
            
            @TestMetadata("callExpressionParens.kt")
            public void testCallExpressionParens() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/callExpressionParens.kt");
            }
            
            @TestMetadata("customGetterAsReceiver.kt")
            public void testCustomGetterAsReceiver() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/customGetterAsReceiver.kt");
            }
            
            @TestMetadata("localValAsReceiver.kt")
            public void testLocalValAsReceiver() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/localValAsReceiver.kt");
            }
            
            @TestMetadata("localValLhs.kt")
            public void testLocalValLhs() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/localValLhs.kt");
            }
            
            @TestMetadata("localVarLhs.kt")
            public void testLocalVarLhs() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/localVarLhs.kt");
            }
            
            @TestMetadata("resultAssignedToLocalVal.kt")
            public void testResultAssignedToLocalVal() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/resultAssignedToLocalVal.kt");
            }
            
            @TestMetadata("safeAccessAsFunctionArgument.kt")
            public void testSafeAccessAsFunctionArgument() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/safeAccessAsFunctionArgument.kt");
            }
            
            @TestMetadata("simpleNameExpression.kt")
            public void testSimpleNameExpression() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/simpleNameExpression.kt");
            }
            
            @TestMetadata("simpleNameExpressionInParens.kt")
            public void testSimpleNameExpressionInParens() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/simpleNameExpressionInParens.kt");
            }
            
            @TestMetadata("simplePropertyAsReceiver.kt")
            public void testSimplePropertyAsReceiver() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/simplePropertyAsReceiver.kt");
            }
            
            @TestMetadata("simplePropertyAsReceiver2.kt")
            public void testSimplePropertyAsReceiver2() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/simplePropertyAsReceiver2.kt");
            }
            
            @TestMetadata("simplePropertyAsReceiver3.kt")
            public void testSimplePropertyAsReceiver3() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/simplePropertyAsReceiver3.kt");
            }
            
            @TestMetadata("topLevelVal.kt")
            public void testTopLevelVal() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/topLevelVal.kt");
            }
            
            @TestMetadata("topLevelValCustomGetter.kt")
            public void testTopLevelValCustomGetter() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/topLevelValCustomGetter.kt");
            }
            
            @TestMetadata("topLevelVar.kt")
            public void testTopLevelVar() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/topLevelVar.kt");
            }
            
            @TestMetadata("topLevelVarCustomGetter.kt")
            public void testTopLevelVarCustomGetter() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/topLevelVarCustomGetter.kt");
            }
            
            @TestMetadata("usedAsFunctionRhs.kt")
            public void testUsedAsFunctionRhs() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/usedAsFunctionRhs.kt");
            }
            
            @TestMetadata("usedAsResultOfCheckedIf.kt")
            public void testUsedAsResultOfCheckedIf() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/usedAsResultOfCheckedIf.kt");
            }
            
            @TestMetadata("usedAsReturnValue.kt")
            public void testUsedAsReturnValue() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/usedAsReturnValue.kt");
            }
            
            @TestMetadata("usedInUncheckedIfExpression.kt")
            public void testUsedInUncheckedIfExpression() throws Exception {
                doTest("idea/testData/intentions/branched/safeAccessToIfThen/usedInUncheckedIfExpression.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/intentions/branched/unfolding")
        @InnerTestClasses({Unfolding.AssignmentToIf.class, Unfolding.AssignmentToWhen.class, Unfolding.PropertyToIf.class, Unfolding.PropertyToWhen.class, Unfolding.ReturnToIf.class, Unfolding.ReturnToWhen.class})
        public static class Unfolding extends AbstractIntentionTest {
            public void testAllFilesPresentInUnfolding() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/unfolding"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("idea/testData/intentions/branched/unfolding/assignmentToIf")
            public static class AssignmentToIf extends AbstractIntentionTest {
                public void testAllFilesPresentInAssignmentToIf() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/unfolding/assignmentToIf"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("innerIfTransformed.kt")
                public void testInnerIfTransformed() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/assignmentToIf/innerIfTransformed.kt");
                }
                
                @TestMetadata("nestedIfs.kt")
                public void testNestedIfs() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/assignmentToIf/nestedIfs.kt");
                }
                
                @TestMetadata("simpleIf.kt")
                public void testSimpleIf() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/assignmentToIf/simpleIf.kt");
                }
                
                @TestMetadata("simpleIfWithAugmentedAssignment.kt")
                public void testSimpleIfWithAugmentedAssignment() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/assignmentToIf/simpleIfWithAugmentedAssignment.kt");
                }
                
                @TestMetadata("simpleIfWithBlocks.kt")
                public void testSimpleIfWithBlocks() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/assignmentToIf/simpleIfWithBlocks.kt");
                }
                
                @TestMetadata("simpleIfWithComplexAssignmentLHS.kt")
                public void testSimpleIfWithComplexAssignmentLHS() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/assignmentToIf/simpleIfWithComplexAssignmentLHS.kt");
                }
                
                @TestMetadata("simpleIfWithoutAssignment.kt")
                public void testSimpleIfWithoutAssignment() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/assignmentToIf/simpleIfWithoutAssignment.kt");
                }
                
            }
            
            @TestMetadata("idea/testData/intentions/branched/unfolding/assignmentToWhen")
            public static class AssignmentToWhen extends AbstractIntentionTest {
                public void testAllFilesPresentInAssignmentToWhen() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/unfolding/assignmentToWhen"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("innerWhenTransformed.kt")
                public void testInnerWhenTransformed() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/assignmentToWhen/innerWhenTransformed.kt");
                }
                
                @TestMetadata("simpleWhen.kt")
                public void testSimpleWhen() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/assignmentToWhen/simpleWhen.kt");
                }
                
                @TestMetadata("simpleWhenWithBlocks.kt")
                public void testSimpleWhenWithBlocks() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/assignmentToWhen/simpleWhenWithBlocks.kt");
                }
                
                @TestMetadata("simpleWhenWithComplexAssignmentLHS.kt")
                public void testSimpleWhenWithComplexAssignmentLHS() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/assignmentToWhen/simpleWhenWithComplexAssignmentLHS.kt");
                }
                
            }
            
            @TestMetadata("idea/testData/intentions/branched/unfolding/propertyToIf")
            public static class PropertyToIf extends AbstractIntentionTest {
                public void testAllFilesPresentInPropertyToIf() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/unfolding/propertyToIf"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("nestedIfs.kt")
                public void testNestedIfs() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/propertyToIf/nestedIfs.kt");
                }
                
                @TestMetadata("nestedIfs2.kt")
                public void testNestedIfs2() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/propertyToIf/nestedIfs2.kt");
                }
                
                @TestMetadata("nonLocalProperty.kt")
                public void testNonLocalProperty() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/propertyToIf/nonLocalProperty.kt");
                }
                
                @TestMetadata("nonLocalProperty2.kt")
                public void testNonLocalProperty2() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/propertyToIf/nonLocalProperty2.kt");
                }
                
                @TestMetadata("simpleIf.kt")
                public void testSimpleIf() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/propertyToIf/simpleIf.kt");
                }
                
                @TestMetadata("simpleIf2.kt")
                public void testSimpleIf2() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/propertyToIf/simpleIf2.kt");
                }
                
                @TestMetadata("simpleIfWithBlocks.kt")
                public void testSimpleIfWithBlocks() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/propertyToIf/simpleIfWithBlocks.kt");
                }
                
                @TestMetadata("simpleIfWithBlocks2.kt")
                public void testSimpleIfWithBlocks2() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/propertyToIf/simpleIfWithBlocks2.kt");
                }
                
                @TestMetadata("simpleIfWithType.kt")
                public void testSimpleIfWithType() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/propertyToIf/simpleIfWithType.kt");
                }
                
            }
            
            @TestMetadata("idea/testData/intentions/branched/unfolding/propertyToWhen")
            public static class PropertyToWhen extends AbstractIntentionTest {
                public void testAllFilesPresentInPropertyToWhen() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/unfolding/propertyToWhen"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("nonLocalProperty.kt")
                public void testNonLocalProperty() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/propertyToWhen/nonLocalProperty.kt");
                }
                
                @TestMetadata("nonLocalProperty2.kt")
                public void testNonLocalProperty2() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/propertyToWhen/nonLocalProperty2.kt");
                }
                
                @TestMetadata("simpleWhen.kt")
                public void testSimpleWhen() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/propertyToWhen/simpleWhen.kt");
                }
                
                @TestMetadata("simpleWhen2.kt")
                public void testSimpleWhen2() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/propertyToWhen/simpleWhen2.kt");
                }
                
                @TestMetadata("simpleWhenWithBlocks.kt")
                public void testSimpleWhenWithBlocks() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/propertyToWhen/simpleWhenWithBlocks.kt");
                }
                
                @TestMetadata("simpleWhenWithBlocks2.kt")
                public void testSimpleWhenWithBlocks2() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/propertyToWhen/simpleWhenWithBlocks2.kt");
                }
                
                @TestMetadata("simpleWhenWithType.kt")
                public void testSimpleWhenWithType() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/propertyToWhen/simpleWhenWithType.kt");
                }
                
            }
            
            @TestMetadata("idea/testData/intentions/branched/unfolding/returnToIf")
            public static class ReturnToIf extends AbstractIntentionTest {
                public void testAllFilesPresentInReturnToIf() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/unfolding/returnToIf"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("innerIfTransformed.kt")
                public void testInnerIfTransformed() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/returnToIf/innerIfTransformed.kt");
                }
                
                @TestMetadata("simpleIf.kt")
                public void testSimpleIf() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/returnToIf/simpleIf.kt");
                }
                
                @TestMetadata("simpleIfWithBlocks.kt")
                public void testSimpleIfWithBlocks() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/returnToIf/simpleIfWithBlocks.kt");
                }
                
            }
            
            @TestMetadata("idea/testData/intentions/branched/unfolding/returnToWhen")
            public static class ReturnToWhen extends AbstractIntentionTest {
                public void testAllFilesPresentInReturnToWhen() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/unfolding/returnToWhen"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("innerWhenTransformed.kt")
                public void testInnerWhenTransformed() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/returnToWhen/innerWhenTransformed.kt");
                }
                
                @TestMetadata("simpleWhen.kt")
                public void testSimpleWhen() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/returnToWhen/simpleWhen.kt");
                }
                
                @TestMetadata("simpleWhenWithBlocks.kt")
                public void testSimpleWhenWithBlocks() throws Exception {
                    doTest("idea/testData/intentions/branched/unfolding/returnToWhen/simpleWhenWithBlocks.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("Unfolding");
                suite.addTestSuite(Unfolding.class);
                suite.addTestSuite(AssignmentToIf.class);
                suite.addTestSuite(AssignmentToWhen.class);
                suite.addTestSuite(PropertyToIf.class);
                suite.addTestSuite(PropertyToWhen.class);
                suite.addTestSuite(ReturnToIf.class);
                suite.addTestSuite(ReturnToWhen.class);
                return suite;
            }
        }
        
        @TestMetadata("idea/testData/intentions/branched/when")
        @InnerTestClasses({When.EliminateSubject.class, When.Flatten.class, When.IntroduceSubject.class, When.Merge.class})
        public static class When extends AbstractIntentionTest {
            public void testAllFilesPresentInWhen() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/when"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("idea/testData/intentions/branched/when/eliminateSubject")
            public static class EliminateSubject extends AbstractIntentionTest {
                public void testAllFilesPresentInEliminateSubject() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/when/eliminateSubject"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("whenWithEqualityTests.kt")
                public void testWhenWithEqualityTests() throws Exception {
                    doTest("idea/testData/intentions/branched/when/eliminateSubject/whenWithEqualityTests.kt");
                }
                
                @TestMetadata("whenWithMultipleConditionTypes.kt")
                public void testWhenWithMultipleConditionTypes() throws Exception {
                    doTest("idea/testData/intentions/branched/when/eliminateSubject/whenWithMultipleConditionTypes.kt");
                }
                
                @TestMetadata("whenWithNegativePatterns.kt")
                public void testWhenWithNegativePatterns() throws Exception {
                    doTest("idea/testData/intentions/branched/when/eliminateSubject/whenWithNegativePatterns.kt");
                }
                
                @TestMetadata("whenWithNegativeRangeTests.kt")
                public void testWhenWithNegativeRangeTests() throws Exception {
                    doTest("idea/testData/intentions/branched/when/eliminateSubject/whenWithNegativeRangeTests.kt");
                }
                
                @TestMetadata("whenWithPatterns.kt")
                public void testWhenWithPatterns() throws Exception {
                    doTest("idea/testData/intentions/branched/when/eliminateSubject/whenWithPatterns.kt");
                }
                
                @TestMetadata("whenWithRangeTests.kt")
                public void testWhenWithRangeTests() throws Exception {
                    doTest("idea/testData/intentions/branched/when/eliminateSubject/whenWithRangeTests.kt");
                }
                
                @TestMetadata("whenWithRangeTestsAndMultiConditions.kt")
                public void testWhenWithRangeTestsAndMultiConditions() throws Exception {
                    doTest("idea/testData/intentions/branched/when/eliminateSubject/whenWithRangeTestsAndMultiConditions.kt");
                }
                
                @TestMetadata("whenWithoutSubject.kt")
                public void testWhenWithoutSubject() throws Exception {
                    doTest("idea/testData/intentions/branched/when/eliminateSubject/whenWithoutSubject.kt");
                }
                
            }
            
            @TestMetadata("idea/testData/intentions/branched/when/flatten")
            public static class Flatten extends AbstractIntentionTest {
                public void testAllFilesPresentInFlatten() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/when/flatten"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("flattenWithSubject.kt")
                public void testFlattenWithSubject() throws Exception {
                    doTest("idea/testData/intentions/branched/when/flatten/flattenWithSubject.kt");
                }
                
                @TestMetadata("flattenWithUnmatchedSubjects.kt")
                public void testFlattenWithUnmatchedSubjects() throws Exception {
                    doTest("idea/testData/intentions/branched/when/flatten/flattenWithUnmatchedSubjects.kt");
                }
                
                @TestMetadata("flattenWithoutSubject.kt")
                public void testFlattenWithoutSubject() throws Exception {
                    doTest("idea/testData/intentions/branched/when/flatten/flattenWithoutSubject.kt");
                }
                
            }
            
            @TestMetadata("idea/testData/intentions/branched/when/introduceSubject")
            public static class IntroduceSubject extends AbstractIntentionTest {
                public void testAllFilesPresentInIntroduceSubject() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/when/introduceSubject"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("whenWithEqualityTests.kt")
                public void testWhenWithEqualityTests() throws Exception {
                    doTest("idea/testData/intentions/branched/when/introduceSubject/whenWithEqualityTests.kt");
                }
                
                @TestMetadata("whenWithMultipleConditionTypes.kt")
                public void testWhenWithMultipleConditionTypes() throws Exception {
                    doTest("idea/testData/intentions/branched/when/introduceSubject/whenWithMultipleConditionTypes.kt");
                }
                
                @TestMetadata("whenWithNegativePatterns.kt")
                public void testWhenWithNegativePatterns() throws Exception {
                    doTest("idea/testData/intentions/branched/when/introduceSubject/whenWithNegativePatterns.kt");
                }
                
                @TestMetadata("whenWithNegativeRangeTests.kt")
                public void testWhenWithNegativeRangeTests() throws Exception {
                    doTest("idea/testData/intentions/branched/when/introduceSubject/whenWithNegativeRangeTests.kt");
                }
                
                @TestMetadata("whenWithNondivisibleConditions.kt")
                public void testWhenWithNondivisibleConditions() throws Exception {
                    doTest("idea/testData/intentions/branched/when/introduceSubject/whenWithNondivisibleConditions.kt");
                }
                
                @TestMetadata("whenWithPatterns.kt")
                public void testWhenWithPatterns() throws Exception {
                    doTest("idea/testData/intentions/branched/when/introduceSubject/whenWithPatterns.kt");
                }
                
                @TestMetadata("whenWithRangeTests.kt")
                public void testWhenWithRangeTests() throws Exception {
                    doTest("idea/testData/intentions/branched/when/introduceSubject/whenWithRangeTests.kt");
                }
                
                @TestMetadata("whenWithRangeTestsAndMultiConditions.kt")
                public void testWhenWithRangeTestsAndMultiConditions() throws Exception {
                    doTest("idea/testData/intentions/branched/when/introduceSubject/whenWithRangeTestsAndMultiConditions.kt");
                }
                
                @TestMetadata("whenWithSubject.kt")
                public void testWhenWithSubject() throws Exception {
                    doTest("idea/testData/intentions/branched/when/introduceSubject/whenWithSubject.kt");
                }
                
                @TestMetadata("whenWithSwappedEqualityTests.kt")
                public void testWhenWithSwappedEqualityTests() throws Exception {
                    doTest("idea/testData/intentions/branched/when/introduceSubject/whenWithSwappedEqualityTests.kt");
                }
                
                @TestMetadata("whenWithUnmatchedCandidateSubjects.kt")
                public void testWhenWithUnmatchedCandidateSubjects() throws Exception {
                    doTest("idea/testData/intentions/branched/when/introduceSubject/whenWithUnmatchedCandidateSubjects.kt");
                }
                
            }
            
            @TestMetadata("idea/testData/intentions/branched/when/merge")
            public static class Merge extends AbstractIntentionTest {
                public void testAllFilesPresentInMerge() throws Exception {
                    JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/branched/when/merge"), Pattern.compile("^(.+)\\.kt$"), true);
                }
                
                @TestMetadata("mergeBlockWithBlock.kt")
                public void testMergeBlockWithBlock() throws Exception {
                    doTest("idea/testData/intentions/branched/when/merge/mergeBlockWithBlock.kt");
                }
                
                @TestMetadata("mergeBlockWithSingle.kt")
                public void testMergeBlockWithSingle() throws Exception {
                    doTest("idea/testData/intentions/branched/when/merge/mergeBlockWithSingle.kt");
                }
                
                @TestMetadata("mergeWithConflictingDeclarations.kt")
                public void testMergeWithConflictingDeclarations() throws Exception {
                    doTest("idea/testData/intentions/branched/when/merge/mergeWithConflictingDeclarations.kt");
                }
                
                @TestMetadata("mergeWithDeclarations.kt")
                public void testMergeWithDeclarations() throws Exception {
                    doTest("idea/testData/intentions/branched/when/merge/mergeWithDeclarations.kt");
                }
                
                @TestMetadata("mergeWithReturnAfter.kt")
                public void testMergeWithReturnAfter() throws Exception {
                    doTest("idea/testData/intentions/branched/when/merge/mergeWithReturnAfter.kt");
                }
                
                @TestMetadata("mergeWithReturnBefore.kt")
                public void testMergeWithReturnBefore() throws Exception {
                    doTest("idea/testData/intentions/branched/when/merge/mergeWithReturnBefore.kt");
                }
                
                @TestMetadata("mergeWithSubject.kt")
                public void testMergeWithSubject() throws Exception {
                    doTest("idea/testData/intentions/branched/when/merge/mergeWithSubject.kt");
                }
                
                @TestMetadata("mergeWithUnmatchedConditions1.kt")
                public void testMergeWithUnmatchedConditions1() throws Exception {
                    doTest("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions1.kt");
                }
                
                @TestMetadata("mergeWithUnmatchedConditions2.kt")
                public void testMergeWithUnmatchedConditions2() throws Exception {
                    doTest("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions2.kt");
                }
                
                @TestMetadata("mergeWithUnmatchedConditions3.kt")
                public void testMergeWithUnmatchedConditions3() throws Exception {
                    doTest("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions3.kt");
                }
                
                @TestMetadata("mergeWithUnmatchedConditions4.kt")
                public void testMergeWithUnmatchedConditions4() throws Exception {
                    doTest("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions4.kt");
                }
                
                @TestMetadata("mergeWithUnmatchedConditions5.kt")
                public void testMergeWithUnmatchedConditions5() throws Exception {
                    doTest("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions5.kt");
                }
                
                @TestMetadata("mergeWithUnmatchedConditions6.kt")
                public void testMergeWithUnmatchedConditions6() throws Exception {
                    doTest("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions6.kt");
                }
                
                @TestMetadata("mergeWithUnmatchedConditions7.kt")
                public void testMergeWithUnmatchedConditions7() throws Exception {
                    doTest("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedConditions7.kt");
                }
                
                @TestMetadata("mergeWithUnmatchedSubjects1.kt")
                public void testMergeWithUnmatchedSubjects1() throws Exception {
                    doTest("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedSubjects1.kt");
                }
                
                @TestMetadata("mergeWithUnmatchedSubjects2.kt")
                public void testMergeWithUnmatchedSubjects2() throws Exception {
                    doTest("idea/testData/intentions/branched/when/merge/mergeWithUnmatchedSubjects2.kt");
                }
                
                @TestMetadata("mergeWithoutSubject.kt")
                public void testMergeWithoutSubject() throws Exception {
                    doTest("idea/testData/intentions/branched/when/merge/mergeWithoutSubject.kt");
                }
                
            }
            
            public static Test innerSuite() {
                TestSuite suite = new TestSuite("When");
                suite.addTestSuite(When.class);
                suite.addTestSuite(EliminateSubject.class);
                suite.addTestSuite(Flatten.class);
                suite.addTestSuite(IntroduceSubject.class);
                suite.addTestSuite(Merge.class);
                return suite;
            }
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("Branched");
            suite.addTestSuite(Branched.class);
            suite.addTestSuite(DoubleBangToIfThen.class);
            suite.addTestSuite(ElvisToIfThen.class);
            suite.addTest(Folding.innerSuite());
            suite.addTestSuite(IfThenToDoubleBang.class);
            suite.addTest(IfThenToElvis.innerSuite());
            suite.addTest(IfThenToSafeAccess.innerSuite());
            suite.addTest(IfWhen.innerSuite());
            suite.addTestSuite(SafeAccessToIfThen.class);
            suite.addTest(Unfolding.innerSuite());
            suite.addTest(When.innerSuite());
            return suite;
        }
    }
    
    @TestMetadata("idea/testData/intentions/convertAssertToIf")
    public static class ConvertAssertToIf extends AbstractIntentionTest {
        public void testAllFilesPresentInConvertAssertToIf() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/convertAssertToIf"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("assertErrorOverloaded.kt")
        public void testAssertErrorOverloaded() throws Exception {
            doTest("idea/testData/intentions/convertAssertToIf/assertErrorOverloaded.kt");
        }
        
        @TestMetadata("booleanCondition.kt")
        public void testBooleanCondition() throws Exception {
            doTest("idea/testData/intentions/convertAssertToIf/booleanCondition.kt");
        }
        
        @TestMetadata("booleanConditionSimplified.kt")
        public void testBooleanConditionSimplified() throws Exception {
            doTest("idea/testData/intentions/convertAssertToIf/booleanConditionSimplified.kt");
        }
        
        @TestMetadata("booleanConditionSimplified2.kt")
        public void testBooleanConditionSimplified2() throws Exception {
            doTest("idea/testData/intentions/convertAssertToIf/booleanConditionSimplified2.kt");
        }
        
        @TestMetadata("booleanConditionWithVariables.kt")
        public void testBooleanConditionWithVariables() throws Exception {
            doTest("idea/testData/intentions/convertAssertToIf/booleanConditionWithVariables.kt");
        }
        
        @TestMetadata("doNotShortenReferenceInsideMessage.kt")
        public void testDoNotShortenReferenceInsideMessage() throws Exception {
            doTest("idea/testData/intentions/convertAssertToIf/doNotShortenReferenceInsideMessage.kt");
        }
        
        @TestMetadata("dotQualifiedCall.kt")
        public void testDotQualifiedCall() throws Exception {
            doTest("idea/testData/intentions/convertAssertToIf/dotQualifiedCall.kt");
        }
        
        @TestMetadata("functionCallCondition.kt")
        public void testFunctionCallCondition() throws Exception {
            doTest("idea/testData/intentions/convertAssertToIf/functionCallCondition.kt");
        }
        
        @TestMetadata("functionMessageInsideParentheses.kt")
        public void testFunctionMessageInsideParentheses() throws Exception {
            doTest("idea/testData/intentions/convertAssertToIf/functionMessageInsideParentheses.kt");
        }
        
        @TestMetadata("inapplicableAssertOverloaded.kt")
        public void testInapplicableAssertOverloaded() throws Exception {
            doTest("idea/testData/intentions/convertAssertToIf/inapplicableAssertOverloaded.kt");
        }
        
        @TestMetadata("inapplicableAssertOverloadedWithPackage.kt")
        public void testInapplicableAssertOverloadedWithPackage() throws Exception {
            doTest("idea/testData/intentions/convertAssertToIf/inapplicableAssertOverloadedWithPackage.kt");
        }
        
        @TestMetadata("inapplicableNoCondition.kt")
        public void testInapplicableNoCondition() throws Exception {
            doTest("idea/testData/intentions/convertAssertToIf/inapplicableNoCondition.kt");
        }
        
        @TestMetadata("lambdaMessageInsideParentheses.kt")
        public void testLambdaMessageInsideParentheses() throws Exception {
            doTest("idea/testData/intentions/convertAssertToIf/lambdaMessageInsideParentheses.kt");
        }
        
        @TestMetadata("lambdaMessageOutsideParentheses.kt")
        public void testLambdaMessageOutsideParentheses() throws Exception {
            doTest("idea/testData/intentions/convertAssertToIf/lambdaMessageOutsideParentheses.kt");
        }
        
        @TestMetadata("lambdaVariable.kt")
        public void testLambdaVariable() throws Exception {
            doTest("idea/testData/intentions/convertAssertToIf/lambdaVariable.kt");
        }
        
        @TestMetadata("noMessage.kt")
        public void testNoMessage() throws Exception {
            doTest("idea/testData/intentions/convertAssertToIf/noMessage.kt");
        }
        
        @TestMetadata("parenthesizedCondition.kt")
        public void testParenthesizedCondition() throws Exception {
            doTest("idea/testData/intentions/convertAssertToIf/parenthesizedCondition.kt");
        }
        
        @TestMetadata("simpleConvert.kt")
        public void testSimpleConvert() throws Exception {
            doTest("idea/testData/intentions/convertAssertToIf/simpleConvert.kt");
        }
        
        @TestMetadata("stringVariable.kt")
        public void testStringVariable() throws Exception {
            doTest("idea/testData/intentions/convertAssertToIf/stringVariable.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/convertIfToAssert")
    public static class ConvertIfToAssert extends AbstractIntentionTest {
        public void testAllFilesPresentInConvertIfToAssert() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/convertIfToAssert"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("assertOverloaded.kt")
        public void testAssertOverloaded() throws Exception {
            doTest("idea/testData/intentions/convertIfToAssert/assertOverloaded.kt");
        }
        
        @TestMetadata("assertOverloaded2.kt")
        public void testAssertOverloaded2() throws Exception {
            doTest("idea/testData/intentions/convertIfToAssert/assertOverloaded2.kt");
        }
        
        @TestMetadata("booleanCondition.kt")
        public void testBooleanCondition() throws Exception {
            doTest("idea/testData/intentions/convertIfToAssert/booleanCondition.kt");
        }
        
        @TestMetadata("dotQualifiedThrow.kt")
        public void testDotQualifiedThrow() throws Exception {
            doTest("idea/testData/intentions/convertIfToAssert/dotQualifiedThrow.kt");
        }
        
        @TestMetadata("inapplicableAssertionErrorOverloaded.kt")
        public void testInapplicableAssertionErrorOverloaded() throws Exception {
            doTest("idea/testData/intentions/convertIfToAssert/inapplicableAssertionErrorOverloaded.kt");
        }
        
        @TestMetadata("inapplicableCauseSent.kt")
        public void testInapplicableCauseSent() throws Exception {
            doTest("idea/testData/intentions/convertIfToAssert/inapplicableCauseSent.kt");
        }
        
        @TestMetadata("inapplicableHasElse.kt")
        public void testInapplicableHasElse() throws Exception {
            doTest("idea/testData/intentions/convertIfToAssert/inapplicableHasElse.kt");
        }
        
        @TestMetadata("inapplicableMoreThanSingleExpression.kt")
        public void testInapplicableMoreThanSingleExpression() throws Exception {
            doTest("idea/testData/intentions/convertIfToAssert/inapplicableMoreThanSingleExpression.kt");
        }
        
        @TestMetadata("inapplicableMoreThanSingleExpression2.kt")
        public void testInapplicableMoreThanSingleExpression2() throws Exception {
            doTest("idea/testData/intentions/convertIfToAssert/inapplicableMoreThanSingleExpression2.kt");
        }
        
        @TestMetadata("noMessageSent.kt")
        public void testNoMessageSent() throws Exception {
            doTest("idea/testData/intentions/convertIfToAssert/noMessageSent.kt");
        }
        
        @TestMetadata("nullSent.kt")
        public void testNullSent() throws Exception {
            doTest("idea/testData/intentions/convertIfToAssert/nullSent.kt");
        }
        
        @TestMetadata("simpleConvert.kt")
        public void testSimpleConvert() throws Exception {
            doTest("idea/testData/intentions/convertIfToAssert/simpleConvert.kt");
        }
        
        @TestMetadata("simplifiedCondition.kt")
        public void testSimplifiedCondition() throws Exception {
            doTest("idea/testData/intentions/convertIfToAssert/simplifiedCondition.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/convertNegatedBooleanSequence")
    public static class ConvertNegatedBooleanSequence extends AbstractIntentionTest {
        public void testAllFilesPresentInConvertNegatedBooleanSequence() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/convertNegatedBooleanSequence"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("complexNegatedSequence.kt")
        public void testComplexNegatedSequence() throws Exception {
            doTest("idea/testData/intentions/convertNegatedBooleanSequence/complexNegatedSequence.kt");
        }
        
        @TestMetadata("conjunctionOfThreeNegations.kt")
        public void testConjunctionOfThreeNegations() throws Exception {
            doTest("idea/testData/intentions/convertNegatedBooleanSequence/conjunctionOfThreeNegations.kt");
        }
        
        @TestMetadata("conjunctionOfTwoNegations.kt")
        public void testConjunctionOfTwoNegations() throws Exception {
            doTest("idea/testData/intentions/convertNegatedBooleanSequence/conjunctionOfTwoNegations.kt");
        }
        
        @TestMetadata("disjunctionOfTwoNegations.kt")
        public void testDisjunctionOfTwoNegations() throws Exception {
            doTest("idea/testData/intentions/convertNegatedBooleanSequence/disjunctionOfTwoNegations.kt");
        }
        
        @TestMetadata("doubleParenthesizedExpression.kt")
        public void testDoubleParenthesizedExpression() throws Exception {
            doTest("idea/testData/intentions/convertNegatedBooleanSequence/doubleParenthesizedExpression.kt");
        }
        
        @TestMetadata("inapplicableMixedOperators.kt")
        public void testInapplicableMixedOperators() throws Exception {
            doTest("idea/testData/intentions/convertNegatedBooleanSequence/inapplicableMixedOperators.kt");
        }
        
        @TestMetadata("inapplicableMixedSequence.kt")
        public void testInapplicableMixedSequence() throws Exception {
            doTest("idea/testData/intentions/convertNegatedBooleanSequence/inapplicableMixedSequence.kt");
        }
        
        @TestMetadata("inapplicableSingleExpression.kt")
        public void testInapplicableSingleExpression() throws Exception {
            doTest("idea/testData/intentions/convertNegatedBooleanSequence/inapplicableSingleExpression.kt");
        }
        
        @TestMetadata("negatedFunction.kt")
        public void testNegatedFunction() throws Exception {
            doTest("idea/testData/intentions/convertNegatedBooleanSequence/negatedFunction.kt");
        }
        
        @TestMetadata("parenthesizedConjunctionOfTwoNegations.kt")
        public void testParenthesizedConjunctionOfTwoNegations() throws Exception {
            doTest("idea/testData/intentions/convertNegatedBooleanSequence/parenthesizedConjunctionOfTwoNegations.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw")
    public static class ConvertNegatedExpressionWithDemorgansLaw extends AbstractIntentionTest {
        public void testAllFilesPresentInConvertNegatedExpressionWithDemorgansLaw() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("complexNegation1.kt")
        public void testComplexNegation1() throws Exception {
            doTest("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/complexNegation1.kt");
        }
        
        @TestMetadata("complexNegation2.kt")
        public void testComplexNegation2() throws Exception {
            doTest("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/complexNegation2.kt");
        }
        
        @TestMetadata("conjunctionNegation1.kt")
        public void testConjunctionNegation1() throws Exception {
            doTest("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/conjunctionNegation1.kt");
        }
        
        @TestMetadata("conjunctionNegation2.kt")
        public void testConjunctionNegation2() throws Exception {
            doTest("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/conjunctionNegation2.kt");
        }
        
        @TestMetadata("disjunctionNegation1.kt")
        public void testDisjunctionNegation1() throws Exception {
            doTest("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/disjunctionNegation1.kt");
        }
        
        @TestMetadata("disjunctionNegation2.kt")
        public void testDisjunctionNegation2() throws Exception {
            doTest("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/disjunctionNegation2.kt");
        }
        
        @TestMetadata("doubleNegation.kt")
        public void testDoubleNegation() throws Exception {
            doTest("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/doubleNegation.kt");
        }
        
        @TestMetadata("inapplicableNormalExpression.kt")
        public void testInapplicableNormalExpression() throws Exception {
            doTest("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/inapplicableNormalExpression.kt");
        }
        
        @TestMetadata("inapplicableOperator.kt")
        public void testInapplicableOperator() throws Exception {
            doTest("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/inapplicableOperator.kt");
        }
        
        @TestMetadata("inapplicableTriple.kt")
        public void testInapplicableTriple() throws Exception {
            doTest("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/inapplicableTriple.kt");
        }
        
        @TestMetadata("longMixedExpression.kt")
        public void testLongMixedExpression() throws Exception {
            doTest("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/longMixedExpression.kt");
        }
        
        @TestMetadata("mixedExpression.kt")
        public void testMixedExpression() throws Exception {
            doTest("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/mixedExpression.kt");
        }
        
        @TestMetadata("nonstandardPrefixOperator.kt")
        public void testNonstandardPrefixOperator() throws Exception {
            doTest("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/nonstandardPrefixOperator.kt");
        }
        
        @TestMetadata("retainedParens.kt")
        public void testRetainedParens() throws Exception {
            doTest("idea/testData/intentions/convertNegatedExpressionWithDemorgansLaw/retainedParens.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/convertToBlockBody")
    public static class ConvertToBlockBody extends AbstractIntentionTest {
        public void testAllFilesPresentInConvertToBlockBody() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/convertToBlockBody"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("explicitlyNonUnitFun.kt")
        public void testExplicitlyNonUnitFun() throws Exception {
            doTest("idea/testData/intentions/convertToBlockBody/explicitlyNonUnitFun.kt");
        }
        
        @TestMetadata("explicitlyTypedFunWithUnresolvedExpression.kt")
        public void testExplicitlyTypedFunWithUnresolvedExpression() throws Exception {
            doTest("idea/testData/intentions/convertToBlockBody/explicitlyTypedFunWithUnresolvedExpression.kt");
        }
        
        @TestMetadata("explicitlyTypedFunWithUnresolvedType.kt")
        public void testExplicitlyTypedFunWithUnresolvedType() throws Exception {
            doTest("idea/testData/intentions/convertToBlockBody/explicitlyTypedFunWithUnresolvedType.kt");
        }
        
        @TestMetadata("explicitlyUnitFun.kt")
        public void testExplicitlyUnitFun() throws Exception {
            doTest("idea/testData/intentions/convertToBlockBody/explicitlyUnitFun.kt");
        }
        
        @TestMetadata("explicitlyUnitFunWithUnresolvedExpression.kt")
        public void testExplicitlyUnitFunWithUnresolvedExpression() throws Exception {
            doTest("idea/testData/intentions/convertToBlockBody/explicitlyUnitFunWithUnresolvedExpression.kt");
        }
        
        @TestMetadata("funWithThrow.kt")
        public void testFunWithThrow() throws Exception {
            doTest("idea/testData/intentions/convertToBlockBody/funWithThrow.kt");
        }
        
        @TestMetadata("getter.kt")
        public void testGetter() throws Exception {
            doTest("idea/testData/intentions/convertToBlockBody/getter.kt");
        }
        
        @TestMetadata("getterWithThrow.kt")
        public void testGetterWithThrow() throws Exception {
            doTest("idea/testData/intentions/convertToBlockBody/getterWithThrow.kt");
        }
        
        @TestMetadata("implicitlyNonUnitFun.kt")
        public void testImplicitlyNonUnitFun() throws Exception {
            doTest("idea/testData/intentions/convertToBlockBody/implicitlyNonUnitFun.kt");
        }
        
        @TestMetadata("implicitlyTypedFunWithUnresolvedType.kt")
        public void testImplicitlyTypedFunWithUnresolvedType() throws Exception {
            doTest("idea/testData/intentions/convertToBlockBody/implicitlyTypedFunWithUnresolvedType.kt");
        }
        
        @TestMetadata("implicitlyUnitFun.kt")
        public void testImplicitlyUnitFun() throws Exception {
            doTest("idea/testData/intentions/convertToBlockBody/implicitlyUnitFun.kt");
        }
        
        @TestMetadata("nothingFun.kt")
        public void testNothingFun() throws Exception {
            doTest("idea/testData/intentions/convertToBlockBody/nothingFun.kt");
        }
        
        @TestMetadata("setter.kt")
        public void testSetter() throws Exception {
            doTest("idea/testData/intentions/convertToBlockBody/setter.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/convertToConcatenatedStringIntention")
    public static class ConvertToConcatenatedStringIntention extends AbstractIntentionTest {
        public void testAllFilesPresentInConvertToConcatenatedStringIntention() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/convertToConcatenatedStringIntention"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("embeddedIf.kt")
        public void testEmbeddedIf() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/embeddedIf.kt");
        }
        
        @TestMetadata("embeddedIfBraces.kt")
        public void testEmbeddedIfBraces() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/embeddedIfBraces.kt");
        }
        
        @TestMetadata("handlesEscapeString.kt")
        public void testHandlesEscapeString() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/handlesEscapeString.kt");
        }
        
        @TestMetadata("interpolate2StringConstants.kt")
        public void testInterpolate2StringConstants() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/interpolate2StringConstants.kt");
        }
        
        @TestMetadata("interpolate3.kt")
        public void testInterpolate3() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/interpolate3.kt");
        }
        
        @TestMetadata("interpolateChar.kt")
        public void testInterpolateChar() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/interpolateChar.kt");
        }
        
        @TestMetadata("interpolateConstants.kt")
        public void testInterpolateConstants() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/interpolateConstants.kt");
        }
        
        @TestMetadata("interpolateMapAccess.kt")
        public void testInterpolateMapAccess() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/interpolateMapAccess.kt");
        }
        
        @TestMetadata("interpolateMethodInvoke.kt")
        public void testInterpolateMethodInvoke() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/interpolateMethodInvoke.kt");
        }
        
        @TestMetadata("interpolateSimpleWithBraces.kt")
        public void testInterpolateSimpleWithBraces() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/interpolateSimpleWithBraces.kt");
        }
        
        @TestMetadata("interpolateStringWithFloat.kt")
        public void testInterpolateStringWithFloat() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/interpolateStringWithFloat.kt");
        }
        
        @TestMetadata("interpolateStringWithInt.kt")
        public void testInterpolateStringWithInt() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/interpolateStringWithInt.kt");
        }
        
        @TestMetadata("lastExprIsNamedExpression.kt")
        public void testLastExprIsNamedExpression() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/lastExprIsNamedExpression.kt");
        }
        
        @TestMetadata("multilineString.kt")
        public void testMultilineString() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/multilineString.kt");
        }
        
        @TestMetadata("multilineWhenExpr.kt")
        public void testMultilineWhenExpr() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/multilineWhenExpr.kt");
        }
        
        @TestMetadata("namedExprBetweenConstants.kt")
        public void testNamedExprBetweenConstants() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/namedExprBetweenConstants.kt");
        }
        
        @TestMetadata("notApplicableForErrorElement.kt")
        public void testNotApplicableForErrorElement() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/notApplicableForErrorElement.kt");
        }
        
        @TestMetadata("notApplicableForSimple.kt")
        public void testNotApplicableForSimple() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/notApplicableForSimple.kt");
        }
        
        @TestMetadata("notAvailableForDollarSignLiteral.kt")
        public void testNotAvailableForDollarSignLiteral() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/notAvailableForDollarSignLiteral.kt");
        }
        
        @TestMetadata("singleVar.kt")
        public void testSingleVar() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/singleVar.kt");
        }
        
        @TestMetadata("startsWithInt.kt")
        public void testStartsWithInt() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/startsWithInt.kt");
        }
        
        @TestMetadata("startsWithStringExpression.kt")
        public void testStartsWithStringExpression() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/startsWithStringExpression.kt");
        }
        
        @TestMetadata("tricky.kt")
        public void testTricky() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/tricky.kt");
        }
        
        @TestMetadata("withAndWithoutBraces.kt")
        public void testWithAndWithoutBraces() throws Exception {
            doTest("idea/testData/intentions/convertToConcatenatedStringIntention/withAndWithoutBraces.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/convertToExpressionBody")
    public static class ConvertToExpressionBody extends AbstractIntentionTest {
        public void testAllFilesPresentInConvertToExpressionBody() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/convertToExpressionBody"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("anonymousObjectExpression.kt")
        public void testAnonymousObjectExpression() throws Exception {
            doTest("idea/testData/intentions/convertToExpressionBody/anonymousObjectExpression.kt");
        }
        
        @TestMetadata("assignment.kt")
        public void testAssignment() throws Exception {
            doTest("idea/testData/intentions/convertToExpressionBody/assignment.kt");
        }
        
        @TestMetadata("declaration.kt")
        public void testDeclaration() throws Exception {
            doTest("idea/testData/intentions/convertToExpressionBody/declaration.kt");
        }
        
        @TestMetadata("expressionWithReturns1.kt")
        public void testExpressionWithReturns1() throws Exception {
            doTest("idea/testData/intentions/convertToExpressionBody/expressionWithReturns1.kt");
        }
        
        @TestMetadata("expressionWithReturns2.kt")
        public void testExpressionWithReturns2() throws Exception {
            doTest("idea/testData/intentions/convertToExpressionBody/expressionWithReturns2.kt");
        }
        
        @TestMetadata("funWithImplicitUnitTypeWithThrow.kt")
        public void testFunWithImplicitUnitTypeWithThrow() throws Exception {
            doTest("idea/testData/intentions/convertToExpressionBody/funWithImplicitUnitTypeWithThrow.kt");
        }
        
        @TestMetadata("funWithNoBlock.kt")
        public void testFunWithNoBlock() throws Exception {
            doTest("idea/testData/intentions/convertToExpressionBody/funWithNoBlock.kt");
        }
        
        @TestMetadata("funWithNothingType.kt")
        public void testFunWithNothingType() throws Exception {
            doTest("idea/testData/intentions/convertToExpressionBody/funWithNothingType.kt");
        }
        
        @TestMetadata("funWithReturn.kt")
        public void testFunWithReturn() throws Exception {
            doTest("idea/testData/intentions/convertToExpressionBody/funWithReturn.kt");
        }
        
        @TestMetadata("funWithUnitType.kt")
        public void testFunWithUnitType() throws Exception {
            doTest("idea/testData/intentions/convertToExpressionBody/funWithUnitType.kt");
        }
        
        @TestMetadata("funWithUnitType2.kt")
        public void testFunWithUnitType2() throws Exception {
            doTest("idea/testData/intentions/convertToExpressionBody/funWithUnitType2.kt");
        }
        
        @TestMetadata("funWithUnitTypeWithThrow.kt")
        public void testFunWithUnitTypeWithThrow() throws Exception {
            doTest("idea/testData/intentions/convertToExpressionBody/funWithUnitTypeWithThrow.kt");
        }
        
        @TestMetadata("functionLiteral.kt")
        public void testFunctionLiteral() throws Exception {
            doTest("idea/testData/intentions/convertToExpressionBody/functionLiteral.kt");
        }
        
        @TestMetadata("getWithReturn.kt")
        public void testGetWithReturn() throws Exception {
            doTest("idea/testData/intentions/convertToExpressionBody/getWithReturn.kt");
        }
        
        @TestMetadata("multipleStatements.kt")
        public void testMultipleStatements() throws Exception {
            doTest("idea/testData/intentions/convertToExpressionBody/multipleStatements.kt");
        }
        
        @TestMetadata("returnWithNoValue.kt")
        public void testReturnWithNoValue() throws Exception {
            doTest("idea/testData/intentions/convertToExpressionBody/returnWithNoValue.kt");
        }
        
        @TestMetadata("while.kt")
        public void testWhile() throws Exception {
            doTest("idea/testData/intentions/convertToExpressionBody/while.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/convertToForEachFunctionCall")
    public static class ConvertToForEachFunctionCall extends AbstractIntentionTest {
        public void testAllFilesPresentInConvertToForEachFunctionCall() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/convertToForEachFunctionCall"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("binaryExpressionLoopRange.kt")
        public void testBinaryExpressionLoopRange() throws Exception {
            doTest("idea/testData/intentions/convertToForEachFunctionCall/binaryExpressionLoopRange.kt");
        }
        
        @TestMetadata("blockBodyExpression.kt")
        public void testBlockBodyExpression() throws Exception {
            doTest("idea/testData/intentions/convertToForEachFunctionCall/blockBodyExpression.kt");
        }
        
        @TestMetadata("iterativeElementTypeSpecified.kt")
        public void testIterativeElementTypeSpecified() throws Exception {
            doTest("idea/testData/intentions/convertToForEachFunctionCall/iterativeElementTypeSpecified.kt");
        }
        
        @TestMetadata("noCurlyBraces.kt")
        public void testNoCurlyBraces() throws Exception {
            doTest("idea/testData/intentions/convertToForEachFunctionCall/noCurlyBraces.kt");
        }
        
        @TestMetadata("noStatements.kt")
        public void testNoStatements() throws Exception {
            doTest("idea/testData/intentions/convertToForEachFunctionCall/noStatements.kt");
        }
        
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            doTest("idea/testData/intentions/convertToForEachFunctionCall/simple.kt");
        }
        
        @TestMetadata("typeAnnotatedWithNonBlockBody.kt")
        public void testTypeAnnotatedWithNonBlockBody() throws Exception {
            doTest("idea/testData/intentions/convertToForEachFunctionCall/typeAnnotatedWithNonBlockBody.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/convertToForEachLoop")
    public static class ConvertToForEachLoop extends AbstractIntentionTest {
        public void testAllFilesPresentInConvertToForEachLoop() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/convertToForEachLoop"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("complexReceiver.kt")
        public void testComplexReceiver() throws Exception {
            doTest("idea/testData/intentions/convertToForEachLoop/complexReceiver.kt");
        }
        
        @TestMetadata("explicitFunctionLiteral.kt")
        public void testExplicitFunctionLiteral() throws Exception {
            doTest("idea/testData/intentions/convertToForEachLoop/explicitFunctionLiteral.kt");
        }
        
        @TestMetadata("extraArguments.kt")
        public void testExtraArguments() throws Exception {
            doTest("idea/testData/intentions/convertToForEachLoop/extraArguments.kt");
        }
        
        @TestMetadata("implicitFunctionLiteralParameter.kt")
        public void testImplicitFunctionLiteralParameter() throws Exception {
            doTest("idea/testData/intentions/convertToForEachLoop/implicitFunctionLiteralParameter.kt");
        }
        
        @TestMetadata("infixCall.kt")
        public void testInfixCall() throws Exception {
            doTest("idea/testData/intentions/convertToForEachLoop/infixCall.kt");
        }
        
        @TestMetadata("parenthesizedExpression.kt")
        public void testParenthesizedExpression() throws Exception {
            doTest("idea/testData/intentions/convertToForEachLoop/parenthesizedExpression.kt");
        }
        
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            doTest("idea/testData/intentions/convertToForEachLoop/simple.kt");
        }
        
        @TestMetadata("typeArgumentPresent.kt")
        public void testTypeArgumentPresent() throws Exception {
            doTest("idea/testData/intentions/convertToForEachLoop/typeArgumentPresent.kt");
        }
        
        @TestMetadata("userDefined.kt")
        public void testUserDefined() throws Exception {
            doTest("idea/testData/intentions/convertToForEachLoop/userDefined.kt");
        }
        
        @TestMetadata("zeroArguments.kt")
        public void testZeroArguments() throws Exception {
            doTest("idea/testData/intentions/convertToForEachLoop/zeroArguments.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/convertToStringTemplateIntention")
    public static class ConvertToStringTemplateIntention extends AbstractIntentionTest {
        public void testAllFilesPresentInConvertToStringTemplateIntention() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/convertToStringTemplateIntention"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("backslashNMultilineString.kt")
        public void testBackslashNMultilineString() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/backslashNMultilineString.kt");
        }
        
        @TestMetadata("combineEmptyStrings.kt")
        public void testCombineEmptyStrings() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/combineEmptyStrings.kt");
        }
        
        @TestMetadata("combinesNonStringsAsStrings.kt")
        public void testCombinesNonStringsAsStrings() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/combinesNonStringsAsStrings.kt");
        }
        
        @TestMetadata("combinesNonStringsAsStrings2.kt")
        public void testCombinesNonStringsAsStrings2() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/combinesNonStringsAsStrings2.kt");
        }
        
        @TestMetadata("consecutiveNewlines.kt")
        public void testConsecutiveNewlines() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/consecutiveNewlines.kt");
        }
        
        @TestMetadata("doesNotCorruptExistingTemplate.kt")
        public void testDoesNotCorruptExistingTemplate() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/doesNotCorruptExistingTemplate.kt");
        }
        
        @TestMetadata("doesNotCorruptExistingTemplateWithBraces.kt")
        public void testDoesNotCorruptExistingTemplateWithBraces() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/doesNotCorruptExistingTemplateWithBraces.kt");
        }
        
        @TestMetadata("insertBracesForSimpleNamedExpression.kt")
        public void testInsertBracesForSimpleNamedExpression() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/insertBracesForSimpleNamedExpression.kt");
        }
        
        @TestMetadata("interpolate2StringConstants.kt")
        public void testInterpolate2StringConstants() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/interpolate2StringConstants.kt");
        }
        
        @TestMetadata("interpolate2Vals.kt")
        public void testInterpolate2Vals() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/interpolate2Vals.kt");
        }
        
        @TestMetadata("interpolate3Left.kt")
        public void testInterpolate3Left() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/interpolate3Left.kt");
        }
        
        @TestMetadata("interpolate3Right.kt")
        public void testInterpolate3Right() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/interpolate3Right.kt");
        }
        
        @TestMetadata("interpolateChar.kt")
        public void testInterpolateChar() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/interpolateChar.kt");
        }
        
        @TestMetadata("interpolateDollarSign.kt")
        public void testInterpolateDollarSign() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/interpolateDollarSign.kt");
        }
        
        @TestMetadata("interpolateMapAccess.kt")
        public void testInterpolateMapAccess() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/interpolateMapAccess.kt");
        }
        
        @TestMetadata("interpolateMethodInvoke.kt")
        public void testInterpolateMethodInvoke() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/interpolateMethodInvoke.kt");
        }
        
        @TestMetadata("interpolateMultiline.kt")
        public void testInterpolateMultiline() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/interpolateMultiline.kt");
        }
        
        @TestMetadata("interpolateStringWithFloat.kt")
        public void testInterpolateStringWithFloat() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/interpolateStringWithFloat.kt");
        }
        
        @TestMetadata("interpolateStringWithInt.kt")
        public void testInterpolateStringWithInt() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/interpolateStringWithInt.kt");
        }
        
        @TestMetadata("multilineString.kt")
        public void testMultilineString() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/multilineString.kt");
        }
        
        @TestMetadata("noBracesForLastSimpleExpression.kt")
        public void testNoBracesForLastSimpleExpression() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/noBracesForLastSimpleExpression.kt");
        }
        
        @TestMetadata("noBracesSimpleFollowedByDot.kt")
        public void testNoBracesSimpleFollowedByDot() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/noBracesSimpleFollowedByDot.kt");
        }
        
        @TestMetadata("notApplicableForErrorElement.kt")
        public void testNotApplicableForErrorElement() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/notApplicableForErrorElement.kt");
        }
        
        @TestMetadata("onlyForConcat.kt")
        public void testOnlyForConcat() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/onlyForConcat.kt");
        }
        
        @TestMetadata("onlyForStrings.kt")
        public void testOnlyForStrings() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/onlyForStrings.kt");
        }
        
        @TestMetadata("requiresPlusOperator.kt")
        public void testRequiresPlusOperator() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/requiresPlusOperator.kt");
        }
        
        @TestMetadata("tricky.kt")
        public void testTricky() throws Exception {
            doTest("idea/testData/intentions/convertToStringTemplateIntention/tricky.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/declarations")
    @InnerTestClasses({Declarations.ConvertMemberToExtension.class, Declarations.Split.class})
    public static class Declarations extends AbstractIntentionTest {
        public void testAllFilesPresentInDeclarations() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/declarations"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("idea/testData/intentions/declarations/convertMemberToExtension")
        public static class ConvertMemberToExtension extends AbstractIntentionTest {
            @TestMetadata("abstract.kt")
            public void testAbstract() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/abstract.kt");
            }
            
            @TestMetadata("abstractProperty.kt")
            public void testAbstractProperty() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/abstractProperty.kt");
            }
            
            public void testAllFilesPresentInConvertMemberToExtension() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/declarations/convertMemberToExtension"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("explicitUnit.kt")
            public void testExplicitUnit() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/explicitUnit.kt");
            }
            
            @TestMetadata("extension.kt")
            public void testExtension() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/extension.kt");
            }
            
            @TestMetadata("funcitonNoName.kt")
            public void testFuncitonNoName() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/funcitonNoName.kt");
            }
            
            @TestMetadata("functionType.kt")
            public void testFunctionType() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/functionType.kt");
            }
            
            @TestMetadata("genericClass.kt")
            public void testGenericClass() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/genericClass.kt");
            }
            
            @TestMetadata("genericFun.kt")
            public void testGenericFun() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/genericFun.kt");
            }
            
            @TestMetadata("genericFunInGenericClass.kt")
            public void testGenericFunInGenericClass() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/genericFunInGenericClass.kt");
            }
            
            @TestMetadata("genericFunInGenericClassWithUpperBounds.kt")
            public void testGenericFunInGenericClassWithUpperBounds() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/genericFunInGenericClassWithUpperBounds.kt");
            }
            
            @TestMetadata("genericFunParamAfterName.kt")
            public void testGenericFunParamAfterName() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/genericFunParamAfterName.kt");
            }
            
            @TestMetadata("genericProperty.kt")
            public void testGenericProperty() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/genericProperty.kt");
            }
            
            @TestMetadata("inFunctionBody.kt")
            public void testInFunctionBody() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/inFunctionBody.kt");
            }
            
            @TestMetadata("inObject.kt")
            public void testInObject() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/inObject.kt");
            }
            
            @TestMetadata("internal.kt")
            public void testInternal() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/internal.kt");
            }
            
            @TestMetadata("localFunction.kt")
            public void testLocalFunction() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/localFunction.kt");
            }
            
            @TestMetadata("nonBlockBodyNoType.kt")
            public void testNonBlockBodyNoType() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/nonBlockBodyNoType.kt");
            }
            
            @TestMetadata("nonBlockBodyWithType.kt")
            public void testNonBlockBodyWithType() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/nonBlockBodyWithType.kt");
            }
            
            @TestMetadata("outsideFunction.kt")
            public void testOutsideFunction() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/outsideFunction.kt");
            }
            
            @TestMetadata("private.kt")
            public void testPrivate() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/private.kt");
            }
            
            @TestMetadata("protected.kt")
            public void testProtected() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/protected.kt");
            }
            
            @TestMetadata("public.kt")
            public void testPublic() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/public.kt");
            }
            
            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/simple.kt");
            }
            
            @TestMetadata("topLevelFunction.kt")
            public void testTopLevelFunction() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/topLevelFunction.kt");
            }
            
            @TestMetadata("typeFqName.kt")
            public void testTypeFqName() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/typeFqName.kt");
            }
            
            @TestMetadata("unknownType.kt")
            public void testUnknownType() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/unknownType.kt");
            }
            
            @TestMetadata("valWithDefaultGetter.kt")
            public void testValWithDefaultGetter() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/valWithDefaultGetter.kt");
            }
            
            @TestMetadata("valWithGetter.kt")
            public void testValWithGetter() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/valWithGetter.kt");
            }
            
            @TestMetadata("valWithGetterBlockBody.kt")
            public void testValWithGetterBlockBody() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/valWithGetterBlockBody.kt");
            }
            
            @TestMetadata("varWithDefaultGetterAndSetter.kt")
            public void testVarWithDefaultGetterAndSetter() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/varWithDefaultGetterAndSetter.kt");
            }
            
            @TestMetadata("varWithDefaultSetter.kt")
            public void testVarWithDefaultSetter() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/varWithDefaultSetter.kt");
            }
            
            @TestMetadata("varWithGetter.kt")
            public void testVarWithGetter() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/varWithGetter.kt");
            }
            
            @TestMetadata("varWithGetterAndSetter.kt")
            public void testVarWithGetterAndSetter() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/varWithGetterAndSetter.kt");
            }
            
            @TestMetadata("varWithSetter.kt")
            public void testVarWithSetter() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/varWithSetter.kt");
            }
            
            @TestMetadata("withType.kt")
            public void testWithType() throws Exception {
                doTest("idea/testData/intentions/declarations/convertMemberToExtension/withType.kt");
            }
            
        }
        
        @TestMetadata("idea/testData/intentions/declarations/split")
        public static class Split extends AbstractIntentionTest {
            public void testAllFilesPresentInSplit() throws Exception {
                JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/declarations/split"), Pattern.compile("^(.+)\\.kt$"), true);
            }
            
            @TestMetadata("longInit.kt")
            public void testLongInit() throws Exception {
                doTest("idea/testData/intentions/declarations/split/longInit.kt");
            }
            
            @TestMetadata("longInit2.kt")
            public void testLongInit2() throws Exception {
                doTest("idea/testData/intentions/declarations/split/longInit2.kt");
            }
            
            @TestMetadata("noInitializer.kt")
            public void testNoInitializer() throws Exception {
                doTest("idea/testData/intentions/declarations/split/noInitializer.kt");
            }
            
            @TestMetadata("noInitializer2.kt")
            public void testNoInitializer2() throws Exception {
                doTest("idea/testData/intentions/declarations/split/noInitializer2.kt");
            }
            
            @TestMetadata("nonLocalProperty.kt")
            public void testNonLocalProperty() throws Exception {
                doTest("idea/testData/intentions/declarations/split/nonLocalProperty.kt");
            }
            
            @TestMetadata("nonLocalProperty2.kt")
            public void testNonLocalProperty2() throws Exception {
                doTest("idea/testData/intentions/declarations/split/nonLocalProperty2.kt");
            }
            
            @TestMetadata("simpleInit.kt")
            public void testSimpleInit() throws Exception {
                doTest("idea/testData/intentions/declarations/split/simpleInit.kt");
            }
            
            @TestMetadata("simpleInit2.kt")
            public void testSimpleInit2() throws Exception {
                doTest("idea/testData/intentions/declarations/split/simpleInit2.kt");
            }
            
            @TestMetadata("simpleInitWithErrorType.kt")
            public void testSimpleInitWithErrorType() throws Exception {
                doTest("idea/testData/intentions/declarations/split/simpleInitWithErrorType.kt");
            }
            
            @TestMetadata("simpleInitWithErrorType2.kt")
            public void testSimpleInitWithErrorType2() throws Exception {
                doTest("idea/testData/intentions/declarations/split/simpleInitWithErrorType2.kt");
            }
            
            @TestMetadata("simpleInitWithType.kt")
            public void testSimpleInitWithType() throws Exception {
                doTest("idea/testData/intentions/declarations/split/simpleInitWithType.kt");
            }
            
            @TestMetadata("simpleInitWithType2.kt")
            public void testSimpleInitWithType2() throws Exception {
                doTest("idea/testData/intentions/declarations/split/simpleInitWithType2.kt");
            }
            
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("Declarations");
            suite.addTestSuite(Declarations.class);
            suite.addTestSuite(ConvertMemberToExtension.class);
            suite.addTestSuite(Split.class);
            return suite;
        }
    }
    
    @TestMetadata("idea/testData/intentions/insertCurlyBracesToTemplate")
    public static class InsertCurlyBracesToTemplate extends AbstractIntentionTest {
        public void testAllFilesPresentInInsertCurlyBracesToTemplate() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/insertCurlyBracesToTemplate"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("dontInsertBrackets1.kt")
        public void testDontInsertBrackets1() throws Exception {
            doTest("idea/testData/intentions/insertCurlyBracesToTemplate/dontInsertBrackets1.kt");
        }
        
        @TestMetadata("insertBrackets1.kt")
        public void testInsertBrackets1() throws Exception {
            doTest("idea/testData/intentions/insertCurlyBracesToTemplate/insertBrackets1.kt");
        }
        
        @TestMetadata("insertBrackets2.kt")
        public void testInsertBrackets2() throws Exception {
            doTest("idea/testData/intentions/insertCurlyBracesToTemplate/insertBrackets2.kt");
        }
        
        @TestMetadata("insertBrackets3.kt")
        public void testInsertBrackets3() throws Exception {
            doTest("idea/testData/intentions/insertCurlyBracesToTemplate/insertBrackets3.kt");
        }
        
        @TestMetadata("insertBrackets4.kt")
        public void testInsertBrackets4() throws Exception {
            doTest("idea/testData/intentions/insertCurlyBracesToTemplate/insertBrackets4.kt");
        }
        
        @TestMetadata("insertBrackets5.kt")
        public void testInsertBrackets5() throws Exception {
            doTest("idea/testData/intentions/insertCurlyBracesToTemplate/insertBrackets5.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/insertExplicitTypeArguments")
    public static class InsertExplicitTypeArguments extends AbstractIntentionTest {
        public void testAllFilesPresentInInsertExplicitTypeArguments() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/insertExplicitTypeArguments"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("inapplicableAlreadyTyped.kt")
        public void testInapplicableAlreadyTyped() throws Exception {
            doTest("idea/testData/intentions/insertExplicitTypeArguments/inapplicableAlreadyTyped.kt");
        }
        
        @TestMetadata("inapplicableNotGeneric.kt")
        public void testInapplicableNotGeneric() throws Exception {
            doTest("idea/testData/intentions/insertExplicitTypeArguments/inapplicableNotGeneric.kt");
        }
        
        @TestMetadata("inapplicableNotInCallable.kt")
        public void testInapplicableNotInCallable() throws Exception {
            doTest("idea/testData/intentions/insertExplicitTypeArguments/inapplicableNotInCallable.kt");
        }
        
        @TestMetadata("inapplicableNotInCallable2.kt")
        public void testInapplicableNotInCallable2() throws Exception {
            doTest("idea/testData/intentions/insertExplicitTypeArguments/inapplicableNotInCallable2.kt");
        }
        
        @TestMetadata("inapplicableTypeNotInferred.kt")
        public void testInapplicableTypeNotInferred() throws Exception {
            doTest("idea/testData/intentions/insertExplicitTypeArguments/inapplicableTypeNotInferred.kt");
        }
        
        @TestMetadata("insertImportForArg.kt")
        public void testInsertImportForArg() throws Exception {
            doTest("idea/testData/intentions/insertExplicitTypeArguments/insertImportForArg.kt");
        }
        
        @TestMetadata("insertManyTypes.kt")
        public void testInsertManyTypes() throws Exception {
            doTest("idea/testData/intentions/insertExplicitTypeArguments/insertManyTypes.kt");
        }
        
        @TestMetadata("insertManyTypesInDifferentOrder.kt")
        public void testInsertManyTypesInDifferentOrder() throws Exception {
            doTest("idea/testData/intentions/insertExplicitTypeArguments/insertManyTypesInDifferentOrder.kt");
        }
        
        @TestMetadata("insertMultipleSomeWithClashingName.kt")
        public void testInsertMultipleSomeWithClashingName() throws Exception {
            doTest("idea/testData/intentions/insertExplicitTypeArguments/insertMultipleSomeWithClashingName.kt");
        }
        
        @TestMetadata("insertTwoTypesFun.kt")
        public void testInsertTwoTypesFun() throws Exception {
            doTest("idea/testData/intentions/insertExplicitTypeArguments/insertTwoTypesFun.kt");
        }
        
        @TestMetadata("insertTypeAny.kt")
        public void testInsertTypeAny() throws Exception {
            doTest("idea/testData/intentions/insertExplicitTypeArguments/insertTypeAny.kt");
        }
        
        @TestMetadata("insertTypeThatIsAFunction.kt")
        public void testInsertTypeThatIsAFunction() throws Exception {
            doTest("idea/testData/intentions/insertExplicitTypeArguments/insertTypeThatIsAFunction.kt");
        }
        
        @TestMetadata("insertTypeThatIsATypeArg.kt")
        public void testInsertTypeThatIsATypeArg() throws Exception {
            doTest("idea/testData/intentions/insertExplicitTypeArguments/insertTypeThatIsATypeArg.kt");
        }
        
        @TestMetadata("insertTypeWithClashingName.kt")
        public void testInsertTypeWithClashingName() throws Exception {
            doTest("idea/testData/intentions/insertExplicitTypeArguments/insertTypeWithClashingName.kt");
        }
        
        @TestMetadata("insertTypeWithLambda.kt")
        public void testInsertTypeWithLambda() throws Exception {
            doTest("idea/testData/intentions/insertExplicitTypeArguments/insertTypeWithLambda.kt");
        }
        
        @TestMetadata("insertTypeWithTypeArguments.kt")
        public void testInsertTypeWithTypeArguments() throws Exception {
            doTest("idea/testData/intentions/insertExplicitTypeArguments/insertTypeWithTypeArguments.kt");
        }
        
        @TestMetadata("insertTypeWithVarargs.kt")
        public void testInsertTypeWithVarargs() throws Exception {
            doTest("idea/testData/intentions/insertExplicitTypeArguments/insertTypeWithVarargs.kt");
        }
        
        @TestMetadata("simpleInsertTypeClass.kt")
        public void testSimpleInsertTypeClass() throws Exception {
            doTest("idea/testData/intentions/insertExplicitTypeArguments/simpleInsertTypeClass.kt");
        }
        
        @TestMetadata("simpleInsertTypeFun.kt")
        public void testSimpleInsertTypeFun() throws Exception {
            doTest("idea/testData/intentions/insertExplicitTypeArguments/simpleInsertTypeFun.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/invertIfCondition")
    public static class InvertIfCondition extends AbstractIntentionTest {
        public void testAllFilesPresentInInvertIfCondition() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/invertIfCondition"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("assignedToValue.kt")
        public void testAssignedToValue() throws Exception {
            doTest("idea/testData/intentions/invertIfCondition/assignedToValue.kt");
        }
        
        @TestMetadata("binaryExpression.kt")
        public void testBinaryExpression() throws Exception {
            doTest("idea/testData/intentions/invertIfCondition/binaryExpression.kt");
        }
        
        @TestMetadata("booleanLiteral.kt")
        public void testBooleanLiteral() throws Exception {
            doTest("idea/testData/intentions/invertIfCondition/booleanLiteral.kt");
        }
        
        @TestMetadata("branchingIfStatements.kt")
        public void testBranchingIfStatements() throws Exception {
            doTest("idea/testData/intentions/invertIfCondition/branchingIfStatements.kt");
        }
        
        @TestMetadata("forLoopWithMultipleExpressions.kt")
        public void testForLoopWithMultipleExpressions() throws Exception {
            doTest("idea/testData/intentions/invertIfCondition/forLoopWithMultipleExpressions.kt");
        }
        
        @TestMetadata("functionWithReturnExpression.kt")
        public void testFunctionWithReturnExpression() throws Exception {
            doTest("idea/testData/intentions/invertIfCondition/functionWithReturnExpression.kt");
        }
        
        @TestMetadata("ifExpressionInsideForLoop.kt")
        public void testIfExpressionInsideForLoop() throws Exception {
            doTest("idea/testData/intentions/invertIfCondition/ifExpressionInsideForLoop.kt");
        }
        
        @TestMetadata("ifExpressionWithReturn.kt")
        public void testIfExpressionWithReturn() throws Exception {
            doTest("idea/testData/intentions/invertIfCondition/ifExpressionWithReturn.kt");
        }
        
        @TestMetadata("invertableOperator.kt")
        public void testInvertableOperator() throws Exception {
            doTest("idea/testData/intentions/invertIfCondition/invertableOperator.kt");
        }
        
        @TestMetadata("negatedExpression.kt")
        public void testNegatedExpression() throws Exception {
            doTest("idea/testData/intentions/invertIfCondition/negatedExpression.kt");
        }
        
        @TestMetadata("returnIfExpression.kt")
        public void testReturnIfExpression() throws Exception {
            doTest("idea/testData/intentions/invertIfCondition/returnIfExpression.kt");
        }
        
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            doTest("idea/testData/intentions/invertIfCondition/simple.kt");
        }
        
        @TestMetadata("valueAndReturnBranches.kt")
        public void testValueAndReturnBranches() throws Exception {
            doTest("idea/testData/intentions/invertIfCondition/valueAndReturnBranches.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/makeTypeExplicitInLambda")
    public static class MakeTypeExplicitInLambda extends AbstractIntentionTest {
        public void testAllFilesPresentInMakeTypeExplicitInLambda() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/makeTypeExplicitInLambda"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("coercionToUnit.kt")
        public void testCoercionToUnit() throws Exception {
            doTest("idea/testData/intentions/makeTypeExplicitInLambda/coercionToUnit.kt");
        }
        
        @TestMetadata("emptyParamListWithBrackets.kt")
        public void testEmptyParamListWithBrackets() throws Exception {
            doTest("idea/testData/intentions/makeTypeExplicitInLambda/emptyParamListWithBrackets.kt");
        }
        
        @TestMetadata("emptyParamListWithIt.kt")
        public void testEmptyParamListWithIt() throws Exception {
            doTest("idea/testData/intentions/makeTypeExplicitInLambda/emptyParamListWithIt.kt");
        }
        
        @TestMetadata("emptyParamListWithWhiteSpace.kt")
        public void testEmptyParamListWithWhiteSpace() throws Exception {
            doTest("idea/testData/intentions/makeTypeExplicitInLambda/emptyParamListWithWhiteSpace.kt");
        }
        
        @TestMetadata("emptyParamListWithoutItWithArrow.kt")
        public void testEmptyParamListWithoutItWithArrow() throws Exception {
            doTest("idea/testData/intentions/makeTypeExplicitInLambda/emptyParamListWithoutItWithArrow.kt");
        }
        
        @TestMetadata("invalidCursorPosition.kt")
        public void testInvalidCursorPosition() throws Exception {
            doTest("idea/testData/intentions/makeTypeExplicitInLambda/invalidCursorPosition.kt");
        }
        
        @TestMetadata("lambdaWithLambdaAsParam.kt")
        public void testLambdaWithLambdaAsParam() throws Exception {
            doTest("idea/testData/intentions/makeTypeExplicitInLambda/lambdaWithLambdaAsParam.kt");
        }
        
        @TestMetadata("manyNewlines.kt")
        public void testManyNewlines() throws Exception {
            doTest("idea/testData/intentions/makeTypeExplicitInLambda/manyNewlines.kt");
        }
        
        @TestMetadata("multipleParam.kt")
        public void testMultipleParam() throws Exception {
            doTest("idea/testData/intentions/makeTypeExplicitInLambda/multipleParam.kt");
        }
        
        @TestMetadata("paramDeclaredReturnNotDeclared.kt")
        public void testParamDeclaredReturnNotDeclared() throws Exception {
            doTest("idea/testData/intentions/makeTypeExplicitInLambda/paramDeclaredReturnNotDeclared.kt");
        }
        
        @TestMetadata("returnDeclaredParamNotDeclared.kt")
        public void testReturnDeclaredParamNotDeclared() throws Exception {
            doTest("idea/testData/intentions/makeTypeExplicitInLambda/returnDeclaredParamNotDeclared.kt");
        }
        
        @TestMetadata("shortenReferencesForParams.kt")
        public void testShortenReferencesForParams() throws Exception {
            doTest("idea/testData/intentions/makeTypeExplicitInLambda/shortenReferencesForParams.kt");
        }
        
        @TestMetadata("shortenReferencesForReceiver.kt")
        public void testShortenReferencesForReceiver() throws Exception {
            doTest("idea/testData/intentions/makeTypeExplicitInLambda/shortenReferencesForReceiver.kt");
        }
        
        @TestMetadata("shortenReferencesForReturnType.kt")
        public void testShortenReferencesForReturnType() throws Exception {
            doTest("idea/testData/intentions/makeTypeExplicitInLambda/shortenReferencesForReturnType.kt");
        }
        
        @TestMetadata("singleParam.kt")
        public void testSingleParam() throws Exception {
            doTest("idea/testData/intentions/makeTypeExplicitInLambda/singleParam.kt");
        }
        
        @TestMetadata("singleParamWithReceiver.kt")
        public void testSingleParamWithReceiver() throws Exception {
            doTest("idea/testData/intentions/makeTypeExplicitInLambda/singleParamWithReceiver.kt");
        }
        
        @TestMetadata("typesAlreadyExplicit.kt")
        public void testTypesAlreadyExplicit() throws Exception {
            doTest("idea/testData/intentions/makeTypeExplicitInLambda/typesAlreadyExplicit.kt");
        }
        
        @TestMetadata("typesNotInferable.kt")
        public void testTypesNotInferable() throws Exception {
            doTest("idea/testData/intentions/makeTypeExplicitInLambda/typesNotInferable.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/makeTypeImplicitInLambda")
    public static class MakeTypeImplicitInLambda extends AbstractIntentionTest {
        public void testAllFilesPresentInMakeTypeImplicitInLambda() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/makeTypeImplicitInLambda"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("explicitReceiverType.kt")
        public void testExplicitReceiverType() throws Exception {
            doTest("idea/testData/intentions/makeTypeImplicitInLambda/explicitReceiverType.kt");
        }
        
        @TestMetadata("explicitReturnType.kt")
        public void testExplicitReturnType() throws Exception {
            doTest("idea/testData/intentions/makeTypeImplicitInLambda/explicitReturnType.kt");
        }
        
        @TestMetadata("invalidCursorPosition.kt")
        public void testInvalidCursorPosition() throws Exception {
            doTest("idea/testData/intentions/makeTypeImplicitInLambda/invalidCursorPosition.kt");
        }
        
        @TestMetadata("lambdaWithLambdaAsParam.kt")
        public void testLambdaWithLambdaAsParam() throws Exception {
            doTest("idea/testData/intentions/makeTypeImplicitInLambda/lambdaWithLambdaAsParam.kt");
        }
        
        @TestMetadata("multipleExplicitParams.kt")
        public void testMultipleExplicitParams() throws Exception {
            doTest("idea/testData/intentions/makeTypeImplicitInLambda/multipleExplicitParams.kt");
        }
        
        @TestMetadata("paramDeclaredReturnNotDeclared.kt")
        public void testParamDeclaredReturnNotDeclared() throws Exception {
            doTest("idea/testData/intentions/makeTypeImplicitInLambda/paramDeclaredReturnNotDeclared.kt");
        }
        
        @TestMetadata("returnDeclaredParamNotDeclared.kt")
        public void testReturnDeclaredParamNotDeclared() throws Exception {
            doTest("idea/testData/intentions/makeTypeImplicitInLambda/returnDeclaredParamNotDeclared.kt");
        }
        
        @TestMetadata("singleExplicitParam.kt")
        public void testSingleExplicitParam() throws Exception {
            doTest("idea/testData/intentions/makeTypeImplicitInLambda/singleExplicitParam.kt");
        }
        
        @TestMetadata("typesAlreadyImplicit.kt")
        public void testTypesAlreadyImplicit() throws Exception {
            doTest("idea/testData/intentions/makeTypeImplicitInLambda/typesAlreadyImplicit.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/moveLambdaInsideParentheses")
    public static class MoveLambdaInsideParentheses extends AbstractIntentionTest {
        public void testAllFilesPresentInMoveLambdaInsideParentheses() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/moveLambdaInsideParentheses"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("inapplicable1.kt")
        public void testInapplicable1() throws Exception {
            doTest("idea/testData/intentions/moveLambdaInsideParentheses/inapplicable1.kt");
        }
        
        @TestMetadata("inapplicable2.kt")
        public void testInapplicable2() throws Exception {
            doTest("idea/testData/intentions/moveLambdaInsideParentheses/inapplicable2.kt");
        }
        
        @TestMetadata("moveLabeledLambda1.kt")
        public void testMoveLabeledLambda1() throws Exception {
            doTest("idea/testData/intentions/moveLambdaInsideParentheses/moveLabeledLambda1.kt");
        }
        
        @TestMetadata("moveLabeledLambda2.kt")
        public void testMoveLabeledLambda2() throws Exception {
            doTest("idea/testData/intentions/moveLambdaInsideParentheses/moveLabeledLambda2.kt");
        }
        
        @TestMetadata("moveLambda1.kt")
        public void testMoveLambda1() throws Exception {
            doTest("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda1.kt");
        }
        
        @TestMetadata("moveLambda10.kt")
        public void testMoveLambda10() throws Exception {
            doTest("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda10.kt");
        }
        
        @TestMetadata("moveLambda11.kt")
        public void testMoveLambda11() throws Exception {
            doTest("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda11.kt");
        }
        
        @TestMetadata("moveLambda12.kt")
        public void testMoveLambda12() throws Exception {
            doTest("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda12.kt");
        }
        
        @TestMetadata("moveLambda2.kt")
        public void testMoveLambda2() throws Exception {
            doTest("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda2.kt");
        }
        
        @TestMetadata("moveLambda3.kt")
        public void testMoveLambda3() throws Exception {
            doTest("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda3.kt");
        }
        
        @TestMetadata("moveLambda4.kt")
        public void testMoveLambda4() throws Exception {
            doTest("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda4.kt");
        }
        
        @TestMetadata("moveLambda5.kt")
        public void testMoveLambda5() throws Exception {
            doTest("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda5.kt");
        }
        
        @TestMetadata("moveLambda6.kt")
        public void testMoveLambda6() throws Exception {
            doTest("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda6.kt");
        }
        
        @TestMetadata("moveLambda7.kt")
        public void testMoveLambda7() throws Exception {
            doTest("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda7.kt");
        }
        
        @TestMetadata("moveLambda8.kt")
        public void testMoveLambda8() throws Exception {
            doTest("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda8.kt");
        }
        
        @TestMetadata("moveLambda9.kt")
        public void testMoveLambda9() throws Exception {
            doTest("idea/testData/intentions/moveLambdaInsideParentheses/moveLambda9.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/moveLambdaOutsideParentheses")
    public static class MoveLambdaOutsideParentheses extends AbstractIntentionTest {
        public void testAllFilesPresentInMoveLambdaOutsideParentheses() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/moveLambdaOutsideParentheses"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("inapplicable1.kt")
        public void testInapplicable1() throws Exception {
            doTest("idea/testData/intentions/moveLambdaOutsideParentheses/inapplicable1.kt");
        }
        
        @TestMetadata("inapplicable2.kt")
        public void testInapplicable2() throws Exception {
            doTest("idea/testData/intentions/moveLambdaOutsideParentheses/inapplicable2.kt");
        }
        
        @TestMetadata("inapplicable3.kt")
        public void testInapplicable3() throws Exception {
            doTest("idea/testData/intentions/moveLambdaOutsideParentheses/inapplicable3.kt");
        }
        
        @TestMetadata("labeledLambda.kt")
        public void testLabeledLambda() throws Exception {
            doTest("idea/testData/intentions/moveLambdaOutsideParentheses/labeledLambda.kt");
        }
        
        @TestMetadata("lambdaWithCommas.kt")
        public void testLambdaWithCommas() throws Exception {
            doTest("idea/testData/intentions/moveLambdaOutsideParentheses/lambdaWithCommas.kt");
        }
        
        @TestMetadata("lambdaWithCommas2.kt")
        public void testLambdaWithCommas2() throws Exception {
            doTest("idea/testData/intentions/moveLambdaOutsideParentheses/lambdaWithCommas2.kt");
        }
        
        @TestMetadata("lambdaWithCommas3.kt")
        public void testLambdaWithCommas3() throws Exception {
            doTest("idea/testData/intentions/moveLambdaOutsideParentheses/lambdaWithCommas3.kt");
        }
        
        @TestMetadata("moveLambda1.kt")
        public void testMoveLambda1() throws Exception {
            doTest("idea/testData/intentions/moveLambdaOutsideParentheses/moveLambda1.kt");
        }
        
        @TestMetadata("moveLambda2.kt")
        public void testMoveLambda2() throws Exception {
            doTest("idea/testData/intentions/moveLambdaOutsideParentheses/moveLambda2.kt");
        }
        
        @TestMetadata("moveLambda3.kt")
        public void testMoveLambda3() throws Exception {
            doTest("idea/testData/intentions/moveLambdaOutsideParentheses/moveLambda3.kt");
        }
        
        @TestMetadata("moveLambda4.kt")
        public void testMoveLambda4() throws Exception {
            doTest("idea/testData/intentions/moveLambdaOutsideParentheses/moveLambda4.kt");
        }
        
        @TestMetadata("moveLambda7.kt")
        public void testMoveLambda7() throws Exception {
            doTest("idea/testData/intentions/moveLambdaOutsideParentheses/moveLambda7.kt");
        }
        
        @TestMetadata("moveLambda8.kt")
        public void testMoveLambda8() throws Exception {
            doTest("idea/testData/intentions/moveLambdaOutsideParentheses/moveLambda8.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/operatorToFunction")
    public static class OperatorToFunction extends AbstractIntentionTest {
        public void testAllFilesPresentInOperatorToFunction() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/operatorToFunction"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("arrayAccessMultipleIndex.kt")
        public void testArrayAccessMultipleIndex() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/arrayAccessMultipleIndex.kt");
        }
        
        @TestMetadata("arrayAccessOneIndex.kt")
        public void testArrayAccessOneIndex() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/arrayAccessOneIndex.kt");
        }
        
        @TestMetadata("arrayAssignmentMultipleIndex.kt")
        public void testArrayAssignmentMultipleIndex() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/arrayAssignmentMultipleIndex.kt");
        }
        
        @TestMetadata("binaryEqualsEqualsNullableOperands.kt")
        public void testBinaryEqualsEqualsNullableOperands() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/binaryEqualsEqualsNullableOperands.kt");
        }
        
        @TestMetadata("binaryNotEqualsNonNullableOperands.kt")
        public void testBinaryNotEqualsNonNullableOperands() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/binaryNotEqualsNonNullableOperands.kt");
        }
        
        @TestMetadata("binaryNotIn.kt")
        public void testBinaryNotIn() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/binaryNotIn.kt");
        }
        
        @TestMetadata("binaryPlus.kt")
        public void testBinaryPlus() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/binaryPlus.kt");
        }
        
        @TestMetadata("binaryPlusEquals.kt")
        public void testBinaryPlusEquals() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/binaryPlusEquals.kt");
        }
        
        @TestMetadata("binaryPlusEqualsNotResolved.kt")
        public void testBinaryPlusEqualsNotResolved() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/binaryPlusEqualsNotResolved.kt");
        }
        
        @TestMetadata("binaryRangeTo.kt")
        public void testBinaryRangeTo() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/binaryRangeTo.kt");
        }
        
        @TestMetadata("functionCallMultipleArgument.kt")
        public void testFunctionCallMultipleArgument() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/functionCallMultipleArgument.kt");
        }
        
        @TestMetadata("functionCallWithMultipleArgumentsAndSingleLambda.kt")
        public void testFunctionCallWithMultipleArgumentsAndSingleLambda() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/functionCallWithMultipleArgumentsAndSingleLambda.kt");
        }
        
        @TestMetadata("functionCallWithSingleLambda.kt")
        public void testFunctionCallWithSingleLambda() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/functionCallWithSingleLambda.kt");
        }
        
        @TestMetadata("notApplicableAssignment.kt")
        public void testNotApplicableAssignment() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/notApplicableAssignment.kt");
        }
        
        @TestMetadata("notApplicableCallWithInvokeMethod.kt")
        public void testNotApplicableCallWithInvokeMethod() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/notApplicableCallWithInvokeMethod.kt");
        }
        
        @TestMetadata("notApplicableFunctionCallWithCallableReference.kt")
        public void testNotApplicableFunctionCallWithCallableReference() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/notApplicableFunctionCallWithCallableReference.kt");
        }
        
        @TestMetadata("notApplicableNewClassObject.kt")
        public void testNotApplicableNewClassObject() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/notApplicableNewClassObject.kt");
        }
        
        @TestMetadata("postfixMinusMinus.kt")
        public void testPostfixMinusMinus() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/postfixMinusMinus.kt");
        }
        
        @TestMetadata("prefixPlus.kt")
        public void testPrefixPlus() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/prefixPlus.kt");
        }
        
        @TestMetadata("prefixPlusPlus.kt")
        public void testPrefixPlusPlus() throws Exception {
            doTest("idea/testData/intentions/operatorToFunction/prefixPlusPlus.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/reconstructedType")
    public static class ReconstructedType extends AbstractIntentionTest {
        public void testAllFilesPresentInReconstructedType() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/reconstructedType"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("completeGenericType.kt")
        public void testCompleteGenericType() throws Exception {
            doTest("idea/testData/intentions/reconstructedType/completeGenericType.kt");
        }
        
        @TestMetadata("completeType.kt")
        public void testCompleteType() throws Exception {
            doTest("idea/testData/intentions/reconstructedType/completeType.kt");
        }
        
        @TestMetadata("errorType.kt")
        public void testErrorType() throws Exception {
            doTest("idea/testData/intentions/reconstructedType/errorType.kt");
        }
        
        @TestMetadata("reconstructableType.kt")
        public void testReconstructableType() throws Exception {
            doTest("idea/testData/intentions/reconstructedType/reconstructableType.kt");
        }
        
        @TestMetadata("typeInDeclaration.kt")
        public void testTypeInDeclaration() throws Exception {
            doTest("idea/testData/intentions/reconstructedType/typeInDeclaration.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/removeBraces")
    public static class RemoveBraces extends AbstractIntentionTest {
        public void testAllFilesPresentInRemoveBraces() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/removeBraces"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("doWhile.kt")
        public void testDoWhile() throws Exception {
            doTest("idea/testData/intentions/removeBraces/doWhile.kt");
        }
        
        @TestMetadata("doWhileWithTwoStatements.kt")
        public void testDoWhileWithTwoStatements() throws Exception {
            doTest("idea/testData/intentions/removeBraces/doWhileWithTwoStatements.kt");
        }
        
        @TestMetadata("else.kt")
        public void testElse() throws Exception {
            doTest("idea/testData/intentions/removeBraces/else.kt");
        }
        
        @TestMetadata("for.kt")
        public void testFor() throws Exception {
            doTest("idea/testData/intentions/removeBraces/for.kt");
        }
        
        @TestMetadata("forWithLocalVariable.kt")
        public void testForWithLocalVariable() throws Exception {
            doTest("idea/testData/intentions/removeBraces/forWithLocalVariable.kt");
        }
        
        @TestMetadata("if.kt")
        public void testIf() throws Exception {
            doTest("idea/testData/intentions/removeBraces/if.kt");
        }
        
        @TestMetadata("ifWithComment.kt")
        public void testIfWithComment() throws Exception {
            doTest("idea/testData/intentions/removeBraces/ifWithComment.kt");
        }
        
        @TestMetadata("ifWithNoStatement.kt")
        public void testIfWithNoStatement() throws Exception {
            doTest("idea/testData/intentions/removeBraces/ifWithNoStatement.kt");
        }
        
        @TestMetadata("ifWithSemicolon.kt")
        public void testIfWithSemicolon() throws Exception {
            doTest("idea/testData/intentions/removeBraces/ifWithSemicolon.kt");
        }
        
        @TestMetadata("ifWithTwoStatements.kt")
        public void testIfWithTwoStatements() throws Exception {
            doTest("idea/testData/intentions/removeBraces/ifWithTwoStatements.kt");
        }
        
        @TestMetadata("while.kt")
        public void testWhile() throws Exception {
            doTest("idea/testData/intentions/removeBraces/while.kt");
        }
        
        @TestMetadata("whileWithTwoStatements.kt")
        public void testWhileWithTwoStatements() throws Exception {
            doTest("idea/testData/intentions/removeBraces/whileWithTwoStatements.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/removeCurlyBracesFromTemplate")
    public static class RemoveCurlyBracesFromTemplate extends AbstractIntentionTest {
        public void testAllFilesPresentInRemoveCurlyBracesFromTemplate() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/removeCurlyBracesFromTemplate"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("necessaryBrackets1.kt")
        public void testNecessaryBrackets1() throws Exception {
            doTest("idea/testData/intentions/removeCurlyBracesFromTemplate/necessaryBrackets1.kt");
        }
        
        @TestMetadata("necessaryBrackets2.kt")
        public void testNecessaryBrackets2() throws Exception {
            doTest("idea/testData/intentions/removeCurlyBracesFromTemplate/necessaryBrackets2.kt");
        }
        
        @TestMetadata("necessaryBrackets3.kt")
        public void testNecessaryBrackets3() throws Exception {
            doTest("idea/testData/intentions/removeCurlyBracesFromTemplate/necessaryBrackets3.kt");
        }
        
        @TestMetadata("necessaryBrackets4.kt")
        public void testNecessaryBrackets4() throws Exception {
            doTest("idea/testData/intentions/removeCurlyBracesFromTemplate/necessaryBrackets4.kt");
        }
        
        @TestMetadata("necessaryBrackets5.kt")
        public void testNecessaryBrackets5() throws Exception {
            doTest("idea/testData/intentions/removeCurlyBracesFromTemplate/necessaryBrackets5.kt");
        }
        
        @TestMetadata("unnecessaryBrackets1.kt")
        public void testUnnecessaryBrackets1() throws Exception {
            doTest("idea/testData/intentions/removeCurlyBracesFromTemplate/unnecessaryBrackets1.kt");
        }
        
        @TestMetadata("unnecessaryBrackets2.kt")
        public void testUnnecessaryBrackets2() throws Exception {
            doTest("idea/testData/intentions/removeCurlyBracesFromTemplate/unnecessaryBrackets2.kt");
        }
        
        @TestMetadata("unnecessaryBrackets3.kt")
        public void testUnnecessaryBrackets3() throws Exception {
            doTest("idea/testData/intentions/removeCurlyBracesFromTemplate/unnecessaryBrackets3.kt");
        }
        
        @TestMetadata("unnecessaryBrackets4.kt")
        public void testUnnecessaryBrackets4() throws Exception {
            doTest("idea/testData/intentions/removeCurlyBracesFromTemplate/unnecessaryBrackets4.kt");
        }
        
        @TestMetadata("unnecessaryBrackets5.kt")
        public void testUnnecessaryBrackets5() throws Exception {
            doTest("idea/testData/intentions/removeCurlyBracesFromTemplate/unnecessaryBrackets5.kt");
        }
        
        @TestMetadata("unnecessaryBrackets6.kt")
        public void testUnnecessaryBrackets6() throws Exception {
            doTest("idea/testData/intentions/removeCurlyBracesFromTemplate/unnecessaryBrackets6.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/removeExplicitTypeArguments")
    @InnerTestClasses({})
    public static class RemoveExplicitTypeArguments extends AbstractIntentionTest {
        public void testAllFilesPresentInRemoveExplicitTypeArguments() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/removeExplicitTypeArguments"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("fourLiterals.kt")
        public void testFourLiterals() throws Exception {
            doTest("idea/testData/intentions/removeExplicitTypeArguments/fourLiterals.kt");
        }
        
        @TestMetadata("functionBodyIsCallWithUnnecessaryTypeArgs.kt")
        public void testFunctionBodyIsCallWithUnnecessaryTypeArgs() throws Exception {
            doTest("idea/testData/intentions/removeExplicitTypeArguments/functionBodyIsCallWithUnnecessaryTypeArgs.kt");
        }
        
        @TestMetadata("inapplicableTypeThatIsAFunItCannotBeInferred.kt")
        public void testInapplicableTypeThatIsAFunItCannotBeInferred() throws Exception {
            doTest("idea/testData/intentions/removeExplicitTypeArguments/inapplicableTypeThatIsAFunItCannotBeInferred.kt");
        }
        
        @TestMetadata("lambdaType.kt")
        public void testLambdaType() throws Exception {
            doTest("idea/testData/intentions/removeExplicitTypeArguments/lambdaType.kt");
        }
        
        @TestMetadata("literalAny.kt")
        public void testLiteralAny() throws Exception {
            doTest("idea/testData/intentions/removeExplicitTypeArguments/literalAny.kt");
        }
        
        @TestMetadata("literalString.kt")
        public void testLiteralString() throws Exception {
            doTest("idea/testData/intentions/removeExplicitTypeArguments/literalString.kt");
        }
        
        @TestMetadata("literalStringWithClass.kt")
        public void testLiteralStringWithClass() throws Exception {
            doTest("idea/testData/intentions/removeExplicitTypeArguments/literalStringWithClass.kt");
        }
        
        @TestMetadata("literalsWhenTypeArgHasTypeArg.kt")
        public void testLiteralsWhenTypeArgHasTypeArg() throws Exception {
            doTest("idea/testData/intentions/removeExplicitTypeArguments/literalsWhenTypeArgHasTypeArg.kt");
        }
        
        @TestMetadata("nestedCall-KT-5028.kt")
        public void testNestedCall_KT_5028() throws Exception {
            doTest("idea/testData/intentions/removeExplicitTypeArguments/nestedCall-KT-5028.kt");
        }
        
        @TestMetadata("notApplicableNotEnoughtInfo.kt")
        public void testNotApplicableNotEnoughtInfo() throws Exception {
            doTest("idea/testData/intentions/removeExplicitTypeArguments/notApplicableNotEnoughtInfo.kt");
        }
        
        @TestMetadata("notApplicableSupertypeOfInferred.kt")
        public void testNotApplicableSupertypeOfInferred() throws Exception {
            doTest("idea/testData/intentions/removeExplicitTypeArguments/notApplicableSupertypeOfInferred.kt");
        }
        
        @TestMetadata("notApplicableSupertypeOfInferredClass.kt")
        public void testNotApplicableSupertypeOfInferredClass() throws Exception {
            doTest("idea/testData/intentions/removeExplicitTypeArguments/notApplicableSupertypeOfInferredClass.kt");
        }
        
        @TestMetadata("propertyInitializerIsCallWithUnnecessaryTypeArgs.kt")
        public void testPropertyInitializerIsCallWithUnnecessaryTypeArgs() throws Exception {
            doTest("idea/testData/intentions/removeExplicitTypeArguments/propertyInitializerIsCallWithUnnecessaryTypeArgs.kt");
        }
        
        @TestMetadata("returnCallWithUnnecessaryTypeArgs.kt")
        public void testReturnCallWithUnnecessaryTypeArgs() throws Exception {
            doTest("idea/testData/intentions/removeExplicitTypeArguments/returnCallWithUnnecessaryTypeArgs.kt");
        }
        
        @TestMetadata("twoLiteralValues.kt")
        public void testTwoLiteralValues() throws Exception {
            doTest("idea/testData/intentions/removeExplicitTypeArguments/twoLiteralValues.kt");
        }
        
        @TestMetadata("variableString.kt")
        public void testVariableString() throws Exception {
            doTest("idea/testData/intentions/removeExplicitTypeArguments/variableString.kt");
        }
        
        @TestMetadata("variableString2.kt")
        public void testVariableString2() throws Exception {
            doTest("idea/testData/intentions/removeExplicitTypeArguments/variableString2.kt");
        }
        
        @TestMetadata("variableStringFartherScope.kt")
        public void testVariableStringFartherScope() throws Exception {
            doTest("idea/testData/intentions/removeExplicitTypeArguments/variableStringFartherScope.kt");
        }
        
        @TestMetadata("variablesAndLiterals.kt")
        public void testVariablesAndLiterals() throws Exception {
            doTest("idea/testData/intentions/removeExplicitTypeArguments/variablesAndLiterals.kt");
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("RemoveExplicitTypeArguments");
            suite.addTestSuite(RemoveExplicitTypeArguments.class);
            return suite;
        }
    }
    
    @TestMetadata("idea/testData/intentions/removeUnnecessaryParentheses")
    public static class RemoveUnnecessaryParentheses extends AbstractIntentionTest {
        public void testAllFilesPresentInRemoveUnnecessaryParentheses() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/removeUnnecessaryParentheses"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("necessaryParentheses1.kt")
        public void testNecessaryParentheses1() throws Exception {
            doTest("idea/testData/intentions/removeUnnecessaryParentheses/necessaryParentheses1.kt");
        }
        
        @TestMetadata("necessaryParentheses2.kt")
        public void testNecessaryParentheses2() throws Exception {
            doTest("idea/testData/intentions/removeUnnecessaryParentheses/necessaryParentheses2.kt");
        }
        
        @TestMetadata("necessaryParentheses3.kt")
        public void testNecessaryParentheses3() throws Exception {
            doTest("idea/testData/intentions/removeUnnecessaryParentheses/necessaryParentheses3.kt");
        }
        
        @TestMetadata("necessaryParentheses4.kt")
        public void testNecessaryParentheses4() throws Exception {
            doTest("idea/testData/intentions/removeUnnecessaryParentheses/necessaryParentheses4.kt");
        }
        
        @TestMetadata("necessaryParentheses5.kt")
        public void testNecessaryParentheses5() throws Exception {
            doTest("idea/testData/intentions/removeUnnecessaryParentheses/necessaryParentheses5.kt");
        }
        
        @TestMetadata("unnecessaryParentheses1.kt")
        public void testUnnecessaryParentheses1() throws Exception {
            doTest("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses1.kt");
        }
        
        @TestMetadata("unnecessaryParentheses2.kt")
        public void testUnnecessaryParentheses2() throws Exception {
            doTest("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses2.kt");
        }
        
        @TestMetadata("unnecessaryParentheses3.kt")
        public void testUnnecessaryParentheses3() throws Exception {
            doTest("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses3.kt");
        }
        
        @TestMetadata("unnecessaryParentheses4.kt")
        public void testUnnecessaryParentheses4() throws Exception {
            doTest("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses4.kt");
        }
        
        @TestMetadata("unnecessaryParentheses5.kt")
        public void testUnnecessaryParentheses5() throws Exception {
            doTest("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses5.kt");
        }
        
        @TestMetadata("unnecessaryParentheses6.kt")
        public void testUnnecessaryParentheses6() throws Exception {
            doTest("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses6.kt");
        }
        
        @TestMetadata("unnecessaryParentheses7.kt")
        public void testUnnecessaryParentheses7() throws Exception {
            doTest("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses7.kt");
        }
        
        @TestMetadata("unnecessaryParentheses8.kt")
        public void testUnnecessaryParentheses8() throws Exception {
            doTest("idea/testData/intentions/removeUnnecessaryParentheses/unnecessaryParentheses8.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt")
    public static class ReplaceExplicitFunctionLiteralParamWithIt extends AbstractIntentionTest {
        public void testAllFilesPresentInReplaceExplicitFunctionLiteralParamWithIt() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("applicable_cursofOverParamInInnerLiteral.kt")
        public void testApplicable_cursofOverParamInInnerLiteral() throws Exception {
            doTest("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt/applicable_cursofOverParamInInnerLiteral.kt");
        }
        
        @TestMetadata("applicable_cursorOverParameterDeclaration.kt")
        public void testApplicable_cursorOverParameterDeclaration() throws Exception {
            doTest("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt/applicable_cursorOverParameterDeclaration.kt");
        }
        
        @TestMetadata("applicable_cursorOverParameterUse.kt")
        public void testApplicable_cursorOverParameterUse() throws Exception {
            doTest("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt/applicable_cursorOverParameterUse.kt");
        }
        
        @TestMetadata("applicable_formatsProperly.kt")
        public void testApplicable_formatsProperly() throws Exception {
            doTest("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt/applicable_formatsProperly.kt");
        }
        
        @TestMetadata("notApplicable_alreadyUsesImplicitIt.kt")
        public void testNotApplicable_alreadyUsesImplicitIt() throws Exception {
            doTest("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt/notApplicable_alreadyUsesImplicitIt.kt");
        }
        
        @TestMetadata("notApplicable_hasMultipleParameters.kt")
        public void testNotApplicable_hasMultipleParameters() throws Exception {
            doTest("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt/notApplicable_hasMultipleParameters.kt");
        }
        
        @TestMetadata("notApplicable_notFunctionLiteralParameter.kt")
        public void testNotApplicable_notFunctionLiteralParameter() throws Exception {
            doTest("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt/notApplicable_notFunctionLiteralParameter.kt");
        }
        
        @TestMetadata("notApplicable_parameterHasExplicitType.kt")
        public void testNotApplicable_parameterHasExplicitType() throws Exception {
            doTest("idea/testData/intentions/replaceExplicitFunctionLiteralParamWithIt/notApplicable_parameterHasExplicitType.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/replaceItWithExplicitFunctionLiteralParam")
    public static class ReplaceItWithExplicitFunctionLiteralParam extends AbstractIntentionTest {
        public void testAllFilesPresentInReplaceItWithExplicitFunctionLiteralParam() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/replaceItWithExplicitFunctionLiteralParam"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("applicable.kt")
        public void testApplicable() throws Exception {
            doTest("idea/testData/intentions/replaceItWithExplicitFunctionLiteralParam/applicable.kt");
        }
        
        @TestMetadata("applicable_nestedFunctionLiterals.kt")
        public void testApplicable_nestedFunctionLiterals() throws Exception {
            doTest("idea/testData/intentions/replaceItWithExplicitFunctionLiteralParam/applicable_nestedFunctionLiterals.kt");
        }
        
        @TestMetadata("applicable_nestedFunctionWithIt.kt")
        public void testApplicable_nestedFunctionWithIt() throws Exception {
            doTest("idea/testData/intentions/replaceItWithExplicitFunctionLiteralParam/applicable_nestedFunctionWithIt.kt");
        }
        
        @TestMetadata("notApplicable_localVariableIt.kt")
        public void testNotApplicable_localVariableIt() throws Exception {
            doTest("idea/testData/intentions/replaceItWithExplicitFunctionLiteralParam/notApplicable_localVariableIt.kt");
        }
        
        @TestMetadata("notApplicable_parameterExplicitlyNamedIt.kt")
        public void testNotApplicable_parameterExplicitlyNamedIt() throws Exception {
            doTest("idea/testData/intentions/replaceItWithExplicitFunctionLiteralParam/notApplicable_parameterExplicitlyNamedIt.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/replaceWithDotQualifiedMethodCall")
    public static class ReplaceWithDotQualifiedMethodCall extends AbstractIntentionTest {
        public void testAllFilesPresentInReplaceWithDotQualifiedMethodCall() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/replaceWithDotQualifiedMethodCall"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("functionCallAfterInfixCall.kt")
        public void testFunctionCallAfterInfixCall() throws Exception {
            doTest("idea/testData/intentions/replaceWithDotQualifiedMethodCall/functionCallAfterInfixCall.kt");
        }
        
        @TestMetadata("functionLiteralArgument.kt")
        public void testFunctionLiteralArgument() throws Exception {
            doTest("idea/testData/intentions/replaceWithDotQualifiedMethodCall/functionLiteralArgument.kt");
        }
        
        @TestMetadata("nonApplicableBinaryOperation.kt")
        public void testNonApplicableBinaryOperation() throws Exception {
            doTest("idea/testData/intentions/replaceWithDotQualifiedMethodCall/nonApplicableBinaryOperation.kt");
        }
        
        @TestMetadata("nullAssertedCall.kt")
        public void testNullAssertedCall() throws Exception {
            doTest("idea/testData/intentions/replaceWithDotQualifiedMethodCall/nullAssertedCall.kt");
        }
        
        @TestMetadata("parenthesesAroundRightHandArgument.kt")
        public void testParenthesesAroundRightHandArgument() throws Exception {
            doTest("idea/testData/intentions/replaceWithDotQualifiedMethodCall/parenthesesAroundRightHandArgument.kt");
        }
        
        @TestMetadata("simpleInfixFunctionCall.kt")
        public void testSimpleInfixFunctionCall() throws Exception {
            doTest("idea/testData/intentions/replaceWithDotQualifiedMethodCall/simpleInfixFunctionCall.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/replaceWithInfixFunctionCall")
    public static class ReplaceWithInfixFunctionCall extends AbstractIntentionTest {
        public void testAllFilesPresentInReplaceWithInfixFunctionCall() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/replaceWithInfixFunctionCall"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("binaryExpressionArgument.kt")
        public void testBinaryExpressionArgument() throws Exception {
            doTest("idea/testData/intentions/replaceWithInfixFunctionCall/binaryExpressionArgument.kt");
        }
        
        @TestMetadata("caretInsideCalleeExpr.kt")
        public void testCaretInsideCalleeExpr() throws Exception {
            doTest("idea/testData/intentions/replaceWithInfixFunctionCall/caretInsideCalleeExpr.kt");
        }
        
        @TestMetadata("caretInsideReceiverExpr.kt")
        public void testCaretInsideReceiverExpr() throws Exception {
            doTest("idea/testData/intentions/replaceWithInfixFunctionCall/caretInsideReceiverExpr.kt");
        }
        
        @TestMetadata("doubleFunctionCall.kt")
        public void testDoubleFunctionCall() throws Exception {
            doTest("idea/testData/intentions/replaceWithInfixFunctionCall/doubleFunctionCall.kt");
        }
        
        @TestMetadata("doubleFunctionCallWithoutParentheses.kt")
        public void testDoubleFunctionCallWithoutParentheses() throws Exception {
            doTest("idea/testData/intentions/replaceWithInfixFunctionCall/doubleFunctionCallWithoutParentheses.kt");
        }
        
        @TestMetadata("firstParameterLabeled.kt")
        public void testFirstParameterLabeled() throws Exception {
            doTest("idea/testData/intentions/replaceWithInfixFunctionCall/firstParameterLabeled.kt");
        }
        
        @TestMetadata("functionLiteralArgument.kt")
        public void testFunctionLiteralArgument() throws Exception {
            doTest("idea/testData/intentions/replaceWithInfixFunctionCall/functionLiteralArgument.kt");
        }
        
        @TestMetadata("functionSafeCall.kt")
        public void testFunctionSafeCall() throws Exception {
            doTest("idea/testData/intentions/replaceWithInfixFunctionCall/functionSafeCall.kt");
        }
        
        @TestMetadata("inapplicableCaretPosition.kt")
        public void testInapplicableCaretPosition() throws Exception {
            doTest("idea/testData/intentions/replaceWithInfixFunctionCall/inapplicableCaretPosition.kt");
        }
        
        @TestMetadata("multipleArguments.kt")
        public void testMultipleArguments() throws Exception {
            doTest("idea/testData/intentions/replaceWithInfixFunctionCall/multipleArguments.kt");
        }
        
        @TestMetadata("namedArgument.kt")
        public void testNamedArgument() throws Exception {
            doTest("idea/testData/intentions/replaceWithInfixFunctionCall/namedArgument.kt");
        }
        
        @TestMetadata("nullAssertedReceiver.kt")
        public void testNullAssertedReceiver() throws Exception {
            doTest("idea/testData/intentions/replaceWithInfixFunctionCall/nullAssertedReceiver.kt");
        }
        
        @TestMetadata("packageFunctionCall.kt")
        public void testPackageFunctionCall() throws Exception {
            doTest("idea/testData/intentions/replaceWithInfixFunctionCall/packageFunctionCall.kt");
        }
        
        @TestMetadata("propertyAccess.kt")
        public void testPropertyAccess() throws Exception {
            doTest("idea/testData/intentions/replaceWithInfixFunctionCall/propertyAccess.kt");
        }
        
        @TestMetadata("secondParameterLabeled.kt")
        public void testSecondParameterLabeled() throws Exception {
            doTest("idea/testData/intentions/replaceWithInfixFunctionCall/secondParameterLabeled.kt");
        }
        
        @TestMetadata("simpleArgumentAndFunctionLiteralArgument.kt")
        public void testSimpleArgumentAndFunctionLiteralArgument() throws Exception {
            doTest("idea/testData/intentions/replaceWithInfixFunctionCall/simpleArgumentAndFunctionLiteralArgument.kt");
        }
        
        @TestMetadata("simpleMethodCall.kt")
        public void testSimpleMethodCall() throws Exception {
            doTest("idea/testData/intentions/replaceWithInfixFunctionCall/simpleMethodCall.kt");
        }
        
        @TestMetadata("singlePackageFunctionCall.kt")
        public void testSinglePackageFunctionCall() throws Exception {
            doTest("idea/testData/intentions/replaceWithInfixFunctionCall/singlePackageFunctionCall.kt");
        }
        
        @TestMetadata("zeroArguments.kt")
        public void testZeroArguments() throws Exception {
            doTest("idea/testData/intentions/replaceWithInfixFunctionCall/zeroArguments.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/replaceWithOperatorAssign")
    public static class ReplaceWithOperatorAssign extends AbstractIntentionTest {
        public void testAllFilesPresentInReplaceWithOperatorAssign() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/replaceWithOperatorAssign"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("illegalMultipleOperators.kt")
        public void testIllegalMultipleOperators() throws Exception {
            doTest("idea/testData/intentions/replaceWithOperatorAssign/illegalMultipleOperators.kt");
        }
        
        @TestMetadata("illegalMultipleOperatorsMiddle.kt")
        public void testIllegalMultipleOperatorsMiddle() throws Exception {
            doTest("idea/testData/intentions/replaceWithOperatorAssign/illegalMultipleOperatorsMiddle.kt");
        }
        
        @TestMetadata("invalidSubtraction.kt")
        public void testInvalidSubtraction() throws Exception {
            doTest("idea/testData/intentions/replaceWithOperatorAssign/invalidSubtraction.kt");
        }
        
        @TestMetadata("multipleOperators.kt")
        public void testMultipleOperators() throws Exception {
            doTest("idea/testData/intentions/replaceWithOperatorAssign/multipleOperators.kt");
        }
        
        @TestMetadata("multipleOperatorsRightSideRepeat.kt")
        public void testMultipleOperatorsRightSideRepeat() throws Exception {
            doTest("idea/testData/intentions/replaceWithOperatorAssign/multipleOperatorsRightSideRepeat.kt");
        }
        
        @TestMetadata("nonRepeatingAssignment.kt")
        public void testNonRepeatingAssignment() throws Exception {
            doTest("idea/testData/intentions/replaceWithOperatorAssign/nonRepeatingAssignment.kt");
        }
        
        @TestMetadata("rightSideRepeat.kt")
        public void testRightSideRepeat() throws Exception {
            doTest("idea/testData/intentions/replaceWithOperatorAssign/rightSideRepeat.kt");
        }
        
        @TestMetadata("simpleAssign.kt")
        public void testSimpleAssign() throws Exception {
            doTest("idea/testData/intentions/replaceWithOperatorAssign/simpleAssign.kt");
        }
        
        @TestMetadata("validSubtraction.kt")
        public void testValidSubtraction() throws Exception {
            doTest("idea/testData/intentions/replaceWithOperatorAssign/validSubtraction.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/replaceWithTraditionalAssignment")
    public static class ReplaceWithTraditionalAssignment extends AbstractIntentionTest {
        public void testAllFilesPresentInReplaceWithTraditionalAssignment() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/replaceWithTraditionalAssignment"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("complexRightExpression.kt")
        public void testComplexRightExpression() throws Exception {
            doTest("idea/testData/intentions/replaceWithTraditionalAssignment/complexRightExpression.kt");
        }
        
        @TestMetadata("nonAssignmentExpression.kt")
        public void testNonAssignmentExpression() throws Exception {
            doTest("idea/testData/intentions/replaceWithTraditionalAssignment/nonAssignmentExpression.kt");
        }
        
        @TestMetadata("nonAugmentedAssign.kt")
        public void testNonAugmentedAssign() throws Exception {
            doTest("idea/testData/intentions/replaceWithTraditionalAssignment/nonAugmentedAssign.kt");
        }
        
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            doTest("idea/testData/intentions/replaceWithTraditionalAssignment/simple.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/simplifyBooleanWithConstants")
    public static class SimplifyBooleanWithConstants extends AbstractIntentionTest {
        public void testAllFilesPresentInSimplifyBooleanWithConstants() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/simplifyBooleanWithConstants"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("deeplyParenthesized.kt")
        public void testDeeplyParenthesized() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/deeplyParenthesized.kt");
        }
        
        @TestMetadata("inapplicableNoConstants.kt")
        public void testInapplicableNoConstants() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/inapplicableNoConstants.kt");
        }
        
        @TestMetadata("inapplicableNotBinary.kt")
        public void testInapplicableNotBinary() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/inapplicableNotBinary.kt");
        }
        
        @TestMetadata("inapplicableUsesVals.kt")
        public void testInapplicableUsesVals() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/inapplicableUsesVals.kt");
        }
        
        @TestMetadata("inapplicableUsesVals2.kt")
        public void testInapplicableUsesVals2() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/inapplicableUsesVals2.kt");
        }
        
        @TestMetadata("inapplicableUsesVals3.kt")
        public void testInapplicableUsesVals3() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/inapplicableUsesVals3.kt");
        }
        
        @TestMetadata("reduceableBinary.kt")
        public void testReduceableBinary() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/reduceableBinary.kt");
        }
        
        @TestMetadata("reduceableBinary2.kt")
        public void testReduceableBinary2() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/reduceableBinary2.kt");
        }
        
        @TestMetadata("reduceableBinary3.kt")
        public void testReduceableBinary3() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/reduceableBinary3.kt");
        }
        
        @TestMetadata("reduceableBinaryWithParenthese.kt")
        public void testReduceableBinaryWithParenthese() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/reduceableBinaryWithParenthese.kt");
        }
        
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/simple.kt");
        }
        
        @TestMetadata("simpleWithMoreBinaries.kt")
        public void testSimpleWithMoreBinaries() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/simpleWithMoreBinaries.kt");
        }
        
        @TestMetadata("simpleWithMoreBinaries2.kt")
        public void testSimpleWithMoreBinaries2() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/simpleWithMoreBinaries2.kt");
        }
        
        @TestMetadata("simpleWithMoreBinaries3.kt")
        public void testSimpleWithMoreBinaries3() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/simpleWithMoreBinaries3.kt");
        }
        
        @TestMetadata("simpleWithMoreBinariesAndParentheses.kt")
        public void testSimpleWithMoreBinariesAndParentheses() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/simpleWithMoreBinariesAndParentheses.kt");
        }
        
        @TestMetadata("simpleWithMoreBinariesAndParentheses2.kt")
        public void testSimpleWithMoreBinariesAndParentheses2() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/simpleWithMoreBinariesAndParentheses2.kt");
        }
        
        @TestMetadata("simpleWithMoreBinariesAndParentheses3.kt")
        public void testSimpleWithMoreBinariesAndParentheses3() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/simpleWithMoreBinariesAndParentheses3.kt");
        }
        
        @TestMetadata("simpleWithNonsensical2.kt")
        public void testSimpleWithNonsensical2() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/simpleWithNonsensical2.kt");
        }
        
        @TestMetadata("simpleWithParentheses.kt")
        public void testSimpleWithParentheses() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/simpleWithParentheses.kt");
        }
        
        @TestMetadata("simpleWithParentheses2.kt")
        public void testSimpleWithParentheses2() throws Exception {
            doTest("idea/testData/intentions/simplifyBooleanWithConstants/simpleWithParentheses2.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention")
    @InnerTestClasses({})
    public static class SimplifyNegatedBinaryExpressionIntention extends AbstractIntentionTest {
        public void testAllFilesPresentInSimplifyNegatedBinaryExpressionIntention() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("equals.kt")
        public void testEquals() throws Exception {
            doTest("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/equals.kt");
        }
        
        @TestMetadata("greaterThan.kt")
        public void testGreaterThan() throws Exception {
            doTest("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/greaterThan.kt");
        }
        
        @TestMetadata("greaterThanOrEquals.kt")
        public void testGreaterThanOrEquals() throws Exception {
            doTest("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/greaterThanOrEquals.kt");
        }
        
        @TestMetadata("in.kt")
        public void testIn() throws Exception {
            doTest("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/in.kt");
        }
        
        @TestMetadata("inapplicableBinaryOperation.kt")
        public void testInapplicableBinaryOperation() throws Exception {
            doTest("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/inapplicableBinaryOperation.kt");
        }
        
        @TestMetadata("is.kt")
        public void testIs() throws Exception {
            doTest("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/is.kt");
        }
        
        @TestMetadata("lessThan.kt")
        public void testLessThan() throws Exception {
            doTest("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/lessThan.kt");
        }
        
        @TestMetadata("lessThanOrEquals.kt")
        public void testLessThanOrEquals() throws Exception {
            doTest("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/lessThanOrEquals.kt");
        }
        
        @TestMetadata("notEquals.kt")
        public void testNotEquals() throws Exception {
            doTest("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/notEquals.kt");
        }
        
        @TestMetadata("notIn.kt")
        public void testNotIn() throws Exception {
            doTest("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/notIn.kt");
        }
        
        @TestMetadata("notIs.kt")
        public void testNotIs() throws Exception {
            doTest("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/notIs.kt");
        }
        
        @TestMetadata("simpleInvert.kt")
        public void testSimpleInvert() throws Exception {
            doTest("idea/testData/intentions/simplifyNegatedBinaryExpressionIntention/simpleInvert.kt");
        }
        
        public static Test innerSuite() {
            TestSuite suite = new TestSuite("SimplifyNegatedBinaryExpressionIntention");
            suite.addTestSuite(SimplifyNegatedBinaryExpressionIntention.class);
            return suite;
        }
    }
    
    @TestMetadata("idea/testData/intentions/specifyType")
    public static class SpecifyType extends AbstractIntentionTest {
        public void testAllFilesPresentInSpecifyType() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/specifyType"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("badCaretPosition.kt")
        public void testBadCaretPosition() throws Exception {
            doTest("idea/testData/intentions/specifyType/badCaretPosition.kt");
        }
        
        @TestMetadata("classNameClashing.kt")
        public void testClassNameClashing() throws Exception {
            doTest("idea/testData/intentions/specifyType/classNameClashing.kt");
        }
        
        @TestMetadata("enumType.kt")
        public void testEnumType() throws Exception {
            doTest("idea/testData/intentions/specifyType/enumType.kt");
        }
        
        @TestMetadata("functionType.kt")
        public void testFunctionType() throws Exception {
            doTest("idea/testData/intentions/specifyType/functionType.kt");
        }
        
        @TestMetadata("loopParameter.kt")
        public void testLoopParameter() throws Exception {
            doTest("idea/testData/intentions/specifyType/loopParameter.kt");
        }
        
        @TestMetadata("onType.kt")
        public void testOnType() throws Exception {
            doTest("idea/testData/intentions/specifyType/onType.kt");
        }
        
        @TestMetadata("publicMember.kt")
        public void testPublicMember() throws Exception {
            doTest("idea/testData/intentions/specifyType/publicMember.kt");
        }
        
        @TestMetadata("removeUnresolvedType.kt")
        public void testRemoveUnresolvedType() throws Exception {
            doTest("idea/testData/intentions/specifyType/removeUnresolvedType.kt");
        }
        
        @TestMetadata("stringRedefined.kt")
        public void testStringRedefined() throws Exception {
            doTest("idea/testData/intentions/specifyType/stringRedefined.kt");
        }
        
        @TestMetadata("typeAlreadyProvided.kt")
        public void testTypeAlreadyProvided() throws Exception {
            doTest("idea/testData/intentions/specifyType/typeAlreadyProvided.kt");
        }
        
        @TestMetadata("unitType.kt")
        public void testUnitType() throws Exception {
            doTest("idea/testData/intentions/specifyType/unitType.kt");
        }
        
        @TestMetadata("unknownType.kt")
        public void testUnknownType() throws Exception {
            doTest("idea/testData/intentions/specifyType/unknownType.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/splitIf")
    public static class SplitIf extends AbstractIntentionTest {
        public void testAllFilesPresentInSplitIf() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/splitIf"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("splitIfAndOr.kt")
        public void testSplitIfAndOr() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfAndOr.kt");
        }
        
        @TestMetadata("splitIfAndOrWithBraces.kt")
        public void testSplitIfAndOrWithBraces() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfAndOrWithBraces.kt");
        }
        
        @TestMetadata("splitIfAndWithBraces.kt")
        public void testSplitIfAndWithBraces() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfAndWithBraces.kt");
        }
        
        @TestMetadata("splitIfCaretOnIf.kt")
        public void testSplitIfCaretOnIf() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfCaretOnIf.kt");
        }
        
        @TestMetadata("splitIfNestedIf.kt")
        public void testSplitIfNestedIf() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfNestedIf.kt");
        }
        
        @TestMetadata("splitIfNestedIfNotApplicable.kt")
        public void testSplitIfNestedIfNotApplicable() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfNestedIfNotApplicable.kt");
        }
        
        @TestMetadata("splitIfNestedInside.kt")
        public void testSplitIfNestedInside() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfNestedInside.kt");
        }
        
        @TestMetadata("splitIfNestedOutside.kt")
        public void testSplitIfNestedOutside() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfNestedOutside.kt");
        }
        
        @TestMetadata("splitIfNotIf.kt")
        public void testSplitIfNotIf() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfNotIf.kt");
        }
        
        @TestMetadata("splitIfOnIfWithOr.kt")
        public void testSplitIfOnIfWithOr() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfOnIfWithOr.kt");
        }
        
        @TestMetadata("splitIfOneAND.kt")
        public void testSplitIfOneAND() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfOneAND.kt");
        }
        
        @TestMetadata("splitIfOperatorAsFunctionParam.kt")
        public void testSplitIfOperatorAsFunctionParam() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfOperatorAsFunctionParam.kt");
        }
        
        @TestMetadata("splitIfOperatorOutsideIf.kt")
        public void testSplitIfOperatorOutsideIf() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfOperatorOutsideIf.kt");
        }
        
        @TestMetadata("splitIfOrAnd.kt")
        public void testSplitIfOrAnd() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfOrAnd.kt");
        }
        
        @TestMetadata("splitIfOrWithBraces.kt")
        public void testSplitIfOrWithBraces() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfOrWithBraces.kt");
        }
        
        @TestMetadata("splitIfTwoOperatorsFirst.kt")
        public void testSplitIfTwoOperatorsFirst() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfTwoOperatorsFirst.kt");
        }
        
        @TestMetadata("splitIfTwoOperatorsSecond.kt")
        public void testSplitIfTwoOperatorsSecond() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfTwoOperatorsSecond.kt");
        }
        
        @TestMetadata("splitIfWithElse.kt")
        public void testSplitIfWithElse() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfWithElse.kt");
        }
        
        @TestMetadata("splitIfWithFunction.kt")
        public void testSplitIfWithFunction() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfWithFunction.kt");
        }
        
        @TestMetadata("splitIfWithNotOperator.kt")
        public void testSplitIfWithNotOperator() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfWithNotOperator.kt");
        }
        
        @TestMetadata("splitIfWithNotOperatorGood.kt")
        public void testSplitIfWithNotOperatorGood() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfWithNotOperatorGood.kt");
        }
        
        @TestMetadata("splitIfWithOR.kt")
        public void testSplitIfWithOR() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfWithOR.kt");
        }
        
        @TestMetadata("splitIfWithORElse.kt")
        public void testSplitIfWithORElse() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfWithORElse.kt");
        }
        
        @TestMetadata("splitIfWrongCaretLocation.kt")
        public void testSplitIfWrongCaretLocation() throws Exception {
            doTest("idea/testData/intentions/splitIf/splitIfWrongCaretLocation.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/intentions/swapBinaryExpression")
    public static class SwapBinaryExpression extends AbstractIntentionTest {
        public void testAllFilesPresentInSwapBinaryExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/intentions/swapBinaryExpression"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("assignment.kt")
        public void testAssignment() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/assignment.kt");
        }
        
        @TestMetadata("compareTo.kt")
        public void testCompareTo() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/compareTo.kt");
        }
        
        @TestMetadata("conjunction.kt")
        public void testConjunction() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/conjunction.kt");
        }
        
        @TestMetadata("conjunctionLiteral.kt")
        public void testConjunctionLiteral() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/conjunctionLiteral.kt");
        }
        
        @TestMetadata("disjunction.kt")
        public void testDisjunction() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/disjunction.kt");
        }
        
        @TestMetadata("disjunctionLiteral.kt")
        public void testDisjunctionLiteral() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/disjunctionLiteral.kt");
        }
        
        @TestMetadata("divide.kt")
        public void testDivide() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/divide.kt");
        }
        
        @TestMetadata("divideAssign.kt")
        public void testDivideAssign() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/divideAssign.kt");
        }
        
        @TestMetadata("divideLiteral.kt")
        public void testDivideLiteral() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/divideLiteral.kt");
        }
        
        @TestMetadata("equals.kt")
        public void testEquals() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/equals.kt");
        }
        
        @TestMetadata("equalsLiteral.kt")
        public void testEqualsLiteral() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/equalsLiteral.kt");
        }
        
        @TestMetadata("greaterThan.kt")
        public void testGreaterThan() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/greaterThan.kt");
        }
        
        @TestMetadata("greaterThanEquals.kt")
        public void testGreaterThanEquals() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/greaterThanEquals.kt");
        }
        
        @TestMetadata("identityEquals.kt")
        public void testIdentityEquals() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/identityEquals.kt");
        }
        
        @TestMetadata("identityEqualsLiteral.kt")
        public void testIdentityEqualsLiteral() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/identityEqualsLiteral.kt");
        }
        
        @TestMetadata("in.kt")
        public void testIn() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/in.kt");
        }
        
        @TestMetadata("infixFunction.kt")
        public void testInfixFunction() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/infixFunction.kt");
        }
        
        @TestMetadata("is.kt")
        public void testIs() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/is.kt");
        }
        
        @TestMetadata("lessThan.kt")
        public void testLessThan() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/lessThan.kt");
        }
        
        @TestMetadata("lessThanEquals.kt")
        public void testLessThanEquals() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/lessThanEquals.kt");
        }
        
        @TestMetadata("minus.kt")
        public void testMinus() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/minus.kt");
        }
        
        @TestMetadata("minusAssign.kt")
        public void testMinusAssign() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/minusAssign.kt");
        }
        
        @TestMetadata("minusLiteral.kt")
        public void testMinusLiteral() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/minusLiteral.kt");
        }
        
        @TestMetadata("multipleOperands.kt")
        public void testMultipleOperands() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/multipleOperands.kt");
        }
        
        @TestMetadata("multipleOperandsWithDifferentPrecedence.kt")
        public void testMultipleOperandsWithDifferentPrecedence() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/multipleOperandsWithDifferentPrecedence.kt");
        }
        
        @TestMetadata("multipleOperandsWithDifferentPrecedence2.kt")
        public void testMultipleOperandsWithDifferentPrecedence2() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/multipleOperandsWithDifferentPrecedence2.kt");
        }
        
        @TestMetadata("multipleOperandsWithDifferentPrecedence3.kt")
        public void testMultipleOperandsWithDifferentPrecedence3() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/multipleOperandsWithDifferentPrecedence3.kt");
        }
        
        @TestMetadata("multipleOperandsWithDifferentPrecedence4.kt")
        public void testMultipleOperandsWithDifferentPrecedence4() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/multipleOperandsWithDifferentPrecedence4.kt");
        }
        
        @TestMetadata("multipleOperandsWithDifferentPrecedence5.kt")
        public void testMultipleOperandsWithDifferentPrecedence5() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/multipleOperandsWithDifferentPrecedence5.kt");
        }
        
        @TestMetadata("multipleOperandsWithDifferentPrecedence6.kt")
        public void testMultipleOperandsWithDifferentPrecedence6() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/multipleOperandsWithDifferentPrecedence6.kt");
        }
        
        @TestMetadata("multiply.kt")
        public void testMultiply() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/multiply.kt");
        }
        
        @TestMetadata("multiplyAssign.kt")
        public void testMultiplyAssign() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/multiplyAssign.kt");
        }
        
        @TestMetadata("nonBinaryExpr.kt")
        public void testNonBinaryExpr() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/nonBinaryExpr.kt");
        }
        
        @TestMetadata("notEquals.kt")
        public void testNotEquals() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/notEquals.kt");
        }
        
        @TestMetadata("notIdentityEquals.kt")
        public void testNotIdentityEquals() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/notIdentityEquals.kt");
        }
        
        @TestMetadata("notIn.kt")
        public void testNotIn() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/notIn.kt");
        }
        
        @TestMetadata("notIs.kt")
        public void testNotIs() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/notIs.kt");
        }
        
        @TestMetadata("nullOperand.kt")
        public void testNullOperand() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/nullOperand.kt");
        }
        
        @TestMetadata("plus.kt")
        public void testPlus() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/plus.kt");
        }
        
        @TestMetadata("plusAssign.kt")
        public void testPlusAssign() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/plusAssign.kt");
        }
        
        @TestMetadata("plusInt.kt")
        public void testPlusInt() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/plusInt.kt");
        }
        
        @TestMetadata("plusLiteral.kt")
        public void testPlusLiteral() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/plusLiteral.kt");
        }
        
        @TestMetadata("plusMinus.kt")
        public void testPlusMinus() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/plusMinus.kt");
        }
        
        @TestMetadata("rangeTo.kt")
        public void testRangeTo() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/rangeTo.kt");
        }
        
        @TestMetadata("rangeToLiteral.kt")
        public void testRangeToLiteral() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/rangeToLiteral.kt");
        }
        
        @TestMetadata("remainder.kt")
        public void testRemainder() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/remainder.kt");
        }
        
        @TestMetadata("remainderAssign.kt")
        public void testRemainderAssign() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/remainderAssign.kt");
        }
        
        @TestMetadata("times.kt")
        public void testTimes() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/times.kt");
        }
        
        @TestMetadata("timesAssign.kt")
        public void testTimesAssign() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/timesAssign.kt");
        }
        
        @TestMetadata("timesLiteral.kt")
        public void testTimesLiteral() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/timesLiteral.kt");
        }
        
        @TestMetadata("xor.kt")
        public void testXor() throws Exception {
            doTest("idea/testData/intentions/swapBinaryExpression/xor.kt");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("IntentionTestGenerated");
        suite.addTestSuite(IntentionTestGenerated.class);
        suite.addTestSuite(AddBraces.class);
        suite.addTest(AttributeCallReplacements.innerSuite());
        suite.addTest(Branched.innerSuite());
        suite.addTestSuite(ConvertAssertToIf.class);
        suite.addTestSuite(ConvertIfToAssert.class);
        suite.addTestSuite(ConvertNegatedBooleanSequence.class);
        suite.addTestSuite(ConvertNegatedExpressionWithDemorgansLaw.class);
        suite.addTestSuite(ConvertToBlockBody.class);
        suite.addTestSuite(ConvertToConcatenatedStringIntention.class);
        suite.addTestSuite(ConvertToExpressionBody.class);
        suite.addTestSuite(ConvertToForEachFunctionCall.class);
        suite.addTestSuite(ConvertToForEachLoop.class);
        suite.addTestSuite(ConvertToStringTemplateIntention.class);
        suite.addTest(Declarations.innerSuite());
        suite.addTestSuite(InsertCurlyBracesToTemplate.class);
        suite.addTestSuite(InsertExplicitTypeArguments.class);
        suite.addTestSuite(InvertIfCondition.class);
        suite.addTestSuite(MakeTypeExplicitInLambda.class);
        suite.addTestSuite(MakeTypeImplicitInLambda.class);
        suite.addTestSuite(MoveLambdaInsideParentheses.class);
        suite.addTestSuite(MoveLambdaOutsideParentheses.class);
        suite.addTestSuite(OperatorToFunction.class);
        suite.addTestSuite(ReconstructedType.class);
        suite.addTestSuite(RemoveBraces.class);
        suite.addTestSuite(RemoveCurlyBracesFromTemplate.class);
        suite.addTest(RemoveExplicitTypeArguments.innerSuite());
        suite.addTestSuite(RemoveUnnecessaryParentheses.class);
        suite.addTestSuite(ReplaceExplicitFunctionLiteralParamWithIt.class);
        suite.addTestSuite(ReplaceItWithExplicitFunctionLiteralParam.class);
        suite.addTestSuite(ReplaceWithDotQualifiedMethodCall.class);
        suite.addTestSuite(ReplaceWithInfixFunctionCall.class);
        suite.addTestSuite(ReplaceWithOperatorAssign.class);
        suite.addTestSuite(ReplaceWithTraditionalAssignment.class);
        suite.addTestSuite(SimplifyBooleanWithConstants.class);
        suite.addTest(SimplifyNegatedBinaryExpressionIntention.innerSuite());
        suite.addTestSuite(SpecifyType.class);
        suite.addTestSuite(SplitIf.class);
        suite.addTestSuite(SwapBinaryExpression.class);
        return suite;
    }
}

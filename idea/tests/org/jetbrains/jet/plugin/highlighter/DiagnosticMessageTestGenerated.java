/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.plugin.highlighter;

import junit.framework.Test;
import junit.framework.TestSuite;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/diagnosticMessage")
public class DiagnosticMessageTestGenerated extends AbstractDiagnosticMessageTest {
    public void testAllFilesPresentInDiagnosticMessage() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/diagnosticMessage"), Pattern.compile("^(.+)\\.kt$"), true);
    }
    
    @TestMetadata("assignedButNeverAccessedVariable.kt")
    public void testAssignedButNeverAccessedVariable() throws Exception {
        doTest("idea/testData/diagnosticMessage/assignedButNeverAccessedVariable.kt");
    }
    
    @TestMetadata("cannotInferVisibility.kt")
    public void testCannotInferVisibility() throws Exception {
        doTest("idea/testData/diagnosticMessage/cannotInferVisibility.kt");
    }
    
    @TestMetadata("cannotOverrideInvisibleMember.kt")
    public void testCannotOverrideInvisibleMember() throws Exception {
        doTest("idea/testData/diagnosticMessage/cannotOverrideInvisibleMember.kt");
    }
    
    @TestMetadata("conflictingOverloadsClass.kt")
    public void testConflictingOverloadsClass() throws Exception {
        doTest("idea/testData/diagnosticMessage/conflictingOverloadsClass.kt");
    }
    
    @TestMetadata("conflictingOverloadsDefaultPackage.kt")
    public void testConflictingOverloadsDefaultPackage() throws Exception {
        doTest("idea/testData/diagnosticMessage/conflictingOverloadsDefaultPackage.kt");
    }
    
    @TestMetadata("conflictingSubstitutions.kt")
    public void testConflictingSubstitutions() throws Exception {
        doTest("idea/testData/diagnosticMessage/conflictingSubstitutions.kt");
    }
    
    @TestMetadata("differentNamesForSameParameter.kt")
    public void testDifferentNamesForSameParameter() throws Exception {
        doTest("idea/testData/diagnosticMessage/differentNamesForSameParameter.kt");
    }
    
    @TestMetadata("extensionInClassReference.kt")
    public void testExtensionInClassReference() throws Exception {
        doTest("idea/testData/diagnosticMessage/extensionInClassReference.kt");
    }
    
    @TestMetadata("functionPlaceholder.kt")
    public void testFunctionPlaceholder() throws Exception {
        doTest("idea/testData/diagnosticMessage/functionPlaceholder.kt");
    }
    
    @TestMetadata("inaccessibleOuterClassExpression.kt")
    public void testInaccessibleOuterClassExpression() throws Exception {
        doTest("idea/testData/diagnosticMessage/inaccessibleOuterClassExpression.kt");
    }
    
    @TestMetadata("invisibleMember.kt")
    public void testInvisibleMember() throws Exception {
        doTest("idea/testData/diagnosticMessage/invisibleMember.kt");
    }
    
    @TestMetadata("multipleDefaultsFromSupertypes.kt")
    public void testMultipleDefaultsFromSupertypes() throws Exception {
        doTest("idea/testData/diagnosticMessage/multipleDefaultsFromSupertypes.kt");
    }
    
    @TestMetadata("nameInConstraintIsNotATypeParameter.kt")
    public void testNameInConstraintIsNotATypeParameter() throws Exception {
        doTest("idea/testData/diagnosticMessage/nameInConstraintIsNotATypeParameter.kt");
    }
    
    @TestMetadata("nestedClassAcessedViaInstanceReference.kt")
    public void testNestedClassAcessedViaInstanceReference() throws Exception {
        doTest("idea/testData/diagnosticMessage/nestedClassAcessedViaInstanceReference.kt");
    }
    
    @TestMetadata("noneApplicable.kt")
    public void testNoneApplicable() throws Exception {
        doTest("idea/testData/diagnosticMessage/noneApplicable.kt");
    }
    
    @TestMetadata("noneApplicableGeneric.kt")
    public void testNoneApplicableGeneric() throws Exception {
        doTest("idea/testData/diagnosticMessage/noneApplicableGeneric.kt");
    }
    
    @TestMetadata("numberValueTypes.kt")
    public void testNumberValueTypes() throws Exception {
        doTest("idea/testData/diagnosticMessage/numberValueTypes.kt");
    }
    
    @TestMetadata("renderCollectionOfTypes.kt")
    public void testRenderCollectionOfTypes() throws Exception {
        doTest("idea/testData/diagnosticMessage/renderCollectionOfTypes.kt");
    }
    
    @TestMetadata("typeInferenceExpectedTypeMismatch.kt")
    public void testTypeInferenceExpectedTypeMismatch() throws Exception {
        doTest("idea/testData/diagnosticMessage/typeInferenceExpectedTypeMismatch.kt");
    }
    
    @TestMetadata("typeMismatchWithNothing.kt")
    public void testTypeMismatchWithNothing() throws Exception {
        doTest("idea/testData/diagnosticMessage/typeMismatchWithNothing.kt");
    }
    
    @TestMetadata("unusedParameter.kt")
    public void testUnusedParameter() throws Exception {
        doTest("idea/testData/diagnosticMessage/unusedParameter.kt");
    }
    
    @TestMetadata("unusedValue.kt")
    public void testUnusedValue() throws Exception {
        doTest("idea/testData/diagnosticMessage/unusedValue.kt");
    }
    
    @TestMetadata("unusedVariable.kt")
    public void testUnusedVariable() throws Exception {
        doTest("idea/testData/diagnosticMessage/unusedVariable.kt");
    }
    
    @TestMetadata("upperBoundViolated.kt")
    public void testUpperBoundViolated() throws Exception {
        doTest("idea/testData/diagnosticMessage/upperBoundViolated.kt");
    }
    
    @TestMetadata("wrongReturnTypeInImplementation.kt")
    public void testWrongReturnTypeInImplementation() throws Exception {
        doTest("idea/testData/diagnosticMessage/wrongReturnTypeInImplementation.kt");
    }
    
}

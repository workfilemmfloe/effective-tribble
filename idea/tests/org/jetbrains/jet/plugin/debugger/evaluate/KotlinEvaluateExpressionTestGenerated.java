/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.plugin.debugger.evaluate;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.plugin.debugger.evaluate.AbstractKotlinEvaluateExpressionTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@InnerTestClasses({KotlinEvaluateExpressionTestGenerated.SingleBreakpoint.class, KotlinEvaluateExpressionTestGenerated.MultipleBreakpoints.class})
public class KotlinEvaluateExpressionTestGenerated extends AbstractKotlinEvaluateExpressionTest {
    @TestMetadata("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint")
    public static class SingleBreakpoint extends AbstractKotlinEvaluateExpressionTest {
        @TestMetadata("abstractFunCall.kt")
        public void testAbstractFunCall() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/abstractFunCall.kt");
        }
        
        public void testAllFilesPresentInSingleBreakpoint() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("arrays.kt")
        public void testArrays() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/arrays.kt");
        }
        
        @TestMetadata("classFromAnotherPackage.kt")
        public void testClassFromAnotherPackage() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/classFromAnotherPackage.kt");
        }
        
        @TestMetadata("classObjectVal.kt")
        public void testClassObjectVal() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/classObjectVal.kt");
        }
        
        @TestMetadata("collections.kt")
        public void testCollections() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/collections.kt");
        }
        
        @TestMetadata("dependentOnFile.kt")
        public void testDependentOnFile() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/dependentOnFile.kt");
        }
        
        @TestMetadata("doubles.kt")
        public void testDoubles() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/doubles.kt");
        }
        
        @TestMetadata("enums.kt")
        public void testEnums() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/enums.kt");
        }
        
        @TestMetadata("errors.kt")
        public void testErrors() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/errors.kt");
        }
        
        @TestMetadata("extractLocalVariables.kt")
        public void testExtractLocalVariables() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/extractLocalVariables.kt");
        }
        
        @TestMetadata("extractThis.kt")
        public void testExtractThis() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/extractThis.kt");
        }
        
        @TestMetadata("extractVariablesFromCall.kt")
        public void testExtractVariablesFromCall() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/extractVariablesFromCall.kt");
        }
        
        @TestMetadata("imports.kt")
        public void testImports() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/imports.kt");
        }
        
        @TestMetadata("insertInBlock.kt")
        public void testInsertInBlock() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/insertInBlock.kt");
        }
        
        @TestMetadata("multilineExpressionAtBreakpoint.kt")
        public void testMultilineExpressionAtBreakpoint() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/multilineExpressionAtBreakpoint.kt");
        }
        
        @TestMetadata("privateMember.kt")
        public void testPrivateMember() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/privateMember.kt");
        }
        
        @TestMetadata("protectedMember.kt")
        public void testProtectedMember() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/protectedMember.kt");
        }
        
        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/simple.kt");
        }
        
        @TestMetadata("stdlib.kt")
        public void testStdlib() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/stdlib.kt");
        }
        
        @TestMetadata("vars.kt")
        public void testVars() throws Exception {
            doSingleBreakpointTest("idea/testData/debugger/tinyApp/src/evaluate/singleBreakpoint/vars.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/debugger/tinyApp/src/evaluate/multipleBreakpoints")
    public static class MultipleBreakpoints extends AbstractKotlinEvaluateExpressionTest {
        public void testAllFilesPresentInMultipleBreakpoints() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/debugger/tinyApp/src/evaluate/multipleBreakpoints"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("clearCache.kt")
        public void testClearCache() throws Exception {
            doMultipleBreakpointsTest("idea/testData/debugger/tinyApp/src/evaluate/multipleBreakpoints/clearCache.kt");
        }
        
        @TestMetadata("exceptions.kt")
        public void testExceptions() throws Exception {
            doMultipleBreakpointsTest("idea/testData/debugger/tinyApp/src/evaluate/multipleBreakpoints/exceptions.kt");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("KotlinEvaluateExpressionTestGenerated");
        suite.addTestSuite(SingleBreakpoint.class);
        suite.addTestSuite(MultipleBreakpoints.class);
        return suite;
    }
}

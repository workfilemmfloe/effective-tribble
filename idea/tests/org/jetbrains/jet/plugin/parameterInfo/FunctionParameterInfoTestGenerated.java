/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.plugin.parameterInfo;

import junit.framework.Test;
import junit.framework.TestSuite;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/parameterInfo/functionParameterInfo")
public class FunctionParameterInfoTestGenerated extends AbstractFunctionParameterInfoTest {
    public void testAllFilesPresentInFunctionParameterInfo() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("idea/testData/parameterInfo/functionParameterInfo"), Pattern.compile("^(.+)\\.kt$"), true);
    }
    
    @TestMetadata("Deprecated.kt")
    public void testDeprecated() throws Exception {
        doTest("idea/testData/parameterInfo/functionParameterInfo/Deprecated.kt");
    }
    
    @TestMetadata("ExtensionOnClassObject.kt")
    public void testExtensionOnClassObject() throws Exception {
        doTest("idea/testData/parameterInfo/functionParameterInfo/ExtensionOnClassObject.kt");
    }
    
    @TestMetadata("InheritedFunctions.kt")
    public void testInheritedFunctions() throws Exception {
        doTest("idea/testData/parameterInfo/functionParameterInfo/InheritedFunctions.kt");
    }
    
    @TestMetadata("InheritedWithCurrentFunctions.kt")
    public void testInheritedWithCurrentFunctions() throws Exception {
        doTest("idea/testData/parameterInfo/functionParameterInfo/InheritedWithCurrentFunctions.kt");
    }
    
    @TestMetadata("NamedAndDefaultParameter.kt")
    public void testNamedAndDefaultParameter() throws Exception {
        doTest("idea/testData/parameterInfo/functionParameterInfo/NamedAndDefaultParameter.kt");
    }
    
    @TestMetadata("NamedParameter.kt")
    public void testNamedParameter() throws Exception {
        doTest("idea/testData/parameterInfo/functionParameterInfo/NamedParameter.kt");
    }
    
    @TestMetadata("NamedParameter2.kt")
    public void testNamedParameter2() throws Exception {
        doTest("idea/testData/parameterInfo/functionParameterInfo/NamedParameter2.kt");
    }
    
    @TestMetadata("NotGreen.kt")
    public void testNotGreen() throws Exception {
        doTest("idea/testData/parameterInfo/functionParameterInfo/NotGreen.kt");
    }
    
    @TestMetadata("NullableTypeCall.kt")
    public void testNullableTypeCall() throws Exception {
        doTest("idea/testData/parameterInfo/functionParameterInfo/NullableTypeCall.kt");
    }
    
    @TestMetadata("Println.kt")
    public void testPrintln() throws Exception {
        doTest("idea/testData/parameterInfo/functionParameterInfo/Println.kt");
    }
    
    @TestMetadata("Simple.kt")
    public void testSimple() throws Exception {
        doTest("idea/testData/parameterInfo/functionParameterInfo/Simple.kt");
    }
    
    @TestMetadata("SimpleConstructor.kt")
    public void testSimpleConstructor() throws Exception {
        doTest("idea/testData/parameterInfo/functionParameterInfo/SimpleConstructor.kt");
    }
    
    @TestMetadata("SuperConstructorCall.kt")
    public void testSuperConstructorCall() throws Exception {
        doTest("idea/testData/parameterInfo/functionParameterInfo/SuperConstructorCall.kt");
    }
    
    @TestMetadata("TwoFunctions.kt")
    public void testTwoFunctions() throws Exception {
        doTest("idea/testData/parameterInfo/functionParameterInfo/TwoFunctions.kt");
    }
    
    @TestMetadata("TwoFunctionsGrey.kt")
    public void testTwoFunctionsGrey() throws Exception {
        doTest("idea/testData/parameterInfo/functionParameterInfo/TwoFunctionsGrey.kt");
    }
    
}

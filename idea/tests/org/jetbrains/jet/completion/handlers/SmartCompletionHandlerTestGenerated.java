/*
 * Copyright 2010-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.completion.handlers;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.completion.handlers.AbstractSmartCompletionHandlerTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/completion/handlers/smart")
public class SmartCompletionHandlerTestGenerated extends AbstractSmartCompletionHandlerTest {
    public void testAllFilesPresentInSmart() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/completion/handlers/smart"), Pattern.compile("^(.+)\\.kt$"), true);
    }
    
    @TestMetadata("AnonymousObject1.kt")
    public void testAnonymousObject1() throws Exception {
        doTest("idea/testData/completion/handlers/smart/AnonymousObject1.kt");
    }
    
    @TestMetadata("AnonymousObject2.kt")
    public void testAnonymousObject2() throws Exception {
        doTest("idea/testData/completion/handlers/smart/AnonymousObject2.kt");
    }
    
    @TestMetadata("AnonymousObject3.kt")
    public void testAnonymousObject3() throws Exception {
        doTest("idea/testData/completion/handlers/smart/AnonymousObject3.kt");
    }
    
    @TestMetadata("AnonymousObjectInsertsImport.kt")
    public void testAnonymousObjectInsertsImport() throws Exception {
        doTest("idea/testData/completion/handlers/smart/AnonymousObjectInsertsImport.kt");
    }
    
    @TestMetadata("ClassObjectMethod1.kt")
    public void testClassObjectMethod1() throws Exception {
        doTest("idea/testData/completion/handlers/smart/ClassObjectMethod1.kt");
    }
    
    @TestMetadata("ClassObjectMethod2.kt")
    public void testClassObjectMethod2() throws Exception {
        doTest("idea/testData/completion/handlers/smart/ClassObjectMethod2.kt");
    }
    
    @TestMetadata("Constructor.kt")
    public void testConstructor() throws Exception {
        doTest("idea/testData/completion/handlers/smart/Constructor.kt");
    }
    
    @TestMetadata("ConstructorForGenericType.kt")
    public void testConstructorForGenericType() throws Exception {
        doTest("idea/testData/completion/handlers/smart/ConstructorForGenericType.kt");
    }
    
    @TestMetadata("ConstructorForJavaClass.kt")
    public void testConstructorForJavaClass() throws Exception {
        doTest("idea/testData/completion/handlers/smart/ConstructorForJavaClass.kt");
    }
    
    @TestMetadata("ConstructorForNullable.kt")
    public void testConstructorForNullable() throws Exception {
        doTest("idea/testData/completion/handlers/smart/ConstructorForNullable.kt");
    }
    
    @TestMetadata("ConstructorInsertsImport.kt")
    public void testConstructorInsertsImport() throws Exception {
        doTest("idea/testData/completion/handlers/smart/ConstructorInsertsImport.kt");
    }
    
    @TestMetadata("ConstructorInsertsImport2.kt")
    public void testConstructorInsertsImport2() throws Exception {
        doTest("idea/testData/completion/handlers/smart/ConstructorInsertsImport2.kt");
    }
    
    @TestMetadata("ConstructorWithParameters.kt")
    public void testConstructorWithParameters() throws Exception {
        doTest("idea/testData/completion/handlers/smart/ConstructorWithParameters.kt");
    }
    
    @TestMetadata("EnumMember.kt")
    public void testEnumMember() throws Exception {
        doTest("idea/testData/completion/handlers/smart/EnumMember.kt");
    }
    
    @TestMetadata("JavaEnumMemberInsertsImport.kt")
    public void testJavaEnumMemberInsertsImport() throws Exception {
        doTest("idea/testData/completion/handlers/smart/JavaEnumMemberInsertsImport.kt");
    }
    
    @TestMetadata("JavaStaticField.kt")
    public void testJavaStaticField() throws Exception {
        doTest("idea/testData/completion/handlers/smart/JavaStaticField.kt");
    }
    
    @TestMetadata("JavaStaticFieldInsertImport.kt")
    public void testJavaStaticFieldInsertImport() throws Exception {
        doTest("idea/testData/completion/handlers/smart/JavaStaticFieldInsertImport.kt");
    }
    
    @TestMetadata("JavaStaticMethod.kt")
    public void testJavaStaticMethod() throws Exception {
        doTest("idea/testData/completion/handlers/smart/JavaStaticMethod.kt");
    }
    
    @TestMetadata("JavaStaticMethodInsertsImport.kt")
    public void testJavaStaticMethodInsertsImport() throws Exception {
        doTest("idea/testData/completion/handlers/smart/JavaStaticMethodInsertsImport.kt");
    }
    
    @TestMetadata("TabReplaceExpression.kt")
    public void testTabReplaceExpression() throws Exception {
        doTest("idea/testData/completion/handlers/smart/TabReplaceExpression.kt");
    }
    
    @TestMetadata("TabReplaceExpression2.kt")
    public void testTabReplaceExpression2() throws Exception {
        doTest("idea/testData/completion/handlers/smart/TabReplaceExpression2.kt");
    }
    
    @TestMetadata("TabReplaceExpression3.kt")
    public void testTabReplaceExpression3() throws Exception {
        doTest("idea/testData/completion/handlers/smart/TabReplaceExpression3.kt");
    }
    
    @TestMetadata("TabReplaceIdentifier.kt")
    public void testTabReplaceIdentifier() throws Exception {
        doTest("idea/testData/completion/handlers/smart/TabReplaceIdentifier.kt");
    }
    
    @TestMetadata("TabReplaceOperand.kt")
    public void testTabReplaceOperand() throws Exception {
        doTest("idea/testData/completion/handlers/smart/TabReplaceOperand.kt");
    }
    
}

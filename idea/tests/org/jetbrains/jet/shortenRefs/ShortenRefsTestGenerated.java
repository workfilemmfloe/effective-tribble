/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.shortenRefs;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.shortenRefs.AbstractShortenRefsTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("idea/testData/shortenRefs")
@InnerTestClasses({ShortenRefsTestGenerated.Constructor.class, ShortenRefsTestGenerated.Imports.class, ShortenRefsTestGenerated.Java.class, ShortenRefsTestGenerated.Type.class})
public class ShortenRefsTestGenerated extends AbstractShortenRefsTest {
    public void testAllFilesPresentInShortenRefs() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/shortenRefs"), Pattern.compile("^([^\\.]+)\\.kt$"), true);
    }
    
    @TestMetadata("classObject.kt")
    public void testClassObject() throws Exception {
        doTest("idea/testData/shortenRefs/classObject.kt");
    }
    
    @TestMetadata("JavaStaticMethod.kt")
    public void testJavaStaticMethod() throws Exception {
        doTest("idea/testData/shortenRefs/JavaStaticMethod.kt");
    }
    
    @TestMetadata("noShortening.kt")
    public void testNoShortening() throws Exception {
        doTest("idea/testData/shortenRefs/noShortening.kt");
    }
    
    @TestMetadata("idea/testData/shortenRefs/constructor")
    public static class Constructor extends AbstractShortenRefsTest {
        public void testAllFilesPresentInConstructor() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/shortenRefs/constructor"), Pattern.compile("^([^\\.]+)\\.kt$"), true);
        }
        
        @TestMetadata("Ambiguous.kt")
        public void testAmbiguous() throws Exception {
            doTest("idea/testData/shortenRefs/constructor/Ambiguous.kt");
        }
        
        @TestMetadata("GenericType.kt")
        public void testGenericType() throws Exception {
            doTest("idea/testData/shortenRefs/constructor/GenericType.kt");
        }
        
        @TestMetadata("LeaveQualified.kt")
        public void testLeaveQualified() throws Exception {
            doTest("idea/testData/shortenRefs/constructor/LeaveQualified.kt");
        }
        
        @TestMetadata("LeaveQualified1.kt")
        public void testLeaveQualified1() throws Exception {
            doTest("idea/testData/shortenRefs/constructor/LeaveQualified1.kt");
        }
        
        @TestMetadata("LeaveQualified2.kt")
        public void testLeaveQualified2() throws Exception {
            doTest("idea/testData/shortenRefs/constructor/LeaveQualified2.kt");
        }
        
        @TestMetadata("LeaveQualified3.kt")
        public void testLeaveQualified3() throws Exception {
            doTest("idea/testData/shortenRefs/constructor/LeaveQualified3.kt");
        }
        
        @TestMetadata("LeaveQualified5.kt")
        public void testLeaveQualified5() throws Exception {
            doTest("idea/testData/shortenRefs/constructor/LeaveQualified5.kt");
        }
        
        @TestMetadata("NestedClass.kt")
        public void testNestedClass() throws Exception {
            doTest("idea/testData/shortenRefs/constructor/NestedClass.kt");
        }
        
        @TestMetadata("NestedClassWithImport.kt")
        public void testNestedClassWithImport() throws Exception {
            doTest("idea/testData/shortenRefs/constructor/NestedClassWithImport.kt");
        }
        
        @TestMetadata("NoImportNeeded.kt")
        public void testNoImportNeeded() throws Exception {
            doTest("idea/testData/shortenRefs/constructor/NoImportNeeded.kt");
        }
        
        @TestMetadata("NoImportNeeded2.kt")
        public void testNoImportNeeded2() throws Exception {
            doTest("idea/testData/shortenRefs/constructor/NoImportNeeded2.kt");
        }
        
        @TestMetadata("NoImportNeeded3.kt")
        public void testNoImportNeeded3() throws Exception {
            doTest("idea/testData/shortenRefs/constructor/NoImportNeeded3.kt");
        }
        
        @TestMetadata("WorksForClassNameRange.kt")
        public void testWorksForClassNameRange() throws Exception {
            doTest("idea/testData/shortenRefs/constructor/WorksForClassNameRange.kt");
        }
        
        @TestMetadata("WorksForClassNameRange2.kt")
        public void testWorksForClassNameRange2() throws Exception {
            doTest("idea/testData/shortenRefs/constructor/WorksForClassNameRange2.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/shortenRefs/imports")
    public static class Imports extends AbstractShortenRefsTest {
        public void testAllFilesPresentInImports() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/shortenRefs/imports"), Pattern.compile("^([^\\.]+)\\.kt$"), true);
        }
        
        @TestMetadata("leaveQualifiedConstructor.kt")
        public void testLeaveQualifiedConstructor() throws Exception {
            doTest("idea/testData/shortenRefs/imports/leaveQualifiedConstructor.kt");
        }
        
        @TestMetadata("leaveQualifiedType.kt")
        public void testLeaveQualifiedType() throws Exception {
            doTest("idea/testData/shortenRefs/imports/leaveQualifiedType.kt");
        }
        
        @TestMetadata("optimizeMultipleImports.kt")
        public void testOptimizeMultipleImports() throws Exception {
            doTest("idea/testData/shortenRefs/imports/optimizeMultipleImports.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/shortenRefs/java")
    public static class Java extends AbstractShortenRefsTest {
        public void testAllFilesPresentInJava() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/shortenRefs/java"), Pattern.compile("^([^\\.]+)\\.kt$"), true);
        }
        
        @TestMetadata("innerClassNoImports.kt")
        public void testInnerClassNoImports() throws Exception {
            doTest("idea/testData/shortenRefs/java/innerClassNoImports.kt");
        }
        
        @TestMetadata("innerClassOnDemandImport.kt")
        public void testInnerClassOnDemandImport() throws Exception {
            doTest("idea/testData/shortenRefs/java/innerClassOnDemandImport.kt");
        }
        
        @TestMetadata("staticClassNoImports.kt")
        public void testStaticClassNoImports() throws Exception {
            doTest("idea/testData/shortenRefs/java/staticClassNoImports.kt");
        }
        
        @TestMetadata("staticClassOnDemandImport.kt")
        public void testStaticClassOnDemandImport() throws Exception {
            doTest("idea/testData/shortenRefs/java/staticClassOnDemandImport.kt");
        }
        
        @TestMetadata("staticFieldNoImports.kt")
        public void testStaticFieldNoImports() throws Exception {
            doTest("idea/testData/shortenRefs/java/staticFieldNoImports.kt");
        }
        
        @TestMetadata("staticFieldOnDemandImport.kt")
        public void testStaticFieldOnDemandImport() throws Exception {
            doTest("idea/testData/shortenRefs/java/staticFieldOnDemandImport.kt");
        }
        
        @TestMetadata("staticMethodNoImports.kt")
        public void testStaticMethodNoImports() throws Exception {
            doTest("idea/testData/shortenRefs/java/staticMethodNoImports.kt");
        }
        
        @TestMetadata("staticMethodOnDemandImport.kt")
        public void testStaticMethodOnDemandImport() throws Exception {
            doTest("idea/testData/shortenRefs/java/staticMethodOnDemandImport.kt");
        }
        
    }
    
    @TestMetadata("idea/testData/shortenRefs/type")
    public static class Type extends AbstractShortenRefsTest {
        public void testAllFilesPresentInType() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("idea/testData/shortenRefs/type"), Pattern.compile("^([^\\.]+)\\.kt$"), true);
        }
        
        @TestMetadata("ClassNameInsideArguments.kt")
        public void testClassNameInsideArguments() throws Exception {
            doTest("idea/testData/shortenRefs/type/ClassNameInsideArguments.kt");
        }
        
        @TestMetadata("ClassNameInsideLambda.kt")
        public void testClassNameInsideLambda() throws Exception {
            doTest("idea/testData/shortenRefs/type/ClassNameInsideLambda.kt");
        }
        
        @TestMetadata("ClassSameNameAsPackage.kt")
        public void testClassSameNameAsPackage() throws Exception {
            doTest("idea/testData/shortenRefs/type/ClassSameNameAsPackage.kt");
        }
        
        @TestMetadata("delegationSpecifier.kt")
        public void testDelegationSpecifier() throws Exception {
            doTest("idea/testData/shortenRefs/type/delegationSpecifier.kt");
        }
        
        @TestMetadata("FunctionType.kt")
        public void testFunctionType() throws Exception {
            doTest("idea/testData/shortenRefs/type/FunctionType.kt");
        }
        
        @TestMetadata("GenericType.kt")
        public void testGenericType() throws Exception {
            doTest("idea/testData/shortenRefs/type/GenericType.kt");
        }
        
        @TestMetadata("GenericType2.kt")
        public void testGenericType2() throws Exception {
            doTest("idea/testData/shortenRefs/type/GenericType2.kt");
        }
        
        @TestMetadata("GenericType3.kt")
        public void testGenericType3() throws Exception {
            doTest("idea/testData/shortenRefs/type/GenericType3.kt");
        }
        
        @TestMetadata("LeaveQualified.kt")
        public void testLeaveQualified() throws Exception {
            doTest("idea/testData/shortenRefs/type/LeaveQualified.kt");
        }
        
        @TestMetadata("NestedClass.kt")
        public void testNestedClass() throws Exception {
            doTest("idea/testData/shortenRefs/type/NestedClass.kt");
        }
        
        @TestMetadata("NestedClassRefInImport.kt")
        public void testNestedClassRefInImport() throws Exception {
            doTest("idea/testData/shortenRefs/type/NestedClassRefInImport.kt");
        }
        
        @TestMetadata("NoImportNeeded.kt")
        public void testNoImportNeeded() throws Exception {
            doTest("idea/testData/shortenRefs/type/NoImportNeeded.kt");
        }
        
        @TestMetadata("NoImportNeeded2.kt")
        public void testNoImportNeeded2() throws Exception {
            doTest("idea/testData/shortenRefs/type/NoImportNeeded2.kt");
        }
        
        @TestMetadata("NullableType.kt")
        public void testNullableType() throws Exception {
            doTest("idea/testData/shortenRefs/type/NullableType.kt");
        }
        
        @TestMetadata("SameClassTwice.kt")
        public void testSameClassTwice() throws Exception {
            doTest("idea/testData/shortenRefs/type/SameClassTwice.kt");
        }
        
        @TestMetadata("SimpleAddImport.kt")
        public void testSimpleAddImport() throws Exception {
            doTest("idea/testData/shortenRefs/type/SimpleAddImport.kt");
        }
        
        @TestMetadata("TwoClassesSameNames.kt")
        public void testTwoClassesSameNames() throws Exception {
            doTest("idea/testData/shortenRefs/type/TwoClassesSameNames.kt");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("ShortenRefsTestGenerated");
        suite.addTestSuite(ShortenRefsTestGenerated.class);
        suite.addTestSuite(Constructor.class);
        suite.addTestSuite(Imports.class);
        suite.addTestSuite(Java.class);
        suite.addTestSuite(Type.class);
        return suite;
    }
}

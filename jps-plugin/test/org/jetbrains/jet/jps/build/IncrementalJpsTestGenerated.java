/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.jps.build;

import com.intellij.testFramework.TestDataPath;
import junit.framework.Test;
import junit.framework.TestSuite;
import org.junit.runner.RunWith;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;
import org.jetbrains.jet.JUnit3RunnerWithInners;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("jps-plugin/testData/incremental")
@TestDataPath("$PROJECT_ROOT")
@InnerTestClasses({IncrementalJpsTestGenerated.CircularDependency.class, IncrementalJpsTestGenerated.PureKotlin.class})
@RunWith(org.jetbrains.jet.JUnit3RunnerWithInners.class)
public class IncrementalJpsTestGenerated extends AbstractIncrementalJpsTest {
    public void testAllFilesPresentInIncremental() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("jps-plugin/testData/incremental"), Pattern.compile("^([^\\.]+)$"), true);
    }
    
    @TestMetadata("jps-plugin/testData/incremental/circularDependency")
    @TestDataPath("$PROJECT_ROOT")
    @InnerTestClasses({})
    @RunWith(org.jetbrains.jet.JUnit3RunnerWithInners.class)
    public static class CircularDependency extends AbstractIncrementalJpsTest {
        public void testAllFilesPresentInCircularDependency() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("jps-plugin/testData/incremental/circularDependency"), Pattern.compile("^([^\\.]+)$"), true);
        }
        
        @TestMetadata("simple")
        public void testSimple() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/circularDependency/simple/");
            doTest(fileName);
        }
        
    }
    
    @TestMetadata("jps-plugin/testData/incremental/pureKotlin")
    @TestDataPath("$PROJECT_ROOT")
    @InnerTestClasses({})
    @RunWith(org.jetbrains.jet.JUnit3RunnerWithInners.class)
    public static class PureKotlin extends AbstractIncrementalJpsTest {
        @TestMetadata("accessingFunctionsViaPackagePart")
        public void testAccessingFunctionsViaPackagePart() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/accessingFunctionsViaPackagePart/");
            doTest(fileName);
        }
        
        @TestMetadata("accessingPropertiesViaField")
        public void testAccessingPropertiesViaField() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/accessingPropertiesViaField/");
            doTest(fileName);
        }
        
        @TestMetadata("allConstants")
        public void testAllConstants() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/allConstants/");
            doTest(fileName);
        }
        
        public void testAllFilesPresentInPureKotlin() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("jps-plugin/testData/incremental/pureKotlin"), Pattern.compile("^([^\\.]+)$"), true);
        }
        
        @TestMetadata("annotations")
        public void testAnnotations() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/annotations/");
            doTest(fileName);
        }
        
        @TestMetadata("classInlineFunctionChanged")
        public void testClassInlineFunctionChanged() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/classInlineFunctionChanged/");
            doTest(fileName);
        }
        
        @TestMetadata("classObjectConstantChanged")
        public void testClassObjectConstantChanged() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/classObjectConstantChanged/");
            doTest(fileName);
        }
        
        @TestMetadata("classRecreated")
        public void testClassRecreated() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/classRecreated/");
            doTest(fileName);
        }
        
        @TestMetadata("classSignatureChanged")
        public void testClassSignatureChanged() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/classSignatureChanged/");
            doTest(fileName);
        }
        
        @TestMetadata("classSignatureUnchanged")
        public void testClassSignatureUnchanged() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/classSignatureUnchanged/");
            doTest(fileName);
        }
        
        @TestMetadata("compilationErrorThenFixed")
        public void testCompilationErrorThenFixed() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/compilationErrorThenFixed/");
            doTest(fileName);
        }
        
        @TestMetadata("constantsUnchanged")
        public void testConstantsUnchanged() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/constantsUnchanged/");
            doTest(fileName);
        }
        
        @TestMetadata("defaultArguments")
        public void testDefaultArguments() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/defaultArguments/");
            doTest(fileName);
        }
        
        @TestMetadata("dependencyClassReferenced")
        public void testDependencyClassReferenced() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/dependencyClassReferenced/");
            doTest(fileName);
        }
        
        @TestMetadata("filesExchangePackages")
        public void testFilesExchangePackages() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/filesExchangePackages/");
            doTest(fileName);
        }
        
        @TestMetadata("independentClasses")
        public void testIndependentClasses() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/independentClasses/");
            doTest(fileName);
        }
        
        @TestMetadata("inlineFunctionsCircularDependency")
        public void testInlineFunctionsCircularDependency() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/inlineFunctionsCircularDependency/");
            doTest(fileName);
        }
        
        @TestMetadata("inlineFunctionsUnchanged")
        public void testInlineFunctionsUnchanged() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/inlineFunctionsUnchanged/");
            doTest(fileName);
        }
        
        @TestMetadata("multiplePackagesModified")
        public void testMultiplePackagesModified() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/multiplePackagesModified/");
            doTest(fileName);
        }
        
        @TestMetadata("objectValChanged")
        public void testObjectValChanged() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/objectValChanged/");
            doTest(fileName);
        }
        
        @TestMetadata("ourClassReferenced")
        public void testOurClassReferenced() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/ourClassReferenced/");
            doTest(fileName);
        }
        
        @TestMetadata("packageConstantChanged")
        public void testPackageConstantChanged() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/packageConstantChanged/");
            doTest(fileName);
        }
        
        @TestMetadata("packageFileAdded")
        public void testPackageFileAdded() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/packageFileAdded/");
            doTest(fileName);
        }
        
        @TestMetadata("packageFileChangedPackage")
        public void testPackageFileChangedPackage() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/packageFileChangedPackage/");
            doTest(fileName);
        }
        
        @TestMetadata("packageFileChangedThenOtherRemoved")
        public void testPackageFileChangedThenOtherRemoved() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/packageFileChangedThenOtherRemoved/");
            doTest(fileName);
        }
        
        @TestMetadata("packageFileRemoved")
        public void testPackageFileRemoved() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/packageFileRemoved/");
            doTest(fileName);
        }
        
        @TestMetadata("packageFilesChangedInTurn")
        public void testPackageFilesChangedInTurn() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/packageFilesChangedInTurn/");
            doTest(fileName);
        }
        
        @TestMetadata("packageInlineFunctionAccessingField")
        public void testPackageInlineFunctionAccessingField() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/packageInlineFunctionAccessingField/");
            doTest(fileName);
        }
        
        @TestMetadata("packageInlineFunctionChanged")
        public void testPackageInlineFunctionChanged() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/packageInlineFunctionChanged/");
            doTest(fileName);
        }
        
        @TestMetadata("packageInlineFunctionFromOurPackage")
        public void testPackageInlineFunctionFromOurPackage() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/packageInlineFunctionFromOurPackage/");
            doTest(fileName);
        }
        
        @TestMetadata("packageRecreated")
        public void testPackageRecreated() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/packageRecreated/");
            doTest(fileName);
        }
        
        @TestMetadata("packageRecreatedAfterRenaming")
        public void testPackageRecreatedAfterRenaming() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/packageRecreatedAfterRenaming/");
            doTest(fileName);
        }
        
        @TestMetadata("packageRemoved")
        public void testPackageRemoved() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/packageRemoved/");
            doTest(fileName);
        }
        
        @TestMetadata("returnTypeChanged")
        public void testReturnTypeChanged() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/returnTypeChanged/");
            doTest(fileName);
        }
        
        @TestMetadata("simpleClassDependency")
        public void testSimpleClassDependency() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/simpleClassDependency/");
            doTest(fileName);
        }
        
        @TestMetadata("soleFileChangesPackage")
        public void testSoleFileChangesPackage() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/soleFileChangesPackage/");
            doTest(fileName);
        }
        
        @TestMetadata("subpackage")
        public void testSubpackage() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/subpackage/");
            doTest(fileName);
        }
        
        @TestMetadata("topLevelFunctionSameSignature")
        public void testTopLevelFunctionSameSignature() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/topLevelFunctionSameSignature/");
            doTest(fileName);
        }
        
        @TestMetadata("topLevelMembersInTwoFiles")
        public void testTopLevelMembersInTwoFiles() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/topLevelMembersInTwoFiles/");
            doTest(fileName);
        }
        
        @TestMetadata("traitClassObjectConstantChanged")
        public void testTraitClassObjectConstantChanged() throws Exception {
            String fileName = JetTestUtils.navigationMetadata("jps-plugin/testData/incremental/pureKotlin/traitClassObjectConstantChanged/");
            doTest(fileName);
        }
        
    }
    
}

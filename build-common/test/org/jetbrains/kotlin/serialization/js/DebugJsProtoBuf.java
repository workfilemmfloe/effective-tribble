// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: js/js.serializer/src/js.debug.proto

package org.jetbrains.kotlin.serialization.js;

public final class DebugJsProtoBuf {
  private DebugJsProtoBuf() {}
  public static void registerAllExtensions(
      org.jetbrains.kotlin.protobuf.ExtensionRegistry registry) {
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.packageFqName);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.classAnnotation);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.classContainingFileId);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.constructorAnnotation);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.functionAnnotation);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.functionContainingFileId);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.propertyAnnotation);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.compileTimeValue);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.propertyContainingFileId);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.enumEntryAnnotation);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.parameterAnnotation);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.typeAnnotation);
    registry.add(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.typeParameterAnnotation);
  }
  public interface HeaderOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.Header)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 flags = 1;</code>
     *
     * <pre>
     *preRelease
     * </pre>
     */
    boolean hasFlags();
    /**
     * <code>optional int32 flags = 1;</code>
     *
     * <pre>
     *preRelease
     * </pre>
     */
    int getFlags();

    /**
     * <code>optional int32 js_code_binary_version = 2;</code>
     *
     * <pre>
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     */
    boolean hasJsCodeBinaryVersion();
    /**
     * <code>optional int32 js_code_binary_version = 2;</code>
     *
     * <pre>
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     */
    int getJsCodeBinaryVersion();

    /**
     * <code>optional string package_fq_name = 3;</code>
     */
    boolean hasPackageFqName();
    /**
     * <code>optional string package_fq_name = 3;</code>
     */
    java.lang.String getPackageFqName();
    /**
     * <code>optional string package_fq_name = 3;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getPackageFqNameBytes();
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.Header}
   */
  public static final class Header extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.Header)
      HeaderOrBuilder {
    // Use Header.newBuilder() to construct.
    private Header(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Header(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Header defaultInstance;
    public static Header getDefaultInstance() {
      return defaultInstance;
    }

    public Header getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Header(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              flags_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              jsCodeBinaryVersion_ = input.readInt32();
              break;
            }
            case 26: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              packageFqName_ = bs;
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Header_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Header_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header.class, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Header> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Header>() {
      public Header parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Header(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Header> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 1;
    private int flags_;
    /**
     * <code>optional int32 flags = 1;</code>
     *
     * <pre>
     *preRelease
     * </pre>
     */
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 flags = 1;</code>
     *
     * <pre>
     *preRelease
     * </pre>
     */
    public int getFlags() {
      return flags_;
    }

    public static final int JS_CODE_BINARY_VERSION_FIELD_NUMBER = 2;
    private int jsCodeBinaryVersion_;
    /**
     * <code>optional int32 js_code_binary_version = 2;</code>
     *
     * <pre>
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     */
    public boolean hasJsCodeBinaryVersion() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 js_code_binary_version = 2;</code>
     *
     * <pre>
     * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
     * </pre>
     */
    public int getJsCodeBinaryVersion() {
      return jsCodeBinaryVersion_;
    }

    public static final int PACKAGE_FQ_NAME_FIELD_NUMBER = 3;
    private java.lang.Object packageFqName_;
    /**
     * <code>optional string package_fq_name = 3;</code>
     */
    public boolean hasPackageFqName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string package_fq_name = 3;</code>
     */
    public java.lang.String getPackageFqName() {
      java.lang.Object ref = packageFqName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        org.jetbrains.kotlin.protobuf.ByteString bs = 
            (org.jetbrains.kotlin.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          packageFqName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string package_fq_name = 3;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getPackageFqNameBytes() {
      java.lang.Object ref = packageFqName_;
      if (ref instanceof java.lang.String) {
        org.jetbrains.kotlin.protobuf.ByteString b = 
            org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        packageFqName_ = b;
        return b;
      } else {
        return (org.jetbrains.kotlin.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      flags_ = 0;
      jsCodeBinaryVersion_ = 0;
      packageFqName_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, flags_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, jsCodeBinaryVersion_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getPackageFqNameBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, flags_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(2, jsCodeBinaryVersion_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeBytesSize(3, getPackageFqNameBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.Header}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.Header)
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.HeaderOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Header_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Header_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header.class, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        flags_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        jsCodeBinaryVersion_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        packageFqName_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Header_descriptor;
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header.getDefaultInstance();
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header build() {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header buildPartial() {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header result = new org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.flags_ = flags_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.jsCodeBinaryVersion_ = jsCodeBinaryVersion_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.packageFqName_ = packageFqName_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header other) {
        if (other == org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header.getDefaultInstance()) return this;
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasJsCodeBinaryVersion()) {
          setJsCodeBinaryVersion(other.getJsCodeBinaryVersion());
        }
        if (other.hasPackageFqName()) {
          bitField0_ |= 0x00000004;
          packageFqName_ = other.packageFqName_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Header) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int flags_ ;
      /**
       * <code>optional int32 flags = 1;</code>
       *
       * <pre>
       *preRelease
       * </pre>
       */
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 flags = 1;</code>
       *
       * <pre>
       *preRelease
       * </pre>
       */
      public int getFlags() {
        return flags_;
      }
      /**
       * <code>optional int32 flags = 1;</code>
       *
       * <pre>
       *preRelease
       * </pre>
       */
      public Builder setFlags(int value) {
        bitField0_ |= 0x00000001;
        flags_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 flags = 1;</code>
       *
       * <pre>
       *preRelease
       * </pre>
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000001);
        flags_ = 0;
        onChanged();
        return this;
      }

      private int jsCodeBinaryVersion_ ;
      /**
       * <code>optional int32 js_code_binary_version = 2;</code>
       *
       * <pre>
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       */
      public boolean hasJsCodeBinaryVersion() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 js_code_binary_version = 2;</code>
       *
       * <pre>
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       */
      public int getJsCodeBinaryVersion() {
        return jsCodeBinaryVersion_;
      }
      /**
       * <code>optional int32 js_code_binary_version = 2;</code>
       *
       * <pre>
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       */
      public Builder setJsCodeBinaryVersion(int value) {
        bitField0_ |= 0x00000002;
        jsCodeBinaryVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 js_code_binary_version = 2;</code>
       *
       * <pre>
       * (patch &lt;&lt; 16) + (minor &lt;&lt; 8) + major
       * </pre>
       */
      public Builder clearJsCodeBinaryVersion() {
        bitField0_ = (bitField0_ & ~0x00000002);
        jsCodeBinaryVersion_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object packageFqName_ = "";
      /**
       * <code>optional string package_fq_name = 3;</code>
       */
      public boolean hasPackageFqName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string package_fq_name = 3;</code>
       */
      public java.lang.String getPackageFqName() {
        java.lang.Object ref = packageFqName_;
        if (!(ref instanceof java.lang.String)) {
          org.jetbrains.kotlin.protobuf.ByteString bs =
              (org.jetbrains.kotlin.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            packageFqName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string package_fq_name = 3;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getPackageFqNameBytes() {
        java.lang.Object ref = packageFqName_;
        if (ref instanceof String) {
          org.jetbrains.kotlin.protobuf.ByteString b = 
              org.jetbrains.kotlin.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          packageFqName_ = b;
          return b;
        } else {
          return (org.jetbrains.kotlin.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string package_fq_name = 3;</code>
       */
      public Builder setPackageFqName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        packageFqName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string package_fq_name = 3;</code>
       */
      public Builder clearPackageFqName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        packageFqName_ = getDefaultInstance().getPackageFqName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string package_fq_name = 3;</code>
       */
      public Builder setPackageFqNameBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        packageFqName_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.Header)
    }

    static {
      defaultInstance = new Header(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.Header)
  }

  public interface FileOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.File)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 id = 1;</code>
     *
     * <pre>
     * If absent, id is the index of the file in the Files.file list
     * </pre>
     */
    boolean hasId();
    /**
     * <code>optional int32 id = 1;</code>
     *
     * <pre>
     * If absent, id is the index of the file in the Files.file list
     * </pre>
     */
    int getId();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation> 
        getAnnotationList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
     */
    org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation getAnnotation(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
     */
    int getAnnotationCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.DebugProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
     */
    org.jetbrains.kotlin.serialization.DebugProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.File}
   */
  public static final class File extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.File)
      FileOrBuilder {
    // Use File.newBuilder() to construct.
    private File(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private File(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final File defaultInstance;
    public static File getDefaultInstance() {
      return defaultInstance;
    }

    public File getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private File(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                annotation_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation>();
                mutable_bitField0_ |= 0x00000002;
              }
              annotation_.add(input.readMessage(org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          annotation_ = java.util.Collections.unmodifiableList(annotation_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_File_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_File_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.class, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<File> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<File>() {
      public File parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new File(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<File> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>optional int32 id = 1;</code>
     *
     * <pre>
     * If absent, id is the index of the file in the Files.file list
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 id = 1;</code>
     *
     * <pre>
     * If absent, id is the index of the file in the Files.file list
     * </pre>
     */
    public int getId() {
      return id_;
    }

    public static final int ANNOTATION_FIELD_NUMBER = 2;
    private java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation> annotation_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
     */
    public java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation> getAnnotationList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.DebugProtoBuf.AnnotationOrBuilder> 
        getAnnotationOrBuilderList() {
      return annotation_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
     */
    public int getAnnotationCount() {
      return annotation_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
     */
    public org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation getAnnotation(int index) {
      return annotation_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
     */
    public org.jetbrains.kotlin.serialization.DebugProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
        int index) {
      return annotation_.get(index);
    }

    private void initFields() {
      id_ = 0;
      annotation_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getAnnotationCount(); i++) {
        if (!getAnnotation(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, id_);
      }
      for (int i = 0; i < annotation_.size(); i++) {
        output.writeMessage(2, annotation_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      for (int i = 0; i < annotation_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, annotation_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.File}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.File)
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.FileOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_File_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_File_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.class, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getAnnotationFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          annotationBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_File_descriptor;
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.getDefaultInstance();
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File build() {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File buildPartial() {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File result = new org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (annotationBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            annotation_ = java.util.Collections.unmodifiableList(annotation_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.annotation_ = annotation_;
        } else {
          result.annotation_ = annotationBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File other) {
        if (other == org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (annotationBuilder_ == null) {
          if (!other.annotation_.isEmpty()) {
            if (annotation_.isEmpty()) {
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureAnnotationIsMutable();
              annotation_.addAll(other.annotation_);
            }
            onChanged();
          }
        } else {
          if (!other.annotation_.isEmpty()) {
            if (annotationBuilder_.isEmpty()) {
              annotationBuilder_.dispose();
              annotationBuilder_ = null;
              annotation_ = other.annotation_;
              bitField0_ = (bitField0_ & ~0x00000002);
              annotationBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAnnotationFieldBuilder() : null;
            } else {
              annotationBuilder_.addAllMessages(other.annotation_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getAnnotationCount(); i++) {
          if (!getAnnotation(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int id_ ;
      /**
       * <code>optional int32 id = 1;</code>
       *
       * <pre>
       * If absent, id is the index of the file in the Files.file list
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 id = 1;</code>
       *
       * <pre>
       * If absent, id is the index of the file in the Files.file list
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>optional int32 id = 1;</code>
       *
       * <pre>
       * If absent, id is the index of the file in the Files.file list
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 id = 1;</code>
       *
       * <pre>
       * If absent, id is the index of the file in the Files.file list
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation> annotation_ =
        java.util.Collections.emptyList();
      private void ensureAnnotationIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          annotation_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation>(annotation_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation, org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.Builder, org.jetbrains.kotlin.serialization.DebugProtoBuf.AnnotationOrBuilder> annotationBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation> getAnnotationList() {
        if (annotationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(annotation_);
        } else {
          return annotationBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
       */
      public int getAnnotationCount() {
        if (annotationBuilder_ == null) {
          return annotation_.size();
        } else {
          return annotationBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation getAnnotation(int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);
        } else {
          return annotationBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.set(index, value);
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
       */
      public Builder setAnnotation(
          int index, org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.set(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
       */
      public Builder addAnnotation(org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation value) {
        if (annotationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAnnotationIsMutable();
          annotation_.add(index, value);
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
       */
      public Builder addAnnotation(
          org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
       */
      public Builder addAnnotation(
          int index, org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.Builder builderForValue) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.add(index, builderForValue.build());
          onChanged();
        } else {
          annotationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
       */
      public Builder addAllAnnotation(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation> values) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, annotation_);
          onChanged();
        } else {
          annotationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
       */
      public Builder clearAnnotation() {
        if (annotationBuilder_ == null) {
          annotation_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          annotationBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
       */
      public Builder removeAnnotation(int index) {
        if (annotationBuilder_ == null) {
          ensureAnnotationIsMutable();
          annotation_.remove(index);
          onChanged();
        } else {
          annotationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.Builder getAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.DebugProtoBuf.AnnotationOrBuilder getAnnotationOrBuilder(
          int index) {
        if (annotationBuilder_ == null) {
          return annotation_.get(index);  } else {
          return annotationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.DebugProtoBuf.AnnotationOrBuilder> 
           getAnnotationOrBuilderList() {
        if (annotationBuilder_ != null) {
          return annotationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(annotation_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.Builder addAnnotationBuilder() {
        return getAnnotationFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.Builder addAnnotationBuilder(
          int index) {
        return getAnnotationFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Annotation annotation = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.Builder> 
           getAnnotationBuilderList() {
        return getAnnotationFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation, org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.Builder, org.jetbrains.kotlin.serialization.DebugProtoBuf.AnnotationOrBuilder> 
          getAnnotationFieldBuilder() {
        if (annotationBuilder_ == null) {
          annotationBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation, org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.Builder, org.jetbrains.kotlin.serialization.DebugProtoBuf.AnnotationOrBuilder>(
                  annotation_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          annotation_ = null;
        }
        return annotationBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.File)
    }

    static {
      defaultInstance = new File(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.File)
  }

  public interface FilesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.Files)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File> 
        getFileList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File getFile(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
     */
    int getFileCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.FileOrBuilder> 
        getFileOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
     */
    org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.FileOrBuilder getFileOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.Files}
   */
  public static final class Files extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.Files)
      FilesOrBuilder {
    // Use Files.newBuilder() to construct.
    private Files(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Files(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Files defaultInstance;
    public static Files getDefaultInstance() {
      return defaultInstance;
    }

    public Files getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Files(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                file_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File>();
                mutable_bitField0_ |= 0x00000001;
              }
              file_.add(input.readMessage(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          file_ = java.util.Collections.unmodifiableList(file_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Files_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Files_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.class, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Files> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Files>() {
      public Files parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Files(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Files> getParserForType() {
      return PARSER;
    }

    public static final int FILE_FIELD_NUMBER = 1;
    private java.util.List<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File> file_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
     */
    public java.util.List<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File> getFileList() {
      return file_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.FileOrBuilder> 
        getFileOrBuilderList() {
      return file_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
     */
    public int getFileCount() {
      return file_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
     */
    public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File getFile(int index) {
      return file_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
     */
    public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.FileOrBuilder getFileOrBuilder(
        int index) {
      return file_.get(index);
    }

    private void initFields() {
      file_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getFileCount(); i++) {
        if (!getFile(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < file_.size(); i++) {
        output.writeMessage(1, file_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < file_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(1, file_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.Files}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.Files)
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.FilesOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Files_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Files_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.class, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFileFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (fileBuilder_ == null) {
          file_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          fileBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Files_descriptor;
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.getDefaultInstance();
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files build() {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files buildPartial() {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files result = new org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files(this);
        int from_bitField0_ = bitField0_;
        if (fileBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            file_ = java.util.Collections.unmodifiableList(file_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.file_ = file_;
        } else {
          result.file_ = fileBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files other) {
        if (other == org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.getDefaultInstance()) return this;
        if (fileBuilder_ == null) {
          if (!other.file_.isEmpty()) {
            if (file_.isEmpty()) {
              file_ = other.file_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFileIsMutable();
              file_.addAll(other.file_);
            }
            onChanged();
          }
        } else {
          if (!other.file_.isEmpty()) {
            if (fileBuilder_.isEmpty()) {
              fileBuilder_.dispose();
              fileBuilder_ = null;
              file_ = other.file_;
              bitField0_ = (bitField0_ & ~0x00000001);
              fileBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFileFieldBuilder() : null;
            } else {
              fileBuilder_.addAllMessages(other.file_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getFileCount(); i++) {
          if (!getFile(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File> file_ =
        java.util.Collections.emptyList();
      private void ensureFileIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          file_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File>(file_);
          bitField0_ |= 0x00000001;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.Builder, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.FileOrBuilder> fileBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File> getFileList() {
        if (fileBuilder_ == null) {
          return java.util.Collections.unmodifiableList(file_);
        } else {
          return fileBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
       */
      public int getFileCount() {
        if (fileBuilder_ == null) {
          return file_.size();
        } else {
          return fileBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File getFile(int index) {
        if (fileBuilder_ == null) {
          return file_.get(index);
        } else {
          return fileBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
       */
      public Builder setFile(
          int index, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File value) {
        if (fileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFileIsMutable();
          file_.set(index, value);
          onChanged();
        } else {
          fileBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
       */
      public Builder setFile(
          int index, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.Builder builderForValue) {
        if (fileBuilder_ == null) {
          ensureFileIsMutable();
          file_.set(index, builderForValue.build());
          onChanged();
        } else {
          fileBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
       */
      public Builder addFile(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File value) {
        if (fileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFileIsMutable();
          file_.add(value);
          onChanged();
        } else {
          fileBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
       */
      public Builder addFile(
          int index, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File value) {
        if (fileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFileIsMutable();
          file_.add(index, value);
          onChanged();
        } else {
          fileBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
       */
      public Builder addFile(
          org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.Builder builderForValue) {
        if (fileBuilder_ == null) {
          ensureFileIsMutable();
          file_.add(builderForValue.build());
          onChanged();
        } else {
          fileBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
       */
      public Builder addFile(
          int index, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.Builder builderForValue) {
        if (fileBuilder_ == null) {
          ensureFileIsMutable();
          file_.add(index, builderForValue.build());
          onChanged();
        } else {
          fileBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
       */
      public Builder addAllFile(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File> values) {
        if (fileBuilder_ == null) {
          ensureFileIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, file_);
          onChanged();
        } else {
          fileBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
       */
      public Builder clearFile() {
        if (fileBuilder_ == null) {
          file_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          fileBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
       */
      public Builder removeFile(int index) {
        if (fileBuilder_ == null) {
          ensureFileIsMutable();
          file_.remove(index);
          onChanged();
        } else {
          fileBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.Builder getFileBuilder(
          int index) {
        return getFileFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.FileOrBuilder getFileOrBuilder(
          int index) {
        if (fileBuilder_ == null) {
          return file_.get(index);  } else {
          return fileBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.FileOrBuilder> 
           getFileOrBuilderList() {
        if (fileBuilder_ != null) {
          return fileBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(file_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.Builder addFileBuilder() {
        return getFileFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.Builder addFileBuilder(
          int index) {
        return getFileFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.File file = 1;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.Builder> 
           getFileBuilderList() {
        return getFileFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.Builder, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.FileOrBuilder> 
          getFileFieldBuilder() {
        if (fileBuilder_ == null) {
          fileBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.File.Builder, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.FileOrBuilder>(
                  file_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          file_ = null;
        }
        return fileBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.Files)
    }

    static {
      defaultInstance = new Files(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.Files)
  }

  public interface ClassesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.Classes)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>repeated int32 class_name = 1 [packed = true];</code>
     *
     * <pre>
     * id in StringTable
     * </pre>
     */
    java.util.List<java.lang.Integer> getClassNameList();
    /**
     * <code>repeated int32 class_name = 1 [packed = true];</code>
     *
     * <pre>
     * id in StringTable
     * </pre>
     */
    int getClassNameCount();
    /**
     * <code>repeated int32 class_name = 1 [packed = true];</code>
     *
     * <pre>
     * id in StringTable
     * </pre>
     */
    int getClassName(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.Classes}
   */
  public static final class Classes extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.Classes)
      ClassesOrBuilder {
    // Use Classes.newBuilder() to construct.
    private Classes(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Classes(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Classes defaultInstance;
    public static Classes getDefaultInstance() {
      return defaultInstance;
    }

    public Classes getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Classes(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                className_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              className_.add(input.readInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                className_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                className_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          className_ = java.util.Collections.unmodifiableList(className_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Classes_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Classes_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes.class, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Classes> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Classes>() {
      public Classes parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Classes(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Classes> getParserForType() {
      return PARSER;
    }

    public static final int CLASS_NAME_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> className_;
    /**
     * <code>repeated int32 class_name = 1 [packed = true];</code>
     *
     * <pre>
     * id in StringTable
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getClassNameList() {
      return className_;
    }
    /**
     * <code>repeated int32 class_name = 1 [packed = true];</code>
     *
     * <pre>
     * id in StringTable
     * </pre>
     */
    public int getClassNameCount() {
      return className_.size();
    }
    /**
     * <code>repeated int32 class_name = 1 [packed = true];</code>
     *
     * <pre>
     * id in StringTable
     * </pre>
     */
    public int getClassName(int index) {
      return className_.get(index);
    }
    private int classNameMemoizedSerializedSize = -1;

    private void initFields() {
      className_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getClassNameList().size() > 0) {
        output.writeRawVarint32(10);
        output.writeRawVarint32(classNameMemoizedSerializedSize);
      }
      for (int i = 0; i < className_.size(); i++) {
        output.writeInt32NoTag(className_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < className_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(className_.get(i));
        }
        size += dataSize;
        if (!getClassNameList().isEmpty()) {
          size += 1;
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        classNameMemoizedSerializedSize = dataSize;
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.Classes}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.Classes)
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.ClassesOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Classes_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Classes_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes.class, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        className_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Classes_descriptor;
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes.getDefaultInstance();
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes build() {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes buildPartial() {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes result = new org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          className_ = java.util.Collections.unmodifiableList(className_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.className_ = className_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes other) {
        if (other == org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes.getDefaultInstance()) return this;
        if (!other.className_.isEmpty()) {
          if (className_.isEmpty()) {
            className_ = other.className_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureClassNameIsMutable();
            className_.addAll(other.className_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Classes) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<java.lang.Integer> className_ = java.util.Collections.emptyList();
      private void ensureClassNameIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          className_ = new java.util.ArrayList<java.lang.Integer>(className_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getClassNameList() {
        return java.util.Collections.unmodifiableList(className_);
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public int getClassNameCount() {
        return className_.size();
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public int getClassName(int index) {
        return className_.get(index);
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public Builder setClassName(
          int index, int value) {
        ensureClassNameIsMutable();
        className_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public Builder addClassName(int value) {
        ensureClassNameIsMutable();
        className_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public Builder addAllClassName(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureClassNameIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, className_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 class_name = 1 [packed = true];</code>
       *
       * <pre>
       * id in StringTable
       * </pre>
       */
      public Builder clearClassName() {
        className_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.Classes)
    }

    static {
      defaultInstance = new Classes(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.Classes)
  }

  public interface LibraryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.Library)
      org.jetbrains.kotlin.protobuf.MessageOrBuilder {

    /**
     * <code>optional .org.jetbrains.kotlin.serialization.js.Library.Kind kind = 1 [default = PLAIN];</code>
     */
    boolean hasKind();
    /**
     * <code>optional .org.jetbrains.kotlin.serialization.js.Library.Kind kind = 1 [default = PLAIN];</code>
     */
    org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind getKind();

    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
     */
    java.util.List<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part> 
        getPartList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part getPart(int index);
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
     */
    int getPartCount();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
     */
    java.util.List<? extends org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.PartOrBuilder> 
        getPartOrBuilderList();
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
     */
    org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.PartOrBuilder getPartOrBuilder(
        int index);

    /**
     * <code>repeated string imported_module = 3;</code>
     */
    org.jetbrains.kotlin.protobuf.ProtocolStringList
        getImportedModuleList();
    /**
     * <code>repeated string imported_module = 3;</code>
     */
    int getImportedModuleCount();
    /**
     * <code>repeated string imported_module = 3;</code>
     */
    java.lang.String getImportedModule(int index);
    /**
     * <code>repeated string imported_module = 3;</code>
     */
    org.jetbrains.kotlin.protobuf.ByteString
        getImportedModuleBytes(int index);
  }
  /**
   * Protobuf type {@code org.jetbrains.kotlin.serialization.js.Library}
   */
  public static final class Library extends
      org.jetbrains.kotlin.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.Library)
      LibraryOrBuilder {
    // Use Library.newBuilder() to construct.
    private Library(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Library(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Library defaultInstance;
    public static Library getDefaultInstance() {
      return defaultInstance;
    }

    public Library getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Library(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
          org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind value = org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                kind_ = value;
              }
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                part_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part>();
                mutable_bitField0_ |= 0x00000002;
              }
              part_.add(input.readMessage(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              org.jetbrains.kotlin.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                importedModule_ = new org.jetbrains.kotlin.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              importedModule_.add(bs);
              break;
            }
          }
        }
      } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          part_ = java.util.Collections.unmodifiableList(part_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          importedModule_ = importedModule_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_descriptor;
    }

    protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.class, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Builder.class);
    }

    public static org.jetbrains.kotlin.protobuf.Parser<Library> PARSER =
        new org.jetbrains.kotlin.protobuf.AbstractParser<Library>() {
      public Library parsePartialFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return new Library(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public org.jetbrains.kotlin.protobuf.Parser<Library> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code org.jetbrains.kotlin.serialization.js.Library.Kind}
     */
    public enum Kind
        implements org.jetbrains.kotlin.protobuf.ProtocolMessageEnum {
      /**
       * <code>PLAIN = 1;</code>
       */
      PLAIN(0, 1),
      /**
       * <code>AMD = 2;</code>
       */
      AMD(1, 2),
      /**
       * <code>COMMON_JS = 3;</code>
       */
      COMMON_JS(2, 3),
      /**
       * <code>UMD = 4;</code>
       */
      UMD(3, 4),
      ;

      /**
       * <code>PLAIN = 1;</code>
       */
      public static final int PLAIN_VALUE = 1;
      /**
       * <code>AMD = 2;</code>
       */
      public static final int AMD_VALUE = 2;
      /**
       * <code>COMMON_JS = 3;</code>
       */
      public static final int COMMON_JS_VALUE = 3;
      /**
       * <code>UMD = 4;</code>
       */
      public static final int UMD_VALUE = 4;


      public final int getNumber() { return value; }

      public static Kind valueOf(int value) {
        switch (value) {
          case 1: return PLAIN;
          case 2: return AMD;
          case 3: return COMMON_JS;
          case 4: return UMD;
          default: return null;
        }
      }

      public static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>
          internalValueMap =
            new org.jetbrains.kotlin.protobuf.Internal.EnumLiteMap<Kind>() {
              public Kind findValueByNumber(int number) {
                return Kind.valueOf(number);
              }
            };

      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.getDescriptor().getEnumTypes().get(0);
      }

      private static final Kind[] VALUES = values();

      public static Kind valueOf(
          org.jetbrains.kotlin.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Kind(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.jetbrains.kotlin.serialization.js.Library.Kind)
    }

    public interface PartOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.serialization.js.Library.Part)
        org.jetbrains.kotlin.protobuf.MessageOrBuilder {

      /**
       * <code>optional .org.jetbrains.kotlin.serialization.StringTable strings = 1;</code>
       */
      boolean hasStrings();
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.StringTable strings = 1;</code>
       */
      org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable getStrings();
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.StringTable strings = 1;</code>
       */
      org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTableOrBuilder getStringsOrBuilder();

      /**
       * <code>optional .org.jetbrains.kotlin.serialization.QualifiedNameTable qualified_names = 2;</code>
       */
      boolean hasQualifiedNames();
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.QualifiedNameTable qualified_names = 2;</code>
       */
      org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable getQualifiedNames();
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.QualifiedNameTable qualified_names = 2;</code>
       */
      org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTableOrBuilder getQualifiedNamesOrBuilder();

      /**
       * <code>optional .org.jetbrains.kotlin.serialization.Package package = 3;</code>
       */
      boolean hasPackage();
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.Package package = 3;</code>
       */
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Package getPackage();
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.Package package = 3;</code>
       */
      org.jetbrains.kotlin.serialization.DebugProtoBuf.PackageOrBuilder getPackageOrBuilder();

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
       */
      java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Class> 
          getClass_List();
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
       */
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Class getClass_(int index);
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
       */
      int getClass_Count();
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
       */
      java.util.List<? extends org.jetbrains.kotlin.serialization.DebugProtoBuf.ClassOrBuilder> 
          getClass_OrBuilderList();
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
       */
      org.jetbrains.kotlin.serialization.DebugProtoBuf.ClassOrBuilder getClass_OrBuilder(
          int index);

      /**
       * <code>optional .org.jetbrains.kotlin.serialization.js.Files files = 130;</code>
       */
      boolean hasFiles();
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.js.Files files = 130;</code>
       */
      org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files getFiles();
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.js.Files files = 130;</code>
       */
      org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.FilesOrBuilder getFilesOrBuilder();
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.Library.Part}
     *
     * <pre>
     * This is a copy of BuiltIns in builtins.proto
     * TODO: combine the two
     * </pre>
     */
    public static final class Part extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.serialization.js.Library.Part)
        PartOrBuilder {
      // Use Part.newBuilder() to construct.
      private Part(org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Part(boolean noInit) { this.unknownFields = org.jetbrains.kotlin.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Part defaultInstance;
      public static Part getDefaultInstance() {
        return defaultInstance;
      }

      public Part getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final org.jetbrains.kotlin.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final org.jetbrains.kotlin.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Part(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        org.jetbrains.kotlin.protobuf.UnknownFieldSet.Builder unknownFields =
            org.jetbrains.kotlin.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = strings_.toBuilder();
                }
                strings_ = input.readMessage(org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(strings_);
                  strings_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
              case 18: {
                org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = qualifiedNames_.toBuilder();
                }
                qualifiedNames_ = input.readMessage(org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(qualifiedNames_);
                  qualifiedNames_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 26: {
                org.jetbrains.kotlin.serialization.DebugProtoBuf.Package.Builder subBuilder = null;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                  subBuilder = package_.toBuilder();
                }
                package_ = input.readMessage(org.jetbrains.kotlin.serialization.DebugProtoBuf.Package.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(package_);
                  package_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000004;
                break;
              }
              case 34: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  class__ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.DebugProtoBuf.Class>();
                  mutable_bitField0_ |= 0x00000008;
                }
                class__.add(input.readMessage(org.jetbrains.kotlin.serialization.DebugProtoBuf.Class.PARSER, extensionRegistry));
                break;
              }
              case 1042: {
                org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.Builder subBuilder = null;
                if (((bitField0_ & 0x00000008) == 0x00000008)) {
                  subBuilder = files_.toBuilder();
                }
                files_ = input.readMessage(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(files_);
                  files_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000008;
                break;
              }
            }
          }
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            class__ = java.util.Collections.unmodifiableList(class__);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_Part_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_Part_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.class, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.Builder.class);
      }

      public static org.jetbrains.kotlin.protobuf.Parser<Part> PARSER =
          new org.jetbrains.kotlin.protobuf.AbstractParser<Part>() {
        public Part parsePartialFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
          return new Part(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public org.jetbrains.kotlin.protobuf.Parser<Part> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      public static final int STRINGS_FIELD_NUMBER = 1;
      private org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable strings_;
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.StringTable strings = 1;</code>
       */
      public boolean hasStrings() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.StringTable strings = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable getStrings() {
        return strings_;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.StringTable strings = 1;</code>
       */
      public org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTableOrBuilder getStringsOrBuilder() {
        return strings_;
      }

      public static final int QUALIFIED_NAMES_FIELD_NUMBER = 2;
      private org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable qualifiedNames_;
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.QualifiedNameTable qualified_names = 2;</code>
       */
      public boolean hasQualifiedNames() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.QualifiedNameTable qualified_names = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable getQualifiedNames() {
        return qualifiedNames_;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.QualifiedNameTable qualified_names = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTableOrBuilder getQualifiedNamesOrBuilder() {
        return qualifiedNames_;
      }

      public static final int PACKAGE_FIELD_NUMBER = 3;
      private org.jetbrains.kotlin.serialization.DebugProtoBuf.Package package_;
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.Package package = 3;</code>
       */
      public boolean hasPackage() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.Package package = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.DebugProtoBuf.Package getPackage() {
        return package_;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.Package package = 3;</code>
       */
      public org.jetbrains.kotlin.serialization.DebugProtoBuf.PackageOrBuilder getPackageOrBuilder() {
        return package_;
      }

      public static final int CLASS_FIELD_NUMBER = 4;
      private java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Class> class__;
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Class> getClass_List() {
        return class__;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.DebugProtoBuf.ClassOrBuilder> 
          getClass_OrBuilderList() {
        return class__;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
       */
      public int getClass_Count() {
        return class__.size();
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.DebugProtoBuf.Class getClass_(int index) {
        return class__.get(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
       */
      public org.jetbrains.kotlin.serialization.DebugProtoBuf.ClassOrBuilder getClass_OrBuilder(
          int index) {
        return class__.get(index);
      }

      public static final int FILES_FIELD_NUMBER = 130;
      private org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files files_;
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.js.Files files = 130;</code>
       */
      public boolean hasFiles() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.js.Files files = 130;</code>
       */
      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files getFiles() {
        return files_;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.js.Files files = 130;</code>
       */
      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.FilesOrBuilder getFilesOrBuilder() {
        return files_;
      }

      private void initFields() {
        strings_ = org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable.getDefaultInstance();
        qualifiedNames_ = org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable.getDefaultInstance();
        package_ = org.jetbrains.kotlin.serialization.DebugProtoBuf.Package.getDefaultInstance();
        class__ = java.util.Collections.emptyList();
        files_ = org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (hasQualifiedNames()) {
          if (!getQualifiedNames().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasPackage()) {
          if (!getPackage().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        for (int i = 0; i < getClass_Count(); i++) {
          if (!getClass_(i).isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasFiles()) {
          if (!getFiles().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, strings_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, qualifiedNames_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeMessage(3, package_);
        }
        for (int i = 0; i < class__.size(); i++) {
          output.writeMessage(4, class__.get(i));
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeMessage(130, files_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeMessageSize(1, strings_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeMessageSize(2, qualifiedNames_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeMessageSize(3, package_);
        }
        for (int i = 0; i < class__.size(); i++) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeMessageSize(4, class__.get(i));
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeMessageSize(130, files_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part parseFrom(
          org.jetbrains.kotlin.protobuf.ByteString data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part parseFrom(byte[] data)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part parseFrom(
          byte[] data,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part parseFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part parseDelimitedFrom(
          java.io.InputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part parseFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code org.jetbrains.kotlin.serialization.js.Library.Part}
       *
       * <pre>
       * This is a copy of BuiltIns in builtins.proto
       * TODO: combine the two
       * </pre>
       */
      public static final class Builder extends
          org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.Library.Part)
          org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.PartOrBuilder {
        public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_Part_descriptor;
        }

        protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_Part_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.class, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.Builder.class);
        }

        // Construct using org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getStringsFieldBuilder();
            getQualifiedNamesFieldBuilder();
            getPackageFieldBuilder();
            getClass_FieldBuilder();
            getFilesFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (stringsBuilder_ == null) {
            strings_ = org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable.getDefaultInstance();
          } else {
            stringsBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          if (qualifiedNamesBuilder_ == null) {
            qualifiedNames_ = org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable.getDefaultInstance();
          } else {
            qualifiedNamesBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          if (packageBuilder_ == null) {
            package_ = org.jetbrains.kotlin.serialization.DebugProtoBuf.Package.getDefaultInstance();
          } else {
            packageBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          if (class_Builder_ == null) {
            class__ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            class_Builder_.clear();
          }
          if (filesBuilder_ == null) {
            files_ = org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.getDefaultInstance();
          } else {
            filesBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_Part_descriptor;
        }

        public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part getDefaultInstanceForType() {
          return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.getDefaultInstance();
        }

        public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part build() {
          org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part buildPartial() {
          org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part result = new org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (stringsBuilder_ == null) {
            result.strings_ = strings_;
          } else {
            result.strings_ = stringsBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (qualifiedNamesBuilder_ == null) {
            result.qualifiedNames_ = qualifiedNames_;
          } else {
            result.qualifiedNames_ = qualifiedNamesBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          if (packageBuilder_ == null) {
            result.package_ = package_;
          } else {
            result.package_ = packageBuilder_.build();
          }
          if (class_Builder_ == null) {
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
              class__ = java.util.Collections.unmodifiableList(class__);
              bitField0_ = (bitField0_ & ~0x00000008);
            }
            result.class__ = class__;
          } else {
            result.class__ = class_Builder_.build();
          }
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000008;
          }
          if (filesBuilder_ == null) {
            result.files_ = files_;
          } else {
            result.files_ = filesBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
          if (other instanceof org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part) {
            return mergeFrom((org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part other) {
          if (other == org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.getDefaultInstance()) return this;
          if (other.hasStrings()) {
            mergeStrings(other.getStrings());
          }
          if (other.hasQualifiedNames()) {
            mergeQualifiedNames(other.getQualifiedNames());
          }
          if (other.hasPackage()) {
            mergePackage(other.getPackage());
          }
          if (class_Builder_ == null) {
            if (!other.class__.isEmpty()) {
              if (class__.isEmpty()) {
                class__ = other.class__;
                bitField0_ = (bitField0_ & ~0x00000008);
              } else {
                ensureClass_IsMutable();
                class__.addAll(other.class__);
              }
              onChanged();
            }
          } else {
            if (!other.class__.isEmpty()) {
              if (class_Builder_.isEmpty()) {
                class_Builder_.dispose();
                class_Builder_ = null;
                class__ = other.class__;
                bitField0_ = (bitField0_ & ~0x00000008);
                class_Builder_ = 
                  org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                     getClass_FieldBuilder() : null;
              } else {
                class_Builder_.addAllMessages(other.class__);
              }
            }
          }
          if (other.hasFiles()) {
            mergeFiles(other.getFiles());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasQualifiedNames()) {
            if (!getQualifiedNames().isInitialized()) {
              
              return false;
            }
          }
          if (hasPackage()) {
            if (!getPackage().isInitialized()) {
              
              return false;
            }
          }
          for (int i = 0; i < getClass_Count(); i++) {
            if (!getClass_(i).isInitialized()) {
              
              return false;
            }
          }
          if (hasFiles()) {
            if (!getFiles().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            org.jetbrains.kotlin.protobuf.CodedInputStream input,
            org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable strings_ = org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable.getDefaultInstance();
        private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable, org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable.Builder, org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTableOrBuilder> stringsBuilder_;
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.StringTable strings = 1;</code>
         */
        public boolean hasStrings() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.StringTable strings = 1;</code>
         */
        public org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable getStrings() {
          if (stringsBuilder_ == null) {
            return strings_;
          } else {
            return stringsBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.StringTable strings = 1;</code>
         */
        public Builder setStrings(org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable value) {
          if (stringsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            strings_ = value;
            onChanged();
          } else {
            stringsBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.StringTable strings = 1;</code>
         */
        public Builder setStrings(
            org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable.Builder builderForValue) {
          if (stringsBuilder_ == null) {
            strings_ = builderForValue.build();
            onChanged();
          } else {
            stringsBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.StringTable strings = 1;</code>
         */
        public Builder mergeStrings(org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable value) {
          if (stringsBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                strings_ != org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable.getDefaultInstance()) {
              strings_ =
                org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable.newBuilder(strings_).mergeFrom(value).buildPartial();
            } else {
              strings_ = value;
            }
            onChanged();
          } else {
            stringsBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.StringTable strings = 1;</code>
         */
        public Builder clearStrings() {
          if (stringsBuilder_ == null) {
            strings_ = org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable.getDefaultInstance();
            onChanged();
          } else {
            stringsBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.StringTable strings = 1;</code>
         */
        public org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable.Builder getStringsBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getStringsFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.StringTable strings = 1;</code>
         */
        public org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTableOrBuilder getStringsOrBuilder() {
          if (stringsBuilder_ != null) {
            return stringsBuilder_.getMessageOrBuilder();
          } else {
            return strings_;
          }
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.StringTable strings = 1;</code>
         */
        private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable, org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable.Builder, org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTableOrBuilder> 
            getStringsFieldBuilder() {
          if (stringsBuilder_ == null) {
            stringsBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
                org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable, org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTable.Builder, org.jetbrains.kotlin.serialization.DebugProtoBuf.StringTableOrBuilder>(
                    getStrings(),
                    getParentForChildren(),
                    isClean());
            strings_ = null;
          }
          return stringsBuilder_;
        }

        private org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable qualifiedNames_ = org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable.getDefaultInstance();
        private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable, org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable.Builder, org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTableOrBuilder> qualifiedNamesBuilder_;
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.QualifiedNameTable qualified_names = 2;</code>
         */
        public boolean hasQualifiedNames() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.QualifiedNameTable qualified_names = 2;</code>
         */
        public org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable getQualifiedNames() {
          if (qualifiedNamesBuilder_ == null) {
            return qualifiedNames_;
          } else {
            return qualifiedNamesBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.QualifiedNameTable qualified_names = 2;</code>
         */
        public Builder setQualifiedNames(org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable value) {
          if (qualifiedNamesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            qualifiedNames_ = value;
            onChanged();
          } else {
            qualifiedNamesBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.QualifiedNameTable qualified_names = 2;</code>
         */
        public Builder setQualifiedNames(
            org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable.Builder builderForValue) {
          if (qualifiedNamesBuilder_ == null) {
            qualifiedNames_ = builderForValue.build();
            onChanged();
          } else {
            qualifiedNamesBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.QualifiedNameTable qualified_names = 2;</code>
         */
        public Builder mergeQualifiedNames(org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable value) {
          if (qualifiedNamesBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                qualifiedNames_ != org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable.getDefaultInstance()) {
              qualifiedNames_ =
                org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable.newBuilder(qualifiedNames_).mergeFrom(value).buildPartial();
            } else {
              qualifiedNames_ = value;
            }
            onChanged();
          } else {
            qualifiedNamesBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.QualifiedNameTable qualified_names = 2;</code>
         */
        public Builder clearQualifiedNames() {
          if (qualifiedNamesBuilder_ == null) {
            qualifiedNames_ = org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable.getDefaultInstance();
            onChanged();
          } else {
            qualifiedNamesBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.QualifiedNameTable qualified_names = 2;</code>
         */
        public org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable.Builder getQualifiedNamesBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getQualifiedNamesFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.QualifiedNameTable qualified_names = 2;</code>
         */
        public org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTableOrBuilder getQualifiedNamesOrBuilder() {
          if (qualifiedNamesBuilder_ != null) {
            return qualifiedNamesBuilder_.getMessageOrBuilder();
          } else {
            return qualifiedNames_;
          }
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.QualifiedNameTable qualified_names = 2;</code>
         */
        private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable, org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable.Builder, org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTableOrBuilder> 
            getQualifiedNamesFieldBuilder() {
          if (qualifiedNamesBuilder_ == null) {
            qualifiedNamesBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
                org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable, org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTable.Builder, org.jetbrains.kotlin.serialization.DebugProtoBuf.QualifiedNameTableOrBuilder>(
                    getQualifiedNames(),
                    getParentForChildren(),
                    isClean());
            qualifiedNames_ = null;
          }
          return qualifiedNamesBuilder_;
        }

        private org.jetbrains.kotlin.serialization.DebugProtoBuf.Package package_ = org.jetbrains.kotlin.serialization.DebugProtoBuf.Package.getDefaultInstance();
        private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.serialization.DebugProtoBuf.Package, org.jetbrains.kotlin.serialization.DebugProtoBuf.Package.Builder, org.jetbrains.kotlin.serialization.DebugProtoBuf.PackageOrBuilder> packageBuilder_;
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.Package package = 3;</code>
         */
        public boolean hasPackage() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.Package package = 3;</code>
         */
        public org.jetbrains.kotlin.serialization.DebugProtoBuf.Package getPackage() {
          if (packageBuilder_ == null) {
            return package_;
          } else {
            return packageBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.Package package = 3;</code>
         */
        public Builder setPackage(org.jetbrains.kotlin.serialization.DebugProtoBuf.Package value) {
          if (packageBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            package_ = value;
            onChanged();
          } else {
            packageBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.Package package = 3;</code>
         */
        public Builder setPackage(
            org.jetbrains.kotlin.serialization.DebugProtoBuf.Package.Builder builderForValue) {
          if (packageBuilder_ == null) {
            package_ = builderForValue.build();
            onChanged();
          } else {
            packageBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.Package package = 3;</code>
         */
        public Builder mergePackage(org.jetbrains.kotlin.serialization.DebugProtoBuf.Package value) {
          if (packageBuilder_ == null) {
            if (((bitField0_ & 0x00000004) == 0x00000004) &&
                package_ != org.jetbrains.kotlin.serialization.DebugProtoBuf.Package.getDefaultInstance()) {
              package_ =
                org.jetbrains.kotlin.serialization.DebugProtoBuf.Package.newBuilder(package_).mergeFrom(value).buildPartial();
            } else {
              package_ = value;
            }
            onChanged();
          } else {
            packageBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.Package package = 3;</code>
         */
        public Builder clearPackage() {
          if (packageBuilder_ == null) {
            package_ = org.jetbrains.kotlin.serialization.DebugProtoBuf.Package.getDefaultInstance();
            onChanged();
          } else {
            packageBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.Package package = 3;</code>
         */
        public org.jetbrains.kotlin.serialization.DebugProtoBuf.Package.Builder getPackageBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getPackageFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.Package package = 3;</code>
         */
        public org.jetbrains.kotlin.serialization.DebugProtoBuf.PackageOrBuilder getPackageOrBuilder() {
          if (packageBuilder_ != null) {
            return packageBuilder_.getMessageOrBuilder();
          } else {
            return package_;
          }
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.Package package = 3;</code>
         */
        private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.serialization.DebugProtoBuf.Package, org.jetbrains.kotlin.serialization.DebugProtoBuf.Package.Builder, org.jetbrains.kotlin.serialization.DebugProtoBuf.PackageOrBuilder> 
            getPackageFieldBuilder() {
          if (packageBuilder_ == null) {
            packageBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
                org.jetbrains.kotlin.serialization.DebugProtoBuf.Package, org.jetbrains.kotlin.serialization.DebugProtoBuf.Package.Builder, org.jetbrains.kotlin.serialization.DebugProtoBuf.PackageOrBuilder>(
                    getPackage(),
                    getParentForChildren(),
                    isClean());
            package_ = null;
          }
          return packageBuilder_;
        }

        private java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Class> class__ =
          java.util.Collections.emptyList();
        private void ensureClass_IsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            class__ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.DebugProtoBuf.Class>(class__);
            bitField0_ |= 0x00000008;
           }
        }

        private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
            org.jetbrains.kotlin.serialization.DebugProtoBuf.Class, org.jetbrains.kotlin.serialization.DebugProtoBuf.Class.Builder, org.jetbrains.kotlin.serialization.DebugProtoBuf.ClassOrBuilder> class_Builder_;

        /**
         * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
         */
        public java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Class> getClass_List() {
          if (class_Builder_ == null) {
            return java.util.Collections.unmodifiableList(class__);
          } else {
            return class_Builder_.getMessageList();
          }
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
         */
        public int getClass_Count() {
          if (class_Builder_ == null) {
            return class__.size();
          } else {
            return class_Builder_.getCount();
          }
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
         */
        public org.jetbrains.kotlin.serialization.DebugProtoBuf.Class getClass_(int index) {
          if (class_Builder_ == null) {
            return class__.get(index);
          } else {
            return class_Builder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
         */
        public Builder setClass_(
            int index, org.jetbrains.kotlin.serialization.DebugProtoBuf.Class value) {
          if (class_Builder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureClass_IsMutable();
            class__.set(index, value);
            onChanged();
          } else {
            class_Builder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
         */
        public Builder setClass_(
            int index, org.jetbrains.kotlin.serialization.DebugProtoBuf.Class.Builder builderForValue) {
          if (class_Builder_ == null) {
            ensureClass_IsMutable();
            class__.set(index, builderForValue.build());
            onChanged();
          } else {
            class_Builder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
         */
        public Builder addClass_(org.jetbrains.kotlin.serialization.DebugProtoBuf.Class value) {
          if (class_Builder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureClass_IsMutable();
            class__.add(value);
            onChanged();
          } else {
            class_Builder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
         */
        public Builder addClass_(
            int index, org.jetbrains.kotlin.serialization.DebugProtoBuf.Class value) {
          if (class_Builder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureClass_IsMutable();
            class__.add(index, value);
            onChanged();
          } else {
            class_Builder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
         */
        public Builder addClass_(
            org.jetbrains.kotlin.serialization.DebugProtoBuf.Class.Builder builderForValue) {
          if (class_Builder_ == null) {
            ensureClass_IsMutable();
            class__.add(builderForValue.build());
            onChanged();
          } else {
            class_Builder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
         */
        public Builder addClass_(
            int index, org.jetbrains.kotlin.serialization.DebugProtoBuf.Class.Builder builderForValue) {
          if (class_Builder_ == null) {
            ensureClass_IsMutable();
            class__.add(index, builderForValue.build());
            onChanged();
          } else {
            class_Builder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
         */
        public Builder addAllClass_(
            java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.DebugProtoBuf.Class> values) {
          if (class_Builder_ == null) {
            ensureClass_IsMutable();
            org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
                values, class__);
            onChanged();
          } else {
            class_Builder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
         */
        public Builder clearClass_() {
          if (class_Builder_ == null) {
            class__ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000008);
            onChanged();
          } else {
            class_Builder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
         */
        public Builder removeClass_(int index) {
          if (class_Builder_ == null) {
            ensureClass_IsMutable();
            class__.remove(index);
            onChanged();
          } else {
            class_Builder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
         */
        public org.jetbrains.kotlin.serialization.DebugProtoBuf.Class.Builder getClass_Builder(
            int index) {
          return getClass_FieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
         */
        public org.jetbrains.kotlin.serialization.DebugProtoBuf.ClassOrBuilder getClass_OrBuilder(
            int index) {
          if (class_Builder_ == null) {
            return class__.get(index);  } else {
            return class_Builder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
         */
        public java.util.List<? extends org.jetbrains.kotlin.serialization.DebugProtoBuf.ClassOrBuilder> 
             getClass_OrBuilderList() {
          if (class_Builder_ != null) {
            return class_Builder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(class__);
          }
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
         */
        public org.jetbrains.kotlin.serialization.DebugProtoBuf.Class.Builder addClass_Builder() {
          return getClass_FieldBuilder().addBuilder(
              org.jetbrains.kotlin.serialization.DebugProtoBuf.Class.getDefaultInstance());
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
         */
        public org.jetbrains.kotlin.serialization.DebugProtoBuf.Class.Builder addClass_Builder(
            int index) {
          return getClass_FieldBuilder().addBuilder(
              index, org.jetbrains.kotlin.serialization.DebugProtoBuf.Class.getDefaultInstance());
        }
        /**
         * <code>repeated .org.jetbrains.kotlin.serialization.Class class = 4;</code>
         */
        public java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Class.Builder> 
             getClass_BuilderList() {
          return getClass_FieldBuilder().getBuilderList();
        }
        private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
            org.jetbrains.kotlin.serialization.DebugProtoBuf.Class, org.jetbrains.kotlin.serialization.DebugProtoBuf.Class.Builder, org.jetbrains.kotlin.serialization.DebugProtoBuf.ClassOrBuilder> 
            getClass_FieldBuilder() {
          if (class_Builder_ == null) {
            class_Builder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
                org.jetbrains.kotlin.serialization.DebugProtoBuf.Class, org.jetbrains.kotlin.serialization.DebugProtoBuf.Class.Builder, org.jetbrains.kotlin.serialization.DebugProtoBuf.ClassOrBuilder>(
                    class__,
                    ((bitField0_ & 0x00000008) == 0x00000008),
                    getParentForChildren(),
                    isClean());
            class__ = null;
          }
          return class_Builder_;
        }

        private org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files files_ = org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.getDefaultInstance();
        private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.Builder, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.FilesOrBuilder> filesBuilder_;
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.js.Files files = 130;</code>
         */
        public boolean hasFiles() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.js.Files files = 130;</code>
         */
        public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files getFiles() {
          if (filesBuilder_ == null) {
            return files_;
          } else {
            return filesBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.js.Files files = 130;</code>
         */
        public Builder setFiles(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files value) {
          if (filesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            files_ = value;
            onChanged();
          } else {
            filesBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.js.Files files = 130;</code>
         */
        public Builder setFiles(
            org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.Builder builderForValue) {
          if (filesBuilder_ == null) {
            files_ = builderForValue.build();
            onChanged();
          } else {
            filesBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.js.Files files = 130;</code>
         */
        public Builder mergeFiles(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files value) {
          if (filesBuilder_ == null) {
            if (((bitField0_ & 0x00000010) == 0x00000010) &&
                files_ != org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.getDefaultInstance()) {
              files_ =
                org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.newBuilder(files_).mergeFrom(value).buildPartial();
            } else {
              files_ = value;
            }
            onChanged();
          } else {
            filesBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.js.Files files = 130;</code>
         */
        public Builder clearFiles() {
          if (filesBuilder_ == null) {
            files_ = org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.getDefaultInstance();
            onChanged();
          } else {
            filesBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.js.Files files = 130;</code>
         */
        public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.Builder getFilesBuilder() {
          bitField0_ |= 0x00000010;
          onChanged();
          return getFilesFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.js.Files files = 130;</code>
         */
        public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.FilesOrBuilder getFilesOrBuilder() {
          if (filesBuilder_ != null) {
            return filesBuilder_.getMessageOrBuilder();
          } else {
            return files_;
          }
        }
        /**
         * <code>optional .org.jetbrains.kotlin.serialization.js.Files files = 130;</code>
         */
        private org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
            org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.Builder, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.FilesOrBuilder> 
            getFilesFieldBuilder() {
          if (filesBuilder_ == null) {
            filesBuilder_ = new org.jetbrains.kotlin.protobuf.SingleFieldBuilder<
                org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Files.Builder, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.FilesOrBuilder>(
                    getFiles(),
                    getParentForChildren(),
                    isClean());
            files_ = null;
          }
          return filesBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.Library.Part)
      }

      static {
        defaultInstance = new Part(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.Library.Part)
    }

    private int bitField0_;
    public static final int KIND_FIELD_NUMBER = 1;
    private org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind kind_;
    /**
     * <code>optional .org.jetbrains.kotlin.serialization.js.Library.Kind kind = 1 [default = PLAIN];</code>
     */
    public boolean hasKind() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .org.jetbrains.kotlin.serialization.js.Library.Kind kind = 1 [default = PLAIN];</code>
     */
    public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind getKind() {
      return kind_;
    }

    public static final int PART_FIELD_NUMBER = 2;
    private java.util.List<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part> part_;
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
     */
    public java.util.List<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part> getPartList() {
      return part_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
     */
    public java.util.List<? extends org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.PartOrBuilder> 
        getPartOrBuilderList() {
      return part_;
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
     */
    public int getPartCount() {
      return part_.size();
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
     */
    public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part getPart(int index) {
      return part_.get(index);
    }
    /**
     * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
     */
    public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.PartOrBuilder getPartOrBuilder(
        int index) {
      return part_.get(index);
    }

    public static final int IMPORTED_MODULE_FIELD_NUMBER = 3;
    private org.jetbrains.kotlin.protobuf.LazyStringList importedModule_;
    /**
     * <code>repeated string imported_module = 3;</code>
     */
    public org.jetbrains.kotlin.protobuf.ProtocolStringList
        getImportedModuleList() {
      return importedModule_;
    }
    /**
     * <code>repeated string imported_module = 3;</code>
     */
    public int getImportedModuleCount() {
      return importedModule_.size();
    }
    /**
     * <code>repeated string imported_module = 3;</code>
     */
    public java.lang.String getImportedModule(int index) {
      return importedModule_.get(index);
    }
    /**
     * <code>repeated string imported_module = 3;</code>
     */
    public org.jetbrains.kotlin.protobuf.ByteString
        getImportedModuleBytes(int index) {
      return importedModule_.getByteString(index);
    }

    private void initFields() {
      kind_ = org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind.PLAIN;
      part_ = java.util.Collections.emptyList();
      importedModule_ = org.jetbrains.kotlin.protobuf.LazyStringArrayList.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getPartCount(); i++) {
        if (!getPart(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(org.jetbrains.kotlin.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, kind_.getNumber());
      }
      for (int i = 0; i < part_.size(); i++) {
        output.writeMessage(2, part_.get(i));
      }
      for (int i = 0; i < importedModule_.size(); i++) {
        output.writeBytes(3, importedModule_.getByteString(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeEnumSize(1, kind_.getNumber());
      }
      for (int i = 0; i < part_.size(); i++) {
        size += org.jetbrains.kotlin.protobuf.CodedOutputStream
          .computeMessageSize(2, part_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < importedModule_.size(); i++) {
          dataSize += org.jetbrains.kotlin.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(importedModule_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getImportedModuleList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseFrom(
        org.jetbrains.kotlin.protobuf.ByteString data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseFrom(byte[] data)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseFrom(
        byte[] data,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseDelimitedFrom(
        java.io.InputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parseFrom(
        org.jetbrains.kotlin.protobuf.CodedInputStream input,
        org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.jetbrains.kotlin.serialization.js.Library}
     */
    public static final class Builder extends
        org.jetbrains.kotlin.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.serialization.js.Library)
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.LibraryOrBuilder {
      public static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_descriptor;
      }

      protected org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.class, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Builder.class);
      }

      // Construct using org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          org.jetbrains.kotlin.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPartFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        kind_ = org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind.PLAIN;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (partBuilder_ == null) {
          part_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          partBuilder_.clear();
        }
        importedModule_ = org.jetbrains.kotlin.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.internal_static_org_jetbrains_kotlin_serialization_js_Library_descriptor;
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library getDefaultInstanceForType() {
        return org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.getDefaultInstance();
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library build() {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library buildPartial() {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library result = new org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.kind_ = kind_;
        if (partBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            part_ = java.util.Collections.unmodifiableList(part_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.part_ = part_;
        } else {
          result.part_ = partBuilder_.build();
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          importedModule_ = importedModule_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.importedModule_ = importedModule_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(org.jetbrains.kotlin.protobuf.Message other) {
        if (other instanceof org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library) {
          return mergeFrom((org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library other) {
        if (other == org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.getDefaultInstance()) return this;
        if (other.hasKind()) {
          setKind(other.getKind());
        }
        if (partBuilder_ == null) {
          if (!other.part_.isEmpty()) {
            if (part_.isEmpty()) {
              part_ = other.part_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePartIsMutable();
              part_.addAll(other.part_);
            }
            onChanged();
          }
        } else {
          if (!other.part_.isEmpty()) {
            if (partBuilder_.isEmpty()) {
              partBuilder_.dispose();
              partBuilder_ = null;
              part_ = other.part_;
              bitField0_ = (bitField0_ & ~0x00000002);
              partBuilder_ = 
                org.jetbrains.kotlin.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPartFieldBuilder() : null;
            } else {
              partBuilder_.addAllMessages(other.part_);
            }
          }
        }
        if (!other.importedModule_.isEmpty()) {
          if (importedModule_.isEmpty()) {
            importedModule_ = other.importedModule_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureImportedModuleIsMutable();
            importedModule_.addAll(other.importedModule_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getPartCount(); i++) {
          if (!getPart(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          org.jetbrains.kotlin.protobuf.CodedInputStream input,
          org.jetbrains.kotlin.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind kind_ = org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind.PLAIN;
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.js.Library.Kind kind = 1 [default = PLAIN];</code>
       */
      public boolean hasKind() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.js.Library.Kind kind = 1 [default = PLAIN];</code>
       */
      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind getKind() {
        return kind_;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.js.Library.Kind kind = 1 [default = PLAIN];</code>
       */
      public Builder setKind(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        kind_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .org.jetbrains.kotlin.serialization.js.Library.Kind kind = 1 [default = PLAIN];</code>
       */
      public Builder clearKind() {
        bitField0_ = (bitField0_ & ~0x00000001);
        kind_ = org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Kind.PLAIN;
        onChanged();
        return this;
      }

      private java.util.List<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part> part_ =
        java.util.Collections.emptyList();
      private void ensurePartIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          part_ = new java.util.ArrayList<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part>(part_);
          bitField0_ |= 0x00000002;
         }
      }

      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.Builder, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.PartOrBuilder> partBuilder_;

      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part> getPartList() {
        if (partBuilder_ == null) {
          return java.util.Collections.unmodifiableList(part_);
        } else {
          return partBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
       */
      public int getPartCount() {
        if (partBuilder_ == null) {
          return part_.size();
        } else {
          return partBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part getPart(int index) {
        if (partBuilder_ == null) {
          return part_.get(index);
        } else {
          return partBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
       */
      public Builder setPart(
          int index, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part value) {
        if (partBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePartIsMutable();
          part_.set(index, value);
          onChanged();
        } else {
          partBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
       */
      public Builder setPart(
          int index, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.Builder builderForValue) {
        if (partBuilder_ == null) {
          ensurePartIsMutable();
          part_.set(index, builderForValue.build());
          onChanged();
        } else {
          partBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
       */
      public Builder addPart(org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part value) {
        if (partBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePartIsMutable();
          part_.add(value);
          onChanged();
        } else {
          partBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
       */
      public Builder addPart(
          int index, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part value) {
        if (partBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePartIsMutable();
          part_.add(index, value);
          onChanged();
        } else {
          partBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
       */
      public Builder addPart(
          org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.Builder builderForValue) {
        if (partBuilder_ == null) {
          ensurePartIsMutable();
          part_.add(builderForValue.build());
          onChanged();
        } else {
          partBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
       */
      public Builder addPart(
          int index, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.Builder builderForValue) {
        if (partBuilder_ == null) {
          ensurePartIsMutable();
          part_.add(index, builderForValue.build());
          onChanged();
        } else {
          partBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
       */
      public Builder addAllPart(
          java.lang.Iterable<? extends org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part> values) {
        if (partBuilder_ == null) {
          ensurePartIsMutable();
          org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
              values, part_);
          onChanged();
        } else {
          partBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
       */
      public Builder clearPart() {
        if (partBuilder_ == null) {
          part_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          partBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
       */
      public Builder removePart(int index) {
        if (partBuilder_ == null) {
          ensurePartIsMutable();
          part_.remove(index);
          onChanged();
        } else {
          partBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.Builder getPartBuilder(
          int index) {
        return getPartFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.PartOrBuilder getPartOrBuilder(
          int index) {
        if (partBuilder_ == null) {
          return part_.get(index);  } else {
          return partBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
       */
      public java.util.List<? extends org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.PartOrBuilder> 
           getPartOrBuilderList() {
        if (partBuilder_ != null) {
          return partBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(part_);
        }
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.Builder addPartBuilder() {
        return getPartFieldBuilder().addBuilder(
            org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
       */
      public org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.Builder addPartBuilder(
          int index) {
        return getPartFieldBuilder().addBuilder(
            index, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.getDefaultInstance());
      }
      /**
       * <code>repeated .org.jetbrains.kotlin.serialization.js.Library.Part part = 2;</code>
       */
      public java.util.List<org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.Builder> 
           getPartBuilderList() {
        return getPartFieldBuilder().getBuilderList();
      }
      private org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
          org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.Builder, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.PartOrBuilder> 
          getPartFieldBuilder() {
        if (partBuilder_ == null) {
          partBuilder_ = new org.jetbrains.kotlin.protobuf.RepeatedFieldBuilder<
              org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.Part.Builder, org.jetbrains.kotlin.serialization.js.DebugJsProtoBuf.Library.PartOrBuilder>(
                  part_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          part_ = null;
        }
        return partBuilder_;
      }

      private org.jetbrains.kotlin.protobuf.LazyStringList importedModule_ = org.jetbrains.kotlin.protobuf.LazyStringArrayList.EMPTY;
      private void ensureImportedModuleIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          importedModule_ = new org.jetbrains.kotlin.protobuf.LazyStringArrayList(importedModule_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated string imported_module = 3;</code>
       */
      public org.jetbrains.kotlin.protobuf.ProtocolStringList
          getImportedModuleList() {
        return importedModule_.getUnmodifiableView();
      }
      /**
       * <code>repeated string imported_module = 3;</code>
       */
      public int getImportedModuleCount() {
        return importedModule_.size();
      }
      /**
       * <code>repeated string imported_module = 3;</code>
       */
      public java.lang.String getImportedModule(int index) {
        return importedModule_.get(index);
      }
      /**
       * <code>repeated string imported_module = 3;</code>
       */
      public org.jetbrains.kotlin.protobuf.ByteString
          getImportedModuleBytes(int index) {
        return importedModule_.getByteString(index);
      }
      /**
       * <code>repeated string imported_module = 3;</code>
       */
      public Builder setImportedModule(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureImportedModuleIsMutable();
        importedModule_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string imported_module = 3;</code>
       */
      public Builder addImportedModule(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureImportedModuleIsMutable();
        importedModule_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string imported_module = 3;</code>
       */
      public Builder addAllImportedModule(
          java.lang.Iterable<java.lang.String> values) {
        ensureImportedModuleIsMutable();
        org.jetbrains.kotlin.protobuf.AbstractMessageLite.Builder.addAll(
            values, importedModule_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string imported_module = 3;</code>
       */
      public Builder clearImportedModule() {
        importedModule_ = org.jetbrains.kotlin.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string imported_module = 3;</code>
       */
      public Builder addImportedModuleBytes(
          org.jetbrains.kotlin.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureImportedModuleIsMutable();
        importedModule_.add(value);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.serialization.js.Library)
    }

    static {
      defaultInstance = new Library(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.serialization.js.Library)
  }

  public static final int PACKAGE_FQ_NAME_FIELD_NUMBER = 131;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.Package { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Package,
      java.lang.Integer> packageFqName = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Integer.class,
        null);
  public static final int CLASS_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.Class { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Class,
      java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation>> classAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int CLASS_CONTAINING_FILE_ID_FIELD_NUMBER = 135;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.Class { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Class,
      java.lang.Integer> classContainingFileId = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Integer.class,
        null);
  public static final int CONSTRUCTOR_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.Constructor { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Constructor,
      java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation>> constructorAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int FUNCTION_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.Function { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Function,
      java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation>> functionAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int FUNCTION_CONTAINING_FILE_ID_FIELD_NUMBER = 135;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.Function { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Function,
      java.lang.Integer> functionContainingFileId = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Integer.class,
        null);
  public static final int PROPERTY_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.Property { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Property,
      java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation>> propertyAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int COMPILE_TIME_VALUE_FIELD_NUMBER = 131;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.Property { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Property,
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.Argument.Value> compileTimeValue = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.Argument.Value.class,
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.Argument.Value.getDefaultInstance());
  public static final int PROPERTY_CONTAINING_FILE_ID_FIELD_NUMBER = 135;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.Property { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Property,
      java.lang.Integer> propertyContainingFileId = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Integer.class,
        null);
  public static final int ENUM_ENTRY_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.EnumEntry { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.EnumEntry,
      java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation>> enumEntryAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int PARAMETER_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.ValueParameter { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.ValueParameter,
      java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation>> parameterAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int TYPE_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.Type { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.Type,
      java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation>> typeAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.getDefaultInstance());
  public static final int TYPE_PARAMETER_ANNOTATION_FIELD_NUMBER = 130;
  /**
   * <code>extend .org.jetbrains.kotlin.serialization.TypeParameter { ... }</code>
   */
  public static final
    org.jetbrains.kotlin.protobuf.GeneratedMessage.GeneratedExtension<
      org.jetbrains.kotlin.serialization.DebugProtoBuf.TypeParameter,
      java.util.List<org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation>> typeParameterAnnotation = org.jetbrains.kotlin.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.class,
        org.jetbrains.kotlin.serialization.DebugProtoBuf.Annotation.getDefaultInstance());
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_Header_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_Header_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_File_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_File_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_Files_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_Files_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_Classes_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_Classes_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_Library_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_Library_fieldAccessorTable;
  private static final org.jetbrains.kotlin.protobuf.Descriptors.Descriptor
    internal_static_org_jetbrains_kotlin_serialization_js_Library_Part_descriptor;
  private static
    org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_jetbrains_kotlin_serialization_js_Library_Part_fieldAccessorTable;

  public static org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n#js/js.serializer/src/js.debug.proto\022%o" +
      "rg.jetbrains.kotlin.serialization.js\0320co" +
      "re/deserialization/src/descriptors.debug" +
      ".proto\"P\n\006Header\022\r\n\005flags\030\001 \001(\005\022\036\n\026js_co" +
      "de_binary_version\030\002 \001(\005\022\027\n\017package_fq_na" +
      "me\030\003 \001(\t\"V\n\004File\022\n\n\002id\030\001 \001(\005\022B\n\nannotati" +
      "on\030\002 \003(\0132..org.jetbrains.kotlin.serializ" +
      "ation.Annotation\"B\n\005Files\0229\n\004file\030\001 \003(\0132" +
      "+.org.jetbrains.kotlin.serialization.js." +
      "File\"!\n\007Classes\022\026\n\nclass_name\030\001 \003(\005B\002\020\001\"",
      "\265\004\n\007Library\022H\n\004kind\030\001 \001(\01623.org.jetbrain" +
      "s.kotlin.serialization.js.Library.Kind:\005" +
      "PLAIN\022A\n\004part\030\002 \003(\01323.org.jetbrains.kotl" +
      "in.serialization.js.Library.Part\022\027\n\017impo" +
      "rted_module\030\003 \003(\t\032\317\002\n\004Part\022@\n\007strings\030\001 " +
      "\001(\0132/.org.jetbrains.kotlin.serialization" +
      ".StringTable\022O\n\017qualified_names\030\002 \001(\01326." +
      "org.jetbrains.kotlin.serialization.Quali" +
      "fiedNameTable\022<\n\007package\030\003 \001(\0132+.org.jet" +
      "brains.kotlin.serialization.Package\0228\n\005c",
      "lass\030\004 \003(\0132).org.jetbrains.kotlin.serial" +
      "ization.Class\022<\n\005files\030\202\001 \001(\0132,.org.jetb" +
      "rains.kotlin.serialization.js.Files\"2\n\004K" +
      "ind\022\t\n\005PLAIN\020\001\022\007\n\003AMD\020\002\022\r\n\tCOMMON_JS\020\003\022\007" +
      "\n\003UMD\020\004:E\n\017package_fq_name\022+.org.jetbrai" +
      "ns.kotlin.serialization.Package\030\203\001 \001(\005:t" +
      "\n\020class_annotation\022).org.jetbrains.kotli" +
      "n.serialization.Class\030\202\001 \003(\0132..org.jetbr" +
      "ains.kotlin.serialization.Annotation:L\n\030" +
      "class_containing_file_id\022).org.jetbrains",
      ".kotlin.serialization.Class\030\207\001 \001(\005:\200\001\n\026c" +
      "onstructor_annotation\022/.org.jetbrains.ko" +
      "tlin.serialization.Constructor\030\202\001 \003(\0132.." +
      "org.jetbrains.kotlin.serialization.Annot" +
      "ation:z\n\023function_annotation\022,.org.jetbr" +
      "ains.kotlin.serialization.Function\030\202\001 \003(" +
      "\0132..org.jetbrains.kotlin.serialization.A" +
      "nnotation:R\n\033function_containing_file_id" +
      "\022,.org.jetbrains.kotlin.serialization.Fu" +
      "nction\030\207\001 \001(\005:z\n\023property_annotation\022,.o",
      "rg.jetbrains.kotlin.serialization.Proper" +
      "ty\030\202\001 \003(\0132..org.jetbrains.kotlin.seriali" +
      "zation.Annotation:\210\001\n\022compile_time_value" +
      "\022,.org.jetbrains.kotlin.serialization.Pr" +
      "operty\030\203\001 \001(\0132=.org.jetbrains.kotlin.ser" +
      "ialization.Annotation.Argument.Value:R\n\033" +
      "property_containing_file_id\022,.org.jetbra" +
      "ins.kotlin.serialization.Property\030\207\001 \001(\005" +
      ":}\n\025enum_entry_annotation\022-.org.jetbrain" +
      "s.kotlin.serialization.EnumEntry\030\202\001 \003(\0132",
      "..org.jetbrains.kotlin.serialization.Ann" +
      "otation:\201\001\n\024parameter_annotation\0222.org.j" +
      "etbrains.kotlin.serialization.ValueParam" +
      "eter\030\202\001 \003(\0132..org.jetbrains.kotlin.seria" +
      "lization.Annotation:r\n\017type_annotation\022(" +
      ".org.jetbrains.kotlin.serialization.Type" +
      "\030\202\001 \003(\0132..org.jetbrains.kotlin.serializa" +
      "tion.Annotation:\205\001\n\031type_parameter_annot" +
      "ation\0221.org.jetbrains.kotlin.serializati" +
      "on.TypeParameter\030\202\001 \003(\0132..org.jetbrains.",
      "kotlin.serialization.AnnotationB\021B\017Debug" +
      "JsProtoBuf"
    };
    org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public org.jetbrains.kotlin.protobuf.ExtensionRegistry assignDescriptors(
              org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new org.jetbrains.kotlin.protobuf.Descriptors.FileDescriptor[] {
          org.jetbrains.kotlin.serialization.DebugProtoBuf.getDescriptor(),
        }, assigner);
    internal_static_org_jetbrains_kotlin_serialization_js_Header_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_org_jetbrains_kotlin_serialization_js_Header_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_Header_descriptor,
        new java.lang.String[] { "Flags", "JsCodeBinaryVersion", "PackageFqName", });
    internal_static_org_jetbrains_kotlin_serialization_js_File_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_org_jetbrains_kotlin_serialization_js_File_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_File_descriptor,
        new java.lang.String[] { "Id", "Annotation", });
    internal_static_org_jetbrains_kotlin_serialization_js_Files_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_org_jetbrains_kotlin_serialization_js_Files_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_Files_descriptor,
        new java.lang.String[] { "File", });
    internal_static_org_jetbrains_kotlin_serialization_js_Classes_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_org_jetbrains_kotlin_serialization_js_Classes_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_Classes_descriptor,
        new java.lang.String[] { "ClassName", });
    internal_static_org_jetbrains_kotlin_serialization_js_Library_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_org_jetbrains_kotlin_serialization_js_Library_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_Library_descriptor,
        new java.lang.String[] { "Kind", "Part", "ImportedModule", });
    internal_static_org_jetbrains_kotlin_serialization_js_Library_Part_descriptor =
      internal_static_org_jetbrains_kotlin_serialization_js_Library_descriptor.getNestedTypes().get(0);
    internal_static_org_jetbrains_kotlin_serialization_js_Library_Part_fieldAccessorTable = new
      org.jetbrains.kotlin.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_org_jetbrains_kotlin_serialization_js_Library_Part_descriptor,
        new java.lang.String[] { "Strings", "QualifiedNames", "Package", "Class_", "Files", });
    packageFqName.internalInit(descriptor.getExtensions().get(0));
    classAnnotation.internalInit(descriptor.getExtensions().get(1));
    classContainingFileId.internalInit(descriptor.getExtensions().get(2));
    constructorAnnotation.internalInit(descriptor.getExtensions().get(3));
    functionAnnotation.internalInit(descriptor.getExtensions().get(4));
    functionContainingFileId.internalInit(descriptor.getExtensions().get(5));
    propertyAnnotation.internalInit(descriptor.getExtensions().get(6));
    compileTimeValue.internalInit(descriptor.getExtensions().get(7));
    propertyContainingFileId.internalInit(descriptor.getExtensions().get(8));
    enumEntryAnnotation.internalInit(descriptor.getExtensions().get(9));
    parameterAnnotation.internalInit(descriptor.getExtensions().get(10));
    typeAnnotation.internalInit(descriptor.getExtensions().get(11));
    typeParameterAnnotation.internalInit(descriptor.getExtensions().get(12));
    org.jetbrains.kotlin.serialization.DebugProtoBuf.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}